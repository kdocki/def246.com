<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>def246.com</id>
    <title>def246</title>
    <updated>2013-07-14T05:00:00.000Z</updated>
    <generator>Turtles</generator>
    <author>
        <name>K.D.</name>
        <email>contact-me  ~AT~  k246d.33mail.com</email>
        <uri>def246.com</uri>
    </author>
    <link rel="alternate" href="def246.com"/>
    <link rel="self" href="def246.com/atom.xml"/>
    <logo>def246.comfavicon.png</logo>
    <icon>def246.comfavicon.png</icon>
    <rights>All rights reserved</rights>
    <category term="Technology"/>
    <entry>
        <title type="html"><![CDATA[ASL Story - Three Little Pigs]]></title>
        <id>/2011/02/2011-02-08_asl-3-little-pigs/</id>
        <link href="/2011/02/2011-02-08_asl-3-little-pigs/"/>
        <updated>2011-02-08T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[Below is a story (youtube) I made up in ASL which is similar to the 3 little pigs. However, since the invasion of technology into our daily lives, not just children but everyone has been affected by the explosion of social networking and instant gratification of timely communication. Text messages and Facebook devour our minds and time but we all still love it. It truly is Sophie’s choice for the previous, current and next generations.
]]></summary>
        <content type="html"><![CDATA[<p>Below is a story (youtube) I made up in ASL which is similar to the 3 little pigs. However, since the invasion of technology into our daily lives, not just children but everyone has been affected by the explosion of social networking and instant gratification of timely communication. Text messages and Facebook <strong>devour</strong> our minds and time but we all still <strong>love</strong> it. It truly is Sophie’s choice for the previous, current and next generations.</p>
<!-- more -->
<p>You can blame video games, you can blame parents; either way, children (and adults) have been desensitized to violence, life, liberty and freedom. Thus, this is how I imagine the 3 little pigs would be told by today’s standards.</p>
<iframe style="width: 100%; min-height: 480px;" src="https://www.youtube.com/embed/2YWwxLRD5nU" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
<p>No matter the ramifications of Facebook, Twitter and Youtube - ramifications which are still unknown, we will continue to enjoy these technologies always awaiting the next new tech-fad.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2011/02/2011-02-08_asl-3-little-pigs/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How The Mighty Have Fallen!]]></title>
        <id>/2011/02/2011-02-08_how-the-mighty-have-fallen/</id>
        <link href="/2011/02/2011-02-08_how-the-mighty-have-fallen/"/>
        <updated>2011-02-08T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[I took a ride on the way back machine to find something that is interesting to me. Even since Google first started their search engine in the 90’s they have kept the same consistent layout.
]]></summary>
        <content type="html"><![CDATA[<p>I took a ride on the way back machine to find something that is interesting to me. Even since Google first started their search engine in the 90’s they have kept the same consistent layout.</p>
<!-- more -->
<img class="w-full" src="/media/how-the-mighty-have-fallen/old-google-logo.jpg">
<p>Even the <em>“I’m feeling lucky”</em> button remains! <strong>How many other products</strong> do you know that have kept the <em>same</em> user interface for over 10 years and <strong>grown in success</strong>?</p>
<p>Furthermore, my memory is cloudy with various vage snapshots of random search engines I used before Google. Dogpile and Metacity for instance.</p>
<p><em>In fact, I’ve been using Google so long I can’t remember how to search without it.</em></p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2011/02/2011-02-08_how-the-mighty-have-fallen/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weebly - Doing it Right!]]></title>
        <id>/2011/02/2011-02-08_weebly-doing-it-right/</id>
        <link href="/2011/02/2011-02-08_weebly-doing-it-right/"/>
        <updated>2011-02-08T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[I have created many websites and blogs. Many of which have diminished and faded away due to my lack of motivation, time and interest. In the end, my laziness has the last laugh and boredom dominates the website and eventually the dust settles in. So… why go to all that extra effort to setup another website if it is just going to flop? Perhaps this site will be different?
]]></summary>
        <content type="html"><![CDATA[<p>I have created many websites and blogs. Many of which have diminished and faded away due to my lack of motivation, time and interest. In the end, my laziness has the last laugh and boredom dominates the website and eventually the dust settles in. So… <strong>why go</strong> to all that <strong>extra effort</strong> to setup another website if it is just going to flop? <em>Perhaps this site will be different?</em></p>
<!-- more -->
<p>However, most the other websites I created were 1) <strong>self</strong> hosted 2) <strong>self</strong>-maintained and 3) <strong>self</strong>-ish. Please allow me to explain.</p>
<h3>1) Self Hosted</h3>
<p>At many times I would start a new blog or website to experiment with the content management system (CMS) and setup a server and other applications (apache, php, etc). It was all just a big cluster of <u>experimenting</u>, which is how I learn - by doing. In this sense, websites were a good way to learn technology and how to administrate that technology. A consequence of experimenting though is that things break - <strong>a lot</strong> - and thus websites became a chore.</p>
<h3>2) Self Maintained</h3>
<p>Did I mention that this self-hosted server was a box sitting in my closet. So what if the electricity goes off or that server hard drive crashes (or a dog pees on it)? I managed to use <a href="http://www.vmware.com/">VMWare</a> to help consolidate electricity costs but that box still used some electricity 24/7.</p>
<p>Cost was not the only concerns I had. Security. In order to host a website I needed to punch a hole in my firewall thus allowing security breaches into my home. What advantages do I gain by giving hackers/<a href="http://en.wikipedia.org/wiki/Script_kiddie">skiddies</a> a DNS location and open ports to my home? Nothing much, the more I think about it.</p>
<h3>3) Selfish</h3>
<p>This hasn’t changed much. I’m still a selfish person and thus I crave free website hosting. I desire an easy way to update the website. Put simply: <strong>I can still be lazy and have a website</strong>. This is how I came about Weebly, and man, do I love it! Weebly allows me as a web developer to slap up a website in minutes and for <strong>free!</strong> It goes above and beyond any CMS I have ever used (and I have used too many to count) with the drag and drop “widget style” interface. Don’t get me wrong, there are still many improvements to be made on Weebly, but on many levels, <strong>Weebly is doing it right!</strong></p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2011/02/2011-02-08_weebly-doing-it-right/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[UALR Video Player]]></title>
        <id>/2011/04/2011-04-07_ualr-video-player/</id>
        <link href="/2011/04/2011-04-07_ualr-video-player/"/>
        <updated>2011-04-07T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I spent some time working on providing teachers, students and university staff some resources for online videos within Blackboard 8 (Vista/CE) and Blackboard 9. Read more for some context…
]]></summary>
        <content type="html"><![CDATA[<p>I spent some time working on providing teachers, students and university staff some resources for online videos within Blackboard 8 (Vista/CE) and Blackboard 9. Read more for some context…</p>
<!-- more -->
<p><strong>First, some context.</strong> UALR does not have a campus-wide video solution managed by IT (like Kaltura or a campus-wide Youtube). When I first arrived to my new job at the university, instantly there were several major issues that struck out at me about the existing process for creating online videos. The turn around for a single video was about 3 days. This meant that 10 videos had about a month turn around. This delay was caused by the lack of automation. Therefore my primary focus (as you will see in the videos) was around automation. There was a single person working full time on video management and she had been given a set of very manual instructions written by another person who handled the videos before leaving. Cutting down on the amount of labor for this lady, meant she could spend less time handling videos and more time being productive elsewhere. Some obvious to-dos were:</p>
<ul>
<li>Automate video re-encoding (utilize existing campus resources)</li>
<li>Delegate access to teachers (encourage self-service model)</li>
<li>Re-use flash video player (use parameters, instead of building new swf for each video)</li>
</ul>
<img class="w-full" src="/projects/images/image_01.jpg">
<p>Below is a video, so you can get an idea of the processes and environment before I arrived and insight into the solution provided and also why I did some of the things that I did.</p>
<p>{% youtube rYdKbDXt7Vc %}</p>
<p>This process has saved our office countless hours. While it is not perfect, it works - and is an improvement. It saves other offices time as well. For example, Disability Resources Center captions existing videos and to have one central location for search for videos saves them a lot of time. The instructors enjoy the new process as well because it allows them to be flexible with shorter turn around - usually within the hour the video is ready for playback on Blackboard.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2011/04/2011-04-07_ualr-video-player/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Replace Array Keys in PHP]]></title>
        <id>/2011/04/2011-04-28_replace-array-keys-in-php/</id>
        <link href="/2011/04/2011-04-28_replace-array-keys-in-php/"/>
        <updated>2011-04-28T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[If you want to replace the keys in an array there is no native php function that does this currently. So I wrote one. It takes the keys from the first array and replaces it with a new key. See code snippet below.
]]></summary>
        <content type="html"><![CDATA[<p>If you want to replace the keys in an array there is no native php function that does this currently. So I wrote one. It takes the keys from the first array and replaces it with a new key. See code snippet below.</p>
<!-- more -->
<pre><code>/**
 * Changes the keys of an array by matching the keys of both arrays and changes to the value
 * @return array
 *
 * Example Usage:
 *   $ary1 = array('myBadKey' =&gt; 1, 2, 'foo' =&gt; bar);
 *   $ary2 = array('myBadKey' =&gt; 'myGoodKey', 0 =&gt; 'NonNumericKey');
 *   print_r(array_key_merge($ary1, $ary2));
 */

function array_key_merge($array1, $array2)
{
   foreach($array2 as $key =&gt; $value)
   {
      if(array_key_exists($key, $array1))
      {
         $array1[$array2[$key]] = $array1[$key];
         unset($array1[$key]);
      }
   }

   return $array1;
}
</code></pre>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2011/04/2011-04-28_replace-array-keys-in-php/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google vs Facebook]]></title>
        <id>/2011/09/2011-09-21_google-vs-facebook/</id>
        <link href="/2011/09/2011-09-21_google-vs-facebook/"/>
        <updated>2011-09-21T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Signed up for a Google+ account a few days ago. If Google+ goes public in the next year (2012), then it may be the end of the world and Facebook. When they go public, it is on like Donkey Kong. I think the guys at Facebook know this and have a plan but given that Google has a larger customer base (1 billion strong) and their innovative products are used by the entire world - they have made their mission clear: become the world’s Social network. Only a powerhouse like Google could do this, with the level of integration between Picasa and Android and the budget to make it #1.
]]></summary>
        <content type="html"><![CDATA[<p>Signed up for a Google+ account a few days ago. If Google+ goes public in the next year (2012), then it may be the end of the world and Facebook. When they go public, <em>it is on like Donkey Kong</em>. I think the guys at Facebook know this and have a plan but given that Google has a larger customer base (1 billion strong) and their innovative products are used by the entire world - they have made their mission clear: become the world’s Social network. Only a powerhouse like Google could do this, with the level of integration between Picasa and Android and the budget to make it #1.</p>
<!-- more -->
<p><strong>The 3 things that stood out to me about Google+</strong></p>
<ul>
<li>Promise for integration with Picasa</li>
<li>Android mobile integration</li>
<li>Tightly coupled with Games and Apps (and websites)</li>
</ul>
<h3>Picasa (Tagging?)</h3>
<p>If you don’t know about Picasa go check it out. It allows you to organize your photos and even has facial detection software so you can detect people in your album. It’s sort of like tagging your friends in Facebook except that Picasa does it for you automatically. I can imagine this same algorithm would make Google+ very popular in the realm of photography (at least where people you know are actually in the photos).</p>
<h3>Android Integration</h3>
<p>Why tell Facebook where you are, your phone knows that already. There are so many benefits here I can’t list them. Given that Google rules the Android world, and many of the applications that make smart phones great… they can’t go wrong.</p>
<h3>Websites, games and more</h3>
<p>After I signed up for Google+, I noticed a whole new experience with in my Chrome browser (also another Google product). It seems that Google+ has this +1 button everywhere, and it will let me know about all the cool stuff Google+ can offer. It’s everywhere. In reality, it is going to be impossible to ignore Google+.</p>
<img class="w-full" src="/media/google-vs-facebook/monopoly.png">
<p>Obviously, I sound like a big Google Fanboy so I’m going to talk about something else besides how wonderful Google is. I’m not a stock guy and over $500 per share seems very, very steep. I have no clue what will happen to Google’s stock but I can guess that apart from a government take over (to prevent googolopoloy), there is great promise in Google Corp.</p>
<p>I know their apps are amazing, and developers (including myself) love to work with the api. It is simple. It is built by creative minds and crafted with simplicity in mind - not to mention the documentation. Google Apps provides clean documentation, tutorials to get started and plenty of client library support.</p>
<p>My biggest beef with Google Apps is that if there is a bug with the products, it’s difficult to get in touch with a “real person.” Also, why have they not opened the developer api for Google+ yet? I may have to put some of my Google experience to use and develop a Google+ application - which will hopefully rival <a href="https://developers.facebook.com/docs/graph-api">Facebook’s Graph API</a> which happens to be pretty sleek.</p>
<p>Which brings me to my next beef. The APIs change quite frequently and depreciate rapidly (for example, see the Google Spreadsheet API). And Facebook is notorious for changing it’s API constantly. What’s FBML again? Now, granted I am a web developer and not a business hat, I have really been looking at this from the developer perspective and, I can tell you from this view… Google+ has no where to go but up. It’s still not ready to compete with Facebook, but it’s getting closer every day.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2011/09/2011-09-21_google-vs-facebook/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blackboard Coursesites]]></title>
        <id>/2011/10/2011-10-21_blackboard-coursesites-introduction/</id>
        <link href="/2011/10/2011-10-21_blackboard-coursesites-introduction/"/>
        <updated>2011-10-21T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Am I head over heals for Blackboard CourseSites? CourseSites offers anyone who signs up as an instructor 5 free courses, templates, plenty of integration such as Blackboard IM and Facebook, which means you can chat with your students that are in your course. Anyone who has a Facebook, Google, twitter, Hotmail, yahoo, i.e. OpenID account can login to CourseSites as a student - without ever creating a Blackboard account. This seems like an awesome step forward for online education. Unfortunately, it may take a few years for universities to realize that net ids and expensive custom SSO portal integration offers little value for the cost.
]]></summary>
        <content type="html"><![CDATA[<p>Am I head over heals for Blackboard CourseSites? CourseSites offers anyone who signs up as an instructor 5 free courses, templates, plenty of integration such as Blackboard IM and Facebook, which means you can chat with your students that are in your course. Anyone who has a Facebook, Google, twitter, Hotmail, yahoo, i.e. OpenID account can login to CourseSites as a student - without ever creating a Blackboard account. This seems like an awesome step forward for online education. Unfortunately, it may take a few years for universities to realize that net ids and expensive custom SSO portal integration offers little value for the cost.</p>
<!-- more -->
<p>In minutes I had configured a profile: <a href="https://ktdockins.coursesites.com/">https://ktdockins.coursesites.com/</a></p>
<p>There is a lot of potential here, even for those who are not instructors at universities. For example, someone who just wanted to offer an online course could use this - imagine this site <a href="http://www.aslpro.com">http://www.aslpro.com</a> was merged into CourseSites, forging an online class with a large repository of ASL videos. A lot of websites exist which aim at educating people, why pay for website hosting, website design, website up keep especially for those that don’t know css, html, jquery, php, etc?</p>
<img class="w-full" src="/media/blackboard-coursesites-introduction/collaborate.jpg">
<p>Don’t forgot Blackboard collaborate. A powerful tool which is essentially a live virtual classroom. I prefer Collaborate over Webex, Livemeeting, Dimdim and Adobe Connect; while Collaborate isn’t flawless, it is very slick and being heavily developed on at this time.</p>
<p>CourseSites is also used for collaborating with other Blackboard users; currently I am a member of the ASR user group and several cohorts. These aren’t really used to teach a structured course but rather to learn through a community-like process. I may setup a course (if I can think of a good idea) to illustrate some Blackboard tools and advantages to distance learning.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2011/10/2011-10-21_blackboard-coursesites-introduction/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java ActiveObjects with a squeeze of Blackboard]]></title>
        <id>/2011/11/2011-11-03_java-activeobjects-with-a-squeeze-of-blackboard/</id>
        <link href="/2011/11/2011-11-03_java-activeobjects-with-a-squeeze-of-blackboard/"/>
        <updated>2011-11-03T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveRecord is to Ruby on Rails as Active Objects is to Java. Ideally it would be called AwesomeObjects. At last, persisting data for your Java web application is not all xml, POJOS, EJBs and did I mention xml? I don’t hate xml but I find configuring your application extremely inefficient after working with other frameworks that utilize convention over configuration.
Why do I have to specifiy a log4j properties file, hibernate persistance.xml configuration. And there’s soooo many options of how to develop: JPA, Wicket, OJB, Spring, Struts, Torque, Cayenne, Jaxor, TJDO, JDBM, pBeans, JPOX, Simple ORM, Ibatis, XORM, Speedo, Smyle, PAT, LiDO, JDO, IntelliBO, KodoJDO, Hamlets, Faces, RIFE, Shale, Sling, Stripes, Vaadin, Poopdeck (okay, I just made that one up). Point is that It can be a real headache to develop a Java web app.
Furthermore, why do I have to create my POJOs and SQL for my database? Why can’t a framework just create my data objects, along with nice RESTful CRUD operations for each. Why, crow, why?! So at least for the moment, finding ActiveObjects is lemonade to quench my thirst for answers.
]]></summary>
        <content type="html"><![CDATA[<p>ActiveRecord is to Ruby on Rails as Active Objects is to Java. Ideally it would be called AwesomeObjects. At last, persisting data for your Java web application is not all xml, POJOS, EJBs and did I mention xml? I don’t hate xml but I find configuring your application extremely inefficient after working with other frameworks that utilize convention over configuration.</p>
<p>Why do I have to specifiy a log4j properties file, hibernate persistance.xml configuration. And there’s soooo many options of how to develop: JPA, Wicket, OJB, Spring, Struts, Torque, Cayenne, Jaxor, TJDO, JDBM, pBeans, JPOX, Simple ORM, Ibatis, XORM, Speedo, Smyle, PAT, LiDO, JDO, IntelliBO, KodoJDO, Hamlets, Faces, RIFE, Shale, Sling, Stripes, Vaadin, Poopdeck (okay, I just made that one up). Point is that It can be a real headache to develop a Java web app.</p>
<p>Furthermore, why do I have to create my POJOs and SQL for my database? Why can’t a framework just create my data objects, along with nice RESTful CRUD operations for each. <em>Why, crow, why?!</em> So at least for the moment, finding ActiveObjects is lemonade to quench my thirst for answers.</p>
<!-- more -->
<p>The documentation is lacking for ActiveObject but I was able to get it working quite easily. As soon as I saw the interface annotations for this library, I knew it would be a blast working with - assuming the pesticides had been spread around the source code e.g. no bugs. The website can be found here: <a href="http://java.net/projects/activeobjects/pages/Home">http://java.net/projects/activeobjects/pages/Home</a></p>
<p>Below I have an example on how to use Active Objects. Let us assume our web application has the concept of “templates” which we want to persist in the database. Templates can have questions, instances and permissions (those are all just interfaces too). As you can see below we just define java interfaces with get and set methods. You don’t implement the methods, just define them for reflection by AO. Also every interface will have a <code>getID()</code> method inherited from the parent Entity class. You can also add any annotations to describe any more specific mappings between your Java interface, other interfaces and also types for the database table. For example, below I use <code>@OneToMany</code> and <code>@SQLType(Types.CLOB)</code>.</p>
<pre><code>import java.sql.Timestamp;
import java.sql.Types;

import net.java.ao.Entity;
import net.java.ao.OneToMany;
import net.java.ao.schema.SQLType;

public interface Template extends Entity {
        public String getName();
        public void setName(String name);

        @SQLType(Types.CLOB)
        public String getDescription();

        @SQLType(Types.CLOB)
        public void setDescription(String description);

        public String getIncludePattern();
        public void setIncludePattern(String includePattern);

        public String getExcludePattern();
        public void setExcludePattern(String excludePattern);

        public String getCreateDate();
        public void setCreateDate(String createDate);

        public Timestamp getLastUpdated();
        public void setLastUpdated(Timestamp lastUpdated);

        public Integer getCurrentInstance();
        public void setCurrentInstance(Integer currentInstance);

        @OneToMany
        public Permission[] getPermissions();

        @OneToMany
        public Instance[] getInstances();

        @OneToMany
        public Question[] getQuestions();
}
</code></pre>
<p>I had attempted to use Active Objects with a Blackboard Building Block (also called a B2), but the Blackboard API didn’t seem to want to give me a proper information on how to connect to the database (Bb v 9.1.7). Therefore I never actually got around to using this code, but I’ll share it with you since you’re already here. And I wanna give a big shout out to Peter Fokkinga’s since I’m using his DbUtils class which can be found on <a href="http://forums.edugarage.com/cfs-filesystemfile.ashx/__key/CommunityServer.Components.UserFiles/00.00.00.22.76/DbUtils.java.txt">edugarage</a>.</p>
<pre><code>// a class that I would use to get the Active Objects Database connection
// however didn't use due to the inconsistent behavior of data returned from
// Blackboard's VirtualInstallation (found case in 9.1.7 where bad database host was given

public class Database extends net.java.ao.DatabaseProvider {
        static Database _instance;
        static EntityManager _manager;

        @Override
        public Class&lt;? extends Driver&gt; getDriverClass() throws ClassNotFoundException {
                VirtualInstallation vi = Database.information();

                if(vi.getDbType().equals(&quot;mssql&quot;)) return (Class&lt;? extends Driver&gt;) Class.forName(&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;);

                else if(vi.getDbType().equals(&quot;oracle&quot;)) return (Class&lt;? extends Driver&gt;) Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);

                return null;
        }

        @Override
        protected String renderAutoIncrement() {
                VirtualInstallation vi = Database.information();
                if(vi.getDbType().equals(&quot;mssql&quot;)) return &quot;IDENTITY(1,1)&quot;;

                return &quot;IDENTITY&quot;;
        }


        public static Database instance()
        {
                if(_instance == null) {
                        VirtualInstallation vi = Database.information();

                        String dbInstance = (vi.getDbInstance() != null ? vi.getDbInstance() : &quot;&quot;) + &quot;/&quot; + vi.getDbUser();

                        DbUtils.SupportedDatabase dbType = DbUtils.SupportedDatabase.fromDriver(vi.getDbType());

                        String jdbc = dbType.getConnectString(vi.getDbHost(), vi.getDbPort(), dbInstance);

                        _instance = new Database(jdbc, vi.getDbUser(), vi.getDbPass());
                }

                return _instance;
        }

        public static EntityManager manager() throws PlugInException
        {
                if(_manager == null) {
                        _manager = new EntityManager(instance());
                }

                return _manager;
        }
}
</code></pre>
<p>So how would we use this Database class? Assuming the virtual installation worked consistently, below is an example using Spring with controller request mappings of how to do an edit and update.</p>
<p>Assuming you had the Database class from above then you could do something like this in your controller, below I really only use the find() but you can use all the goodies from Active Objects (see here: <a href="http://activeobjects.java.net/0.8.2/api">http://activeobjects.java.net/0.8.2/api</a>) like create, count, find, get, delete, and even migrate (creates your table for you just based on the interface definitions). Yes, you don’t use a POJO class, you use an POJO interface - which is really just genius.</p>
<pre><code>@RequestMapping(value=&quot;/templates/{id}&quot;, method = RequestMethod.GET)
public String get(@PathVariable(&quot;id&quot;) Integer id, Model model) {

        Template[] templates = Database.manager().find(Template.class, &quot;id = ?&quot;, id);

        // We didn't find a template with this id so just show the index page
        if(templates.length == 0) return &quot;redirect:/templates/&quot;;

        // found a template with this id, so let's edit that template
        model.addAttribute(&quot;template&quot;, templates[0]);
        model.addAttribute(&quot;helper&quot;, new ViewHelper());

        return &quot;templates/edit&quot;;
}

@RequestMapping(value=&quot;/templates/{id}&quot;, method = RequestMethod.POST)
public String update(HttpServletRequest request, @PathVariable(&quot;id&quot;) Integer id,
                                                 Model model) {

        // Get the requests for this template
        String name = request.getParameter(&quot;template_name&quot;);
        String description = request.getParameter(&quot;template_description_text&quot;);
        String includePattern = request.getParameter(&quot;include_pattern_text&quot;);
        String excludePattern = request.getParameter(&quot;exclude_pattern_text&quot;);

        // Find the template and save the new values
        Template[] templates = Database.manager().find(Template.class, &quot;id = ?&quot;, id);
        if(templates.length != 0) {

                templates[0].setName(name);
                templates[0].setDescription(description);
                templates[0].setIncludePattern(includePattern);
                templates[0].setExcludePattern(excludePattern);

                templates[0].save();
        }

        return &quot;redirect:/templates/&quot;;
}
</code></pre>
<p>f I come onto any projects that need a standalone website I would like to combine the Grails or Play! framework and use ActiveObjects for the Model part of the MVC framework - resulting in sheer Java bad-ass-ery. I know Java is a huge language and web frameworks only covers a small part of it’s ability; however, I really like the idea of Java becoming a competitor for simple turnkey web apps, the same ones that can be made in a short time using the conventions of CakePHP, Zend, Django and Rails. Developing in Play! and ActiveObjects is just plain easier. I don’t imagine that JEE, ContextFactories and extensive xml configurations are just going to magically disappear (you know job security and all that), but this is the age of designing RESTful web services and shunning away the complexities of CORBA and even SOAP.</p>
<p>I’m sure in ten years, something new will be along to lay rest to REST (sorry I couldn’t resist) but for now, the general consensus seems to be that web applications should be very simple to develop and maintain, i.e. wham, bam, thank you mam.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2011/11/2011-11-03_java-activeobjects-with-a-squeeze-of-blackboard/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blackboard taglib issue with itemIdAccessor]]></title>
        <id>/2011/11/2011-11-26_blackboard-taglib-issue-with-itemidaccessor/</id>
        <link href="/2011/11/2011-11-26_blackboard-taglib-issue-with-itemidaccessor/"/>
        <updated>2011-11-26T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[Blackboard has a tag library which allows you to put familar Blackboard looking html objects into your Building block. One element in the tag library is an inventoryList, which gives you a nice looking list of items. An inventory list in Blackboard might render something like this:
]]></summary>
        <content type="html"><![CDATA[<p>Blackboard has a tag library which allows you to put familar Blackboard looking html objects into your Building block. One element in the tag library is an inventoryList, which gives you a nice looking list of items. An inventory list in Blackboard might render something like this:</p>
<!-- more -->
<img class="w-full" src="/media/blackboard-taglib-issue-with-itemidaccessor/questions.jpg">
<p>The code to generate this list can be seen below. One special functionality of this list is to be able to re-order your list. This is done by sending an ajax call to your <code>reorderingUrl</code> anytime an item is moved. However, I noticed that my objects were not given the correct Id. Makes it difficult to reorder an item when your passing out incorrect Ids.</p>
<p>Notice the <code>itemIdAccessor=&quot;getId()&quot;</code> means that <code>item.getId()</code> should be called to get the Id for the item. After some digging I found that <code>getId()</code> must return a <code>String</code> (it was an <code>Integer</code> in my case) to work correctly. This bugs me though since most Ids are typically not <code>Strings</code>. Oh well.</p>
<pre><code>&lt;bbNG:inventoryList collection=&quot;${questions}&quot;
        objectVar=&quot;item&quot; className=&quot;org.oscelot.b2evals.models.Question&quot;
        description=&quot;Questions&quot; reorderable=&quot;false&quot;
        reorderType=&quot;Question ID&quot;
        reorderingUrl=&quot;${helper.url}/questions/${template.ID}/reorder&quot;
        itemIdAccessor=&quot;getId&quot; itemNameAccessor=&quot;getId&quot; showAll=&quot;true&quot;&gt;

        &lt;bbNG:listElement isRowHeader=&quot;true&quot; label=&quot;Question Text&quot; name=&quot;question_text&quot;&gt;
                ${item.text}
                &lt;bbNG:listContextMenu&gt;
                        &lt;bbNG:contextMenuItem title=&quot;Edit Question&quot; url=&quot;${helper.url}/questions/${item.ID}&quot; /&gt;
                        &lt;bbNG:contextMenuItem title=&quot;Remove Question&quot; url=&quot;javascript:bbHelper.deleteQuestion('${helper.url}/questions/${template.ID}/delete/${item.ID}');&quot; /&gt;
                &lt;/bbNG:listContextMenu&gt;
        &lt;/bbNG:listElement&gt;

        &lt;bbNG:listElement isRowHeader=&quot;false&quot; label=&quot;Question Type&quot; name=&quot;question_type&quot;&gt;
                &lt;c:choose&gt;
                        &lt;c:when test=&quot;${item.type==1}&quot;&gt;
                                Rating
                        &lt;/c:when&gt;
                        &lt;c:when test=&quot;${item.type==2}&quot;&gt;
                                Comment
                        &lt;/c:when&gt;
                        &lt;c:when test=&quot;${item.type==3}&quot;&gt;
                                Rating and Comment
                        &lt;/c:when&gt;
                        &lt;c:otherwise&gt;
                                Unknown Type?!
                        &lt;/c:otherwise&gt;
                &lt;/c:choose&gt;
        &lt;/bbNG:listElement&gt;
&lt;/bbNG:inventoryList&gt;
</code></pre>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2011/11/2011-11-26_blackboard-taglib-issue-with-itemidaccessor/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blackboard Course Evaluations Building Block]]></title>
        <id>/2012/01/2012-01-04_blackboard-course-evaluations-building-block/</id>
        <link href="/2012/01/2012-01-04_blackboard-course-evaluations-building-block/"/>
        <updated>2012-01-04T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[During the month of November, I worked on a project at UALR to create a process for online course evaluations. The result of several weeks of slaving away on one of my first blackboard Building Blocks (B2) ended up being used to allow online students evaluate courses at the university.
]]></summary>
        <content type="html"><![CDATA[<p>During the month of November, I worked on a project at UALR to create a process for online course evaluations. The result of several weeks of slaving away on one of my first blackboard Building Blocks (B2) ended up being used to allow online students evaluate courses at the university.</p>
<!-- more -->
<p>Currently there are few options for mixing course evaluations and Blackboard (depending on your wallet size) and therefore other universities might have an interest in this extension. You can <a href="http://projects.oscelot.org/gf/project/course-evals/">download the B2 from the open source project page</a>. See video below for an eight minute introduction.</p>
<p>{% youtube pN1uI2lFqvI %}</p>
<p><strong>Researching</strong> the API actually took <strong>longer</strong> than the actual coding. I felt before writing this web application, I should know some Blackboard best practices first. The open source community was quite helpful and can be found on <a href="http://projects.oscelot.org">projects.oscelot.org</a>. I did notice that Hibernate did not want to integrate due to classpath issues in tomcat and ActiveObjects did not work well with Oracle. The B2 should be database agnostic and is designed to work with both <em>SQL Server</em> and <em>Oracle</em> based Blackboard installs. The Spring framework was used for routing controller actions. There is still a lot of room for improvement but it’s a good start I believe.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/01/2012-01-04_blackboard-course-evaluations-building-block/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blackboard Drive Plays Nice With Other WebDAV Servers]]></title>
        <id>/2012/01/2012-01-27_blackboard-drive-plays-nice-with-other-webdav-servers/</id>
        <link href="/2012/01/2012-01-27_blackboard-drive-plays-nice-with-other-webdav-servers/"/>
        <updated>2012-01-27T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[If you’ve ever heard of Dropbox then you can think of Blackboard Drive as an awkward cousin. Blackboard Drive creates drive (like the C:\ drive) which allows users to easier manage files and folders that are stored online in the Content Collection.
]]></summary>
        <content type="html"><![CDATA[<p>If you’ve ever heard of Dropbox then you can think of Blackboard Drive as an awkward cousin. Blackboard Drive creates drive (like the C:\ drive) which allows users to easier manage files and folders that are stored online in the Content Collection.</p>
<!-- more -->
<p><a href="http://screencast.com/t/8ipYP4w1mM1">{% img full-width /media/blackboard-drive-plays-nice-with-other-webdav-servers/usbdrive.jpg %}</a></p>
<p><a href="http://screencast.com/t/8ipYP4w1mM1">Click on the image or here to view a video to watch me using Blackboard Drive and WebDAV.</a></p>
<p>Institutions already using Blackboard Learn or Vista/CE could leverage their existing system to popup an easily accessible content management system for the university. Think about how you share and backup files right now? Sending <em>emails, sharing usb drives, mapping windows or mac network shares</em>? Try sticking a usb stick into your iPad. Using Blackboard Drive with the Content Collection could potentially simplify and standardize how users share files within the university.</p>
<p>There are other hidden benefits too: <strong>backups and accessibility.</strong> Any flies you put in the Content Collection is backed up so you can worry more about making files than loosing them. Your files are accessible anywhere via the Internet by just logging into Blackboard normally and browsing to the files stored on the website.</p>
<div class="row"><div class="col-sm-3">
{% img full-width /media/blackboard-drive-plays-nice-with-other-webdav-servers/hardrock.jpg %}
</div><div class="col-sm-9">
However, what about universities that just want to store some files? Not everyone likes Grunge, man! The Content Collection could be an expensive place just to store files for later use - especially if you pay per GB of disk space, e.g. someone else hosts your Blackboard.
<p>It turns out that you can use Blackboard Drive to map other (Blackboard unrelated) webdav servers to help offset the cost of storage space.</p>
</div></div>
<p>Granted you don’t get the benefit of the Blackboard CMS, but you could leverage other tools that support WebDAV, e.g <a href="http://www.element-it.com/asp-net-explorer-browser/online-share/web-file-manager.aspx">HTTP Commander</a>. This all boils down to a useful combination of tools to enhance education. The teacher spends less time on focused on technology (with questions like, how do I share my files?) and more time teaching.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/01/2012-01-27_blackboard-drive-plays-nice-with-other-webdav-servers/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unboxing the Boxee Box]]></title>
        <id>/2012/01/2012-01-28_unboxing-the-boxee-box/</id>
        <link href="/2012/01/2012-01-28_unboxing-the-boxee-box/"/>
        <updated>2012-01-28T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this ten minute cut video, I unwrap a new toy. The Boxee set me back about $200, not to mention Best Buy had a $99 sale only a week later (that’s life). At first $200 may seem expensive but hear me out.
]]></summary>
        <content type="html"><![CDATA[<p>In this ten minute cut video, I unwrap a new toy. The Boxee set me back about $200, not to mention Best Buy had a $99 sale only a week later (that’s life). At first $200 may seem expensive but hear me out.</p>
<!-- more -->
<p>At the time our media center/Boxee was running on a 6GB, dual core computer. It was a power hog. Using a Kill-A-Watt meter, I found that the cost just to run this computer 24/7 was about $5 per month. You might be thinking, “why not just enable sleep mode then?”</p>
<p>{% youtube iVVpcHKrJl4 %}</p>
<p><em>Unfortunately</em>, sleep mode did not work well with the media center (IR receiver, wake-up stuff) and furthermore could be confusing and frustrating. Following the Keep It Simple Stupid methodology, disabling sleep mode seemed the best option at the time. The thought occurred to me that if I could decommission this media PC then I would save electricity.</p>
<p>It also just so happens that Kitty, my lovely wife, was in the market for a new computer, thus I formated the old media center computer instead of buying a brand new PC ($400+). Given all these conditions, in a mixed up kind of way I ended up saving money with a Boxee box - yes, I can be a real a tight-ass sometimes.</p>
<p><small>UPDATE: updating the Boxee software fixed a lot of issues that I was experiencing on this video! Kitty and I have been using this for several months now and still really enjoy it.</small></p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/01/2012-01-28_unboxing-the-boxee-box/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Creating PDFs in Java with iText]]></title>
        <id>/2012/02/2012-02-06_creating-pdfs-in-java-with-itext/</id>
        <link href="/2012/02/2012-02-06_creating-pdfs-in-java-with-itext/"/>
        <updated>2012-02-06T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[So you hear your boss or client say, I want my reports in “Excel and/or PDF,” and you think, “crap, now I gotta go find a library for my language.” And the requester isn’t often thinking about how much $$$ when they mention they want pdfs. So I had this same experience at UALR and I didn’t know the first thing about constructing pdf files. Thankfully, I found a free (with open source projects) Pdf library for Java called iText and within a day was able to construct a decent looking pdf file.
]]></summary>
        <content type="html"><![CDATA[<p>So you hear your boss or client say, <em>I want my reports in “Excel and/or PDF,”</em> and you think, “<strong>crap</strong>, now I gotta go find a library for my language.” And the requester isn’t often thinking about how much <span data-color="green">$$$</span> when they mention they want pdfs. So I had this same experience at UALR and I didn’t know the first thing about constructing pdf files. Thankfully, I found a <strong>free</strong> (with open source projects) Pdf library for Java called <a href="http://itextpdf.com/">iText</a> and within a day was able to construct a decent looking pdf file.</p>
<!-- more -->
<p>Here are some <a href="http://itextpdf.com/book/examples.php">examples</a> which enabled me to rapidly create my pdf reports. Specifically these two (<a href="http://itextpdf.com/examples/iia.php?id=205">1</a>) (<a href="http://itextpdf.com/examples/iia.php?id=28">2</a>) were helpful to me. You can see my <a href="http://projects.oscelot.org/gf/project/course-evals/scmsvn/?action=browse&amp;path=%2Ftrunk%2Fsrc%2Forg%2Foscelot%2Fb2evals%2Futils%2FPdfHelper.java&amp;view=markup">PdfHelper here in subversion</a>. The coolest part I think is the percentage bars I made without having to create images - I just use spaces and two contrasting colors to keep it simple.</p>
<pre><code>public static Paragraph getPercentAndBar(double percent, Paragraph paragraph)
{
        Chunk spacer;
        Chunk negative_spacer;
        Integer divider = 1;
        Integer number_of_spaces = (int) (percent / divider);
        Integer max_number_of_spaces = (int) (100 / divider);

        DecimalFormat df = new DecimalFormat(&quot;#.#&quot;);
        df.setMinimumFractionDigits(0);
        df.setMaximumFractionDigits(1);

        Font small = new Font();
        small.setSize(4);

        StringBuffer spaces = new StringBuffer(&quot;&quot;);
        for(int i = 0; i &lt; number_of_spaces; i++) spaces.append(&quot; &quot;);
        spacer = new Chunk(spaces.toString(), small);
        spacer.setBackground(new BaseColor(0x7a, 0x7a, 0x7a));

        StringBuffer filler_spaces = new StringBuffer(&quot;&quot;);
        for(int i = 0; i &lt; max_number_of_spaces - number_of_spaces; i++) filler_spaces.append(&quot; &quot;);
        negative_spacer = new Chunk(filler_spaces.toString(), small);
        negative_spacer.setBackground(new BaseColor(0xAa, 0xAa, 0xAa));

        paragraph.add(spacer);
        paragraph.add(negative_spacer);
        paragraph.add(getSpaces(2));
        paragraph.add(getSpacing(df.format(percent), 5) + df.format(percent) + &quot;%&quot;);

        return paragraph;
}
</code></pre>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/02/2012-02-06_creating-pdfs-in-java-with-itext/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Restful Data Sources]]></title>
        <id>/2012/02/2012-02-16_restful-data-sources/</id>
        <link href="/2012/02/2012-02-16_restful-data-sources/"/>
        <updated>2012-02-16T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[We have come so far in technology yet still use the same relational SQL database methodologies as we did in the 90’s. We waste countless hours and money on SQL discussing details which have nothing to do with the actual data we place inside this storage space. When we are finished with the database, we still have plenty of work left, building applications to access and mutate that same data set.
]]></summary>
        <content type="html"><![CDATA[<p>We have come so far in technology yet still use the same relational SQL database methodologies as we did in the 90’s. We <em>waste</em> countless hours and money on SQL discussing details which have nothing to do with the actual data we place inside this storage space. When we are finished with the database, we still have plenty of work left, building applications to access and mutate that same data set.</p>
<!-- more --> 
<p><a href="http://www.bryny.com/stu_sql.htm"><img src="/media/restful-data-sources/sqltricks.gif" alt=""></a></p>
<p>Thus, only a programmer can access the data. Those same programmers whom likely don’t fully understand the information collected and stored within the database. Programmers care about stuff like, <strong>structure</strong>, <strong>performance</strong>, <strong>security</strong>, <strong>servers</strong> and whatnot but data is just data. Later programmers will use an ORM to piece back together the data which was broken apart into a relational database only to re-structure the data into an object format. I could go on and on here, but my point is: <em>SQL can be really stupid.</em> Objects are easy. Resources are easy too. This got me to thinking…</p>
<p>Not too long ago I was skimming a research paper about <a href="http://dret.net/netdret/docs/wilde-www2010-restful-sql.pdf">HTTP Database Connector (HDBC)</a> because about two years ago I came up with an idea. The idea was simple. <strong>Data is accessed via the web</strong>, thus why not just access your data via a RESTful web data source instead through a custom built application fetching off of back end SQL database(s)? At the time I thought the idea to be revolutionary, but I’m certainly not the first to come up with this idea though: <a href="http://www.jasondb.com/jasondb/jasondb.html">JasonDB</a>, <a href="http://www.devreference.org/bookmarks/couchdb-restful-database-json-documents-php-how-to.html">CouchDB</a>, <a href="http://code.google.com/p/restdb/">Google RestDB</a>.</p>
<p>I think most anyone can understand objects, especially subject matter experts (SME) on particular objects, e.g. a chemist understand the toxicology of lead and mercury but knows nothing about SQL. Let’s use an example to illustrate. Both ways we just want to get the price of a wheel for a specific car.</p>
<div class="row"><div class="col-sm-6">
**The SQL Way**
<pre><code>Db = new Database(&quot;jdbc://hostname:port:user:pass&quot;);
Sql = &quot;select price from wheel where car_id = ?&quot;;
Rows = Db.getSelectQuery(Sql, &quot;00026213938&quot;);
price = null;
for each Row in Rows; do
   price = row[0];
</code></pre>
</div><div class="col-sm-6">
**Object Way**
<pre><code>Db = new Database(&quot;http://some.place/data&quot;);
Db.Authenticate(&quot;user&quot;, &quot;pass&quot;);
price = Db.car(&quot;00026213938&quot;).wheel.price
</code></pre>
</div></div>
<p>Accessing and manipulating data shouldn’t be difficult. I think using REST as a gateway framework to our data sets, we keep things simple for the poor programmer (sucker) who has to design a web application around the data for the people that actually make use of the data.</p>
<p>I wrote this paper about rest a few years ago and it reflects a brainstorming/soapbox approach to how ReST might be used to help the overall challenges we face in web development. Since that time Facebook has implemented the GraphAPI and other providers have started using ReST-ful apis to expose data.</p>
<h3>This is what happens when I get bored (A paper I wrote two years ago)</h3>
<p>This morning I woke up. A thought occured to me. I am so very small in a big world, a world that is always busy. Why do I even bother with knowledge? The more I seem to know the more I realize I don’t know. And the internet, an even busier world than our own is always evolving. Facebook, twitter, google docs, google maps, google this, google that, dropbox, piscasa, and the list goes on and on for what seems like infinity.</p>
<p>As a computer scientist I have a somewhat jaded view of the Internet and the technology surrounding it. One particular example is of an architecture that is built to run parrellel with the Internet: REpresentational State Transfer (REST). After reading Roy Fielding’s paper that first proposed this archaric idea many years ago - I felt that my eyes had been opened to a dark secert place in the Internet, a place that I had known about many years but had never really ventured there.</p>
<p>However, I’m a web/system developer and I have worked as an systems administrator as well. And to be frank, while web services are a wonderful idea, there are some problems that developers and administrators run into when implementing and maintaining them. I started to observe how I could simplify everyone else’s work just by doing a little smart programming.</p>
<p>But first I want to cover REST and some “terminology” so that we can all agree on the semantics.</p>
<p>REST has nouns, adjectives and verbs.</p>
<p>Nouns
A noun is a resource, for example: cats, dogs, students, movies, people, circles, nouns, places, etcs. What did you notice about all those listed nouns? They are all plural. While it is not nesscary, it is good design to make your resources (URI) plural when using REST. You can have an unlimited number of nouns.</p>
<p>Adjectives
A noun can exist, but without descriptions it is a pretty boring noun. Adjectives can be seen as properties of a noun. If our noun was cat then a few adjectives might be: fur type, eye color, size, gender. These adjectives are part of what makes a cat a cat. You wouldn’t expect to have motor as an adjective of a cat, cat’s don’t have motors.</p>
<p>Verbs
Unlike nouns, verbs are limited. But this is the beauty of REST. We can simplify actions. You can only have a select few. Here they are: GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD. These verbs are to allow you to implement ‘CRUD’ operations on your existing nouns. For example,</p>
<pre><code>GET http://foobar.com/cup/1
POST http://foobar.com/cup/1
PUT http://foobar.com/cup/1
DELETE http://foobar.com/cup/1
</code></pre>
<p>… and I will cover PATCH, HEAD and OPTIONS in a minute. But first, let’s cover our CRUD (create, read, update, delete) operations. It is important that we are on the same page here.</p>
<pre><code>GET does a 'read' operation
POST 'creates' a new resource
PUT 'updates' an existing resource (the entire thing, no partial updates allowed!)
DELETE 'delete's an existing resource
</code></pre>
<p>Let’s talk about PUT. When we put a resource back (update it) we must be sure to list all the adjectives describing that noun. If we do not we run the risk of dropping those adjectives. This is why a PATCH method was proposed and approved. Many people want to update a noun partially. They want you to know everything about their noun, but change one little adjective. For example, let’s say the cat’s name has changed from peppe le pue to scrodinger but nothing else has changed about the cat. I want to PATCH that cat’s name, else I have to GET the cat and then PUT him back. There are many questions that come up about this, including locking the cat up so no one else can touch him, if someone changes a cat the same time I do, what happens to the cat? Let’s ignore those questions, they aren’t important for this paper.</p>
<p>Usage Scenario</p>
<pre><code>We have three users. The back-end developer, the administrator and the end-user developer. The back-end developer creates the back-end resources and the URI to those resources. The administrator controls who has access to those resources. And finally the end-user developer engages documentation and finally the resources and uses the data from those resources to implement another product.

Is this the way it goes? Is this as good as it gets? And this doesn't include the technical writer who writes documentation for the end-user developer, explaining how to use the resources available. But I want to keep it DaD (developer administrator developer) and leave out QA testers and managers and other people who make our lives worth living. Let's assume that every user is tech-savvy. Ha. Okay, or not.
</code></pre>
<p>This problem is taking up my time
I hear people say that REST takes an indefinate about of time to start up. The road to RESTiality is a long one. Why? If it takes the back-end developer 5 weeks before he can finish something to show the administrator and the administrator has to configure/setup the system for 4 weeks and the end-user developer takes 3 weeks to successfully use the system; then it has taken 3 months before any real end-user progress has occurred. That is all based on these useless and factious numbers I just made up. How can we speed this process up?</p>
<p>Here is a list of mangled thoughts about the above usage scenario (it is rather generic on purpose)
- Assessability (ease of use)
- Knowledge Transfer
- Documentation
- Lack of standards for web browsers (and development tools)
- Service Orientied Minds</p>
<p>Accessability (Ease of use)
The RESTful mind tries to tackle this issue by using ‘standards’ like http basic authentication and URIs that can be requested and responded to via HTTP. Issues of security still exist though: user management for example. How do you manage users? And who has access to what? What if someone looses an eye or a password? So many service providers have switched to oauth to help with their woes of security. Some have setup complicated role based systems to solve their problems. The question is how should it be done?</p>
<p>Knowledge Transfer
Everyone has to know something about the system in order for it to work successfully. How do manage the knowledge from the back-end developer to the end-user developer? And also the administrator?</p>
<p>Lack of standards
One example is that	many browsers are not directly compatiable with PUT. This makes PUT more difficult to work with than GET and POST and thus, some developers just outright ignore PUT. In fact, this is where some of the complexity comes from. Take for example, POST /cat/update.php?id=1&amp;name=scrodinger and at first glance this might not seem ‘complex’ but it is not REST. As you read more, you will find out that I dispise ?params&amp;this=kind of urls - I find this harder to read than say /id/1/name/scrodinger (and it’s SEO friendly). But that asside, what makes this difficult to work with? First off, how many ‘verbs’ does cat have? For all I know we could have /cat/makeitjump.php and /cat/feedit.php and /cat/petit.php. We have opened up the world of unlimited actions, and actions can be complicated functions of a noun. Thus I say, keep it simple, stupid (KISS) and get back to the basics of CRUD.</p>
<p>Service Orientied Minds
It seems that many service providers (Google, twitter, facebook) have switching to using something almost REST. Why? Accessability, ease of use, they like it better than SOAP? Who doesn’t like taking it easy better than cleaning? Another reason may be that developers don’t want services, they want structured data and scalability. This means developers can take <em>your</em> data and use it for their own purposes. They don’t want to learn your language and verbs [$client-&gt;getBoaConstrictor(324, ‘fQn’)]. Developers want the universal nouns and descriptions of those nouns without the head ache of  Isn’t data what computer’s are all about anyway? Managing, manipulating and corrupting raw data.</p>
<p>“I want a system that is as simple as possible for everyone: from back-end developer (BEd) to front-end developer (FEd).” “And as generic as possible” “And a long jacket.”</p>
<p>I propose using some MVC framework (in my example Zend) which can be used as a defacto API system for many (think CLOUD here) developers. It can sit on top of many heterogenous data sources concurrently (don’t think 1 data source 1 MVC app here). A csv or xml file can be a model resource, an oracle database table, a postgresql and mysql database - and all from the same system.</p>
<ol>
<li>
<p>RESTful controllers and models (Zend_Restful_Model_DbTable) to inherit from. This makes it simpler for the BEd to list configuration of models that are transformed into resources auto-magicaly. The developer can spend time explaining resources with annotations and less time writting code to access and manipulate data sources.</p>
</li>
<li>
<p>Create security plugins that tie into existing frameworks. Facebook security, OAuth, Ldap, etc. I can update my configuration file (application.ini) and supply the minimal information for a plug-n-play effect. This means I supply you the configuration, everything else just works.</p>
</li>
<li>
<p>Web interface for managing access to resources. Some resources will be open to the world, others will be locked. The idea here is that you will have users on the system and each user can request keys to given locked resources. This is already coded and ready to go for the user.</p>
</li>
<li>
<p>Web interface for managing data sources. Administrators can easily add/edit (no removal) of new data sources from their pool of existing data sources. Removal of data sources means the removal of resources which should be treated as quasi-permenant and somewhat dependable.</p>
</li>
<li>
<p>Documentation uses a documentor (with annotations) to auto-magically create documentation for the FEd. This also compiles information we know about resources and displays to a FEd. Take for example a database table. We can easily fetch the ‘adjectives’ of our resource and some example data to allow the FE developer more insight into how to fetch data from our resource. We can provide examples in different langagues (use cases) because our verb-age is limited and thus we can show how to fetch this resource in python, php, c++, jquery (javascript), and the list goes on and on. And the beauty of this is that the code to fetch/manipulate a resource RESTfully… the code is almost identical regardless of the resource being used. Documentation is a time killer, and no developer really likes to spend time compiling documentation.</p>
</li>
<li>
<p>Apply magic methods ideology to REST. Unforunately, some browsers may or may not supply ‘data’ if you PUT or PATCH. How can we solve this? We can make magic methods to hack around (if everyone is doing it, then is it a hack?). For example: __method: PUT could be passed as a parameter to POST (this is how Ruby on Rails handles it). But I don’t want the developer to have to code this. So this is an example of how (see #1) implementing our own RESTful controllers, models, plugins can handle this type of workaround. The type of workaround that might take a developer extra time to implement.</p>
</li>
<li>
<p>Sitemaps. This is a ‘WSDL’ for REST. It tells the FEd what resources are available (as hyper links) and each will show documentation. We call this context switching in Zend (for example, if we find that the call is an XmlHttpRequest then we automatically display json instead of say… html or xml).</p>
</li>
<li>
<p>JSON. It is pracitcally universal. We aren’t going to worry about different markup langauges and content delivery so much, as JSON can be used in many languages, is easy to work with and thus my pick for data. Later the system can add context switches if we find this is needed.</p>
</li>
<li>
<p>There are some resources which are not really structured data. They have an id and simply exist on the file system as a file (Zend_Restful_Model_File). However, we can still keep metadata about this file (which can be seen as an adjective). One example resource might be a png image file. This is not structed data by any means and perhaps it is a file served out to other users for some reason. But should we treat this resource any differently? We might still want to protect it (if needed) and provide it to users to GET, PUT, POST, DELETE. I know what you’re thinking. Apache .htaccess, right? And what about users who requested XHR but they get a png back? This is why the documentor would need to handle non-structured data. It can show them an example of requests (by making the real requests itself) and thus the developer can know from the documentation that this does not deliver JSON but a PNG instead.</p>
</li>
</ol>
<p>Example Product
Sleepy DB. My RESTful Database implementation. This is my version of a RESTful database. It is your model(s). You can create, read, update, delete to any resourses you define. It has a UI that helps you crud resources as well. There are other databases (jasondb) which attempt to do RESTful db for the web but I have bigger plans for mine. Mainly, user friendli-ness. (You don’t have to be a developer to use it).</p>
<p>Sleepy DB is built in Zend and has no databases. It simply uses my API system as a database for it’s models. All data models are built using the Restful API system (Zend_Restful_Model_Api) built and runs over HTTPS via the cloud. Data can be stored and protected and served to other users. It is very much like Dropbox, except that Dropbox does not provide documentation on every file. It seems that Dropbox would likely be a good Model from which a BEd could inherit from. Zend_Restful_Model_Dropbox. A developer could extend this class and provide only the configuration needed to use Dropbox as a model. (On second thought, who knows?)</p>
<p>I hope you enjoyed my paper. I didn’t use big words to try and confuse anyone. I like simple. The biggest word I used I believe was hetrogenous data sources - which I meant different types of data sources - in case you missed that. And in case you missed it… the big picture idea is: simplify for everyone, generic enough for everyone. But if you missed the big picture then maybe you should read this paper again.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/02/2012-02-16_restful-data-sources/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Henry Markram - Simulating the Brain]]></title>
        <id>/2012/03/2012-03-02_henry-markram-simulating-the-brain/</id>
        <link href="/2012/03/2012-03-02_henry-markram-simulating-the-brain/"/>
        <updated>2012-03-02T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[I happened to stumble upon this 45 minute video lecture given by Henry Markham (in 3 parts). In this lecture, he talks about creating virtual biological models of the brain - project Blue Brain.
]]></summary>
        <content type="html"><![CDATA[<p>I happened to stumble upon this 45 minute <a href="http://www.kurzweilai.net/henry-markram-simulating-the-brain-next-decisive-years">video lecture given by Henry Markham</a> (in 3 parts). In this lecture, he talks about creating virtual biological models of the brain - <a href="http://en.wikipedia.org/wiki/Blue_Brain">project Blue Brain</a>.</p>
<!-- more --> 
<p>{% youtube _rPH1Abuu9M %}</p>
<p>As a dabbler in machine learning, I understand that this takes an ginormous amount of resources and hard work to accomplish!</p>
<p>It is beyond amazing to me that a random virtual model matched 98% of the locations of synapses.</p>
<p>That is incredible accuracy for all the different types of classifications they showed us. These computations for the Blue Brain project were done on IBM’s BlueGene super computer. Currently, I am studying <a href="http://threadingbuildingblocks.org/">Thread Building Blocks (TBB)</a> that was developed by IBM to do parallel processing with ease. I’d be willing to bet that they use TBB in their modeling architecture for Blue Brain.</p>
<div class="row"><div class="col-lg-6">
**Part 2**
{% youtube wDY4cFJauls %}
</div><div class="col-lg-6">
**Part 3**
{%youtube h06lgyES6Oc %}
</div></div>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/03/2012-03-02_henry-markram-simulating-the-brain/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nostalgia with CSS Sprites]]></title>
        <id>/2012/03/2012-03-03_nostalgia-with-css-sprites/</id>
        <link href="/2012/03/2012-03-03_nostalgia-with-css-sprites/"/>
        <updated>2012-03-03T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[What?
I made this a long time ago to experiment with css, sprite images and object oriented prototyping in JavaScript. It tracks your mouse movement and assigns a proper section of the sprite depending on mouse location.
]]></summary>
        <content type="html"><![CDATA[<h3>What?</h3>
<p>I made this a long time ago to experiment with css, sprite images and object oriented prototyping in JavaScript. It tracks your <em>mouse movement</em> and assigns a proper section of the sprite depending on mouse location.</p>
<!-- more --> 
<center><iframe src="/media/nostalgia-with-css-sprites/sprite.html" height="250px" scrolling="no" width="100%" style="border: none;"></iframe></center>
<h3>Why?</h3>
<p>I’m organizing my computer files (Spring cleaning) and I stumbled upon this thing I made back in 2008 (4 years ago) and it cracked me up. So I decided to share the laughter.</p>
<h3>How?</h3>
<p>If you like your whiskey straight from the bottle then I won’t bore you with lots of details and you can skip straight to the <a href="/media/nostalgia-with-css-sprites/sprite.zip">source code</a> or the <a href="/media/nostalgia-with-css-sprites/index.html">index.html</a>.</p>
<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;./sprite.css&quot; /&gt;
&lt;script src=&quot;jquery-1.4.2.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;animate-sprites.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;sprite-container&quot;&gt;
&lt;div id=&quot;sprite1-border&quot; class=&quot;sprite-border&quot;&gt;&lt;div id=&quot;sprite1&quot; class=&quot;sprite&quot;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div id=&quot;sprite2-border&quot; class=&quot;sprite-border&quot;&gt;&lt;div id=&quot;sprite2&quot; class=&quot;sprite&quot;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div id=&quot;sprite3-border&quot; class=&quot;sprite-border&quot;&gt;&lt;div id=&quot;sprite3&quot; class=&quot;sprite&quot;&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
    loadSprite('#sprite1');
    loadSprite('#sprite2');
    loadSprite('#sprite3');
&lt;/script&gt;
</code></pre>
<p>In the first attempt I wrote, I set background positions using javascript instead of css. This was slow, the code was more complicated and it was restrictive because my sprite images had to follow a strict width and height pattern.</p>
<p>So in the second version (what you see here), I simplified the javascript greatly by creating a column and row for each sprite in css. Not only did this work better and faster, it allowed me to statically set sprite locations and abstract locations from the javascript coding. Just another case where I should have <a href="http://en.wikipedia.org/wiki/KISS_principle">KISS</a>’ed. Below is a paste bin of the two major components of what you see here. First the <a href="/media/nostalgia-with-css-sprites/sprite.css">sprite.css</a></p>
<pre><code>.sprite {
        background-image: url(&quot;./sprite-small.png&quot;);
        background-repeat : no-repeat ;
        background-position: -750px top;
        width : 150px ;
        height : 112px ;
}

.sprite-container { position: relative; }
.sprite-border {
        border: 1px solid #4C3C1B;
        padding: 5px;
        background-color: #EFEECB;
        width : 150px;
        height : 112px;
        position: absolute;
}

#sprite1-border { z-index: -1; top: 100px;      left: 30px; }
#sprite2-border { z-index: -2; top: 30px; left: 150px;}
#sprite3-border { z-index: -3; }


.row0.col0 { background-position: left top; }
.row0.col1 { background-position: -150px top; }
.row0.col2 { background-position: -300px top; }
.row0.col3 { background-position: -450px top; }
.row0.col4 { background-position: -600px top; }
.row0.col5 { background-position: -750px top; }
.row0.col6 { background-position: -900px top; }
.row0.col7 { background-position: -1050px top; }

.row1.col0 { background-position: left -112px; }
.row1.col1 { background-position: -150px -112px; }
.row1.col2 { background-position: -300px -112px; }

... omitted for brevity ...

</code></pre>
<p>And here is the <a href="/media/nostalgia-with-css-sprites/animate-sprites.js">animate-sprite.js</a> to go along with it.</p>
<pre><code>var totalNumOfImages = 64;
var sprite = new Array();
var oldClass = new Array();
var xCenter = new Array();
var yCenter = new Array();

function loadSprite(id, x, y)
{
	sprite.push(id);
	oldClass.push(&quot;&quot;);

	if (x == undefined) x = -1;    // -1 means we calculate center each pass
	if (y == undefined) y = -1;    // in case the center of picture changes
	// for example, a moving sprite or width changes

	xCenter.push(x);
	yCenter.push(y);

	$( document ).mousemove(animateSprites);
}

function animateSprites(event)
{
	var x = event.pageX;
	var y = event.pageY;

	for ( var i in sprite )
	{
		var c = getSpriteClass(sprite[i], i, x, y);
		setSpriteClass(sprite[i], i, c);
	}
}

function setSpriteClass(s, i, c)
{
	if (oldClass[i] != &quot;&quot;) $(s).removeClass(oldClass[i]);
	$(s).addClass(c);
	oldClass[i] = c;
}

function getSpriteClass(s, e, x, y)
{
	var degrees = getSpriteDegree(s, e, x, y);
	var degreeOffset = Math.abs(45 - degrees % 90);
	var numPicsPerQuad = Math.sqrt(totalNumOfImages) * 2;

	if (degreeOffset == 0) degreeOffset = 1;                                                                                                                                                                 // gets rid of a glitch at 45 degree angles
	var num = Math.floor(numPicsPerQuad - numPicsPerQuad * degreeOffset / 45);

	var row = Math.floor(num / (Math.sqrt(numPicsPerQuad)));
	var col = num % Math.sqrt(numPicsPerQuad);

	if (degrees &lt;= 90) col = col + Math.sqrt(numPicsPerQuad);
	else if (degrees &gt; 180 &amp;&amp; degrees &lt;= 270) row = row + Math.sqrt(numPicsPerQuad);
	else if (degrees &gt; 270 &amp;&amp; degrees &lt; 360)
	{
		row = row + Math.sqrt(numPicsPerQuad);
		col = col + Math.sqrt(numPicsPerQuad);
	}
	return &quot;row&quot; + row + &quot; col&quot; + col;
}

function getSpriteDegree(s, e, x, y)
{
	var cx = xCenter[e];
	var cy = yCenter[e];

	if (cx == -1) cx = $(s).offset().left + $(s).width() / 2;
	if (cy == -1) cy = $(s).offset().top + $(s).height() / 2;

	var dx = x - cx;
	var dy = y - cy;

	// find the angle of mouse pointer relavant to our picture
	var degrees = 0;
	if (dx != 0) degrees = Math.abs(Math.floor(Math.atan(dy/dx) * 180/Math.PI));

	if (x &gt;= cx)
	{
		if (y &gt; cy &amp;&amp; degrees != 0) degrees = 360 - degrees;
	}
	else
	{
		if (y &lt; cy) degrees = 180 - degrees;
		if (y &gt;= cy)     degrees = 180 + degrees;
	}

	return degrees;
}
</code></pre>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/03/2012-03-03_nostalgia-with-css-sprites/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Programming Contest Questions]]></title>
        <id>/2012/03/2012-03-12_programming-contest-questions/</id>
        <link href="/2012/03/2012-03-12_programming-contest-questions/"/>
        <updated>2012-03-12T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I was a judge for uca’s annual alar’s programming contest years 2008 - 2010. It was a pretty fun experience, we got to spend the day judging other’s code and lots of free food.
During my recent computer cleaning, I found a few problems I wrote for the contest. I typically had some of the easier problems at the contest
(there were about a dozen total problems).
Therefore, I decided to share with you my three programming contest questions, 1) Dr. Bob’s Crazy People Party, 2) Palpatine’s Florist and 3) Modular Primes.
]]></summary>
        <content type="html"><![CDATA[<p>I was a judge for <a href="http://uca.edu/">uca</a>’s annual <a href="http://uca.edu/news/uca-to-host-applied-research-conference/">alar’s programming contest</a> years 2008 - 2010. It was a pretty fun experience, we got to spend the day judging other’s code and lots of free food.</p>
<p>During my recent computer cleaning, I found a few problems I wrote for the contest. I typically had some of the easier problems at the contest
(there were about a dozen total problems).</p>
<p>Therefore, I decided to share with you my three programming contest questions, 1) Dr. Bob’s Crazy People Party, 2) Palpatine’s Florist and 3) Modular Primes.</p>
<!-- more --> 
<h3>Dr. Bob’s Crazy-People Party (2008)</h3>
<p>{% blockquote %}This problem is a good example of where we should transform divide and conquer into dynamic programming or implement a top down memory function.{% endblockquote %}</p>
<p>**Congratulations, you have been invited to Dr. Bob’s Crazy-People Party for Quixotic Number Crunchers! Unfortunately, in order to enter the party house you must first answer a question. Since you know Dr. Bob likes Fibonacci n-step numbers you assume that will be the question. You decide to write a program to calculate <code>Fn(x)</code> for you so you won’t be stuck outside the party.</p>
<p><strong>Fibonacci n-step</strong> number is defined as:</p>
<pre><code>Fn(1) = 1, Fn(2) = 1
Fn(x) = Fn(x-1) + Fn(x-2) + … + Fn(x-n)
</code></pre>
<p>Assume that <code>if x &lt;= 0 then Fn(x) = 0</code>, also don’t worry about <code>x &gt; n</code>, Bob isn’t <strong>that</strong> crazy</p>
<p><strong>Some Examples</strong></p>
<pre><code>F3(10) = F3(9) + F3(8) + F3(7)
       = 81 + 44 + 24            # Notice, to find F3(9) we need to know F3(8) + F3(7) + F3(6)
       = 149                     # And likewise for F3(8), F3(7), F3(6), …, F3(1)

</code></pre>
<p>(<strong>Hint:</strong> <code>Fn(x)</code> is recursive in nature; however, if you write the program recursively it will probably be too slow and you will miss the party if Dr. Bob asks for a high value of n or x)</p>
<p>The program should loop until it sees a non-number input for n or x. Example, in order to end the program type q for the value of n or x. See below for some input/output examples.</p>
<p><strong>Input/Output Examples</strong></p>
<pre><code>n=7         n=5           n=10         n=30                 n=2        n=3
x=10        x=20          x=12         x=41                 x=8        x=5
ans=149     ans=203513    ans=1023     ans=549755811072     ans=21     ans=7
</code></pre>
<p>Here is the gist of it:</p>
<pre><code>$F1 = array(0 =&gt; 0, 1 =&gt; 1, 2 =&gt; 1);
$Fn = array(1 =&gt; $F1);

function Fn($step, $x)
{
	global $Fn;
	if (!isset($Fn[$step][$x])) SeiveFn($step, $x);
	return $Fn[$step][$x];
}

echo Fn($n = 10, $x = 12);  // 1023
</code></pre>
<p>So what is this Seive? I named it this because of the <a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Sieve of Eratosthenes</a>. The idea is to remember the all the previous prime numbers you found in order to find the next. We aren’t dealing with prime numbers in this case but instead Fibonacci numbers but the idea is the same. This is a way to calculate the Fn for a specific <code>$n</code> and <code>$x</code> and store the results in a two dimensional array for next time we try to find another value for the pair ($n, $x).</p>
<pre><code>function SeiveFn($step, $x)
{
	global $Fn;

	if(!isset($Fn[$step]))
	{
		if(!isset($Fn[$step - 1])) SeiveFn($step - 1, $x);
		$Fn[$step] = $Fn[$step - 1];
	}

	for($i = $step + 1; $i &lt;= $x; $i++)
	{
		$sum = 0;
		for($n = $i - 1; $n &gt;= $i - $step; $n--) $sum = $sum + $Fn[$step][$n];
		$Fn[$step][$i] = $sum;
	}
}
</code></pre>
<p>You can see <a href="/media/programming-contest-questions/fibonacci-n-step.zip">answer source code here in php</a>.</p>
<h3>Emperor Palpatine’s Florist (2009)</h3>
<p>You are a florist and you’ve received a call from Emperor Palpatine, something about executing <code>Order 66</code>. Basically he wants you to deliver flowers to certain Jedi warriors. However, you must deliver the flowers in a specific order, the first bouquet should go to the highest ranking Jedi, the second bouquet to the second highest, and so on down the chain of rank until the last flowers are delivered to the lowest ranking Jedi.</p>
<p>In case you are unsure of rank (shame, shame), he has given you a list of Jedi names in two columns. This list compares two Jedi members and you should read this as, first Jedi rank &gt; second Jedi rank.</p>
<p>Your list looks as follows:</p>
<pre><code>Windu Mundi
Yoda Yaddle
Yoda Poof
Windu Obi-wan
Yaddle Poof
Obi-wan Skywalker
Yoda Windu
Yaddle Obi-wan
Mundi Yaddle
Yoda Skywalker
Skywalker Poof
</code></pre>
<p>Note: From the first line we can tell that Windu is higher rank than Mundi. Thus we should also infer that anyone lesser in rank than Mundi is also lesser rank than Windu.</p>
<p>Return a list of names in order of rank based on this list above so you can deliver the flowers as the Emperor wishes. Be prepared to use another list in case the Emperor wants to add additional rankings to the list (don’t just do this by hand).</p>
<p>You can see <a href="/media/programming-contest-questions/palpatine-florist.zip">example solution for this in php</a>. The trick is just to print higher in rank, yourself, then everyone lower in rank and you keep a memory array to make sure you only print yourself once.</p>
<pre><code>function sortList($keys, $list)
{
	# get a list of people that are better than me then print my name
	foreach ($keys as $name) { whoIsBetter($name, $list); printJedi($name); }

	# get a list of people worse than me
	foreach ($keys as $name) { whoIsWorse($name, $list); }
}

$p = array(); # global variable to keep up with Jedi names we have printed
function printJedi($name)
{
	if($GLOBALS['p'][$name] != 1) print &quot;$name\n&quot;;
	$GLOBALS['p'][$name] = 1;
}

function whoIsBetter($name, $list)
{
	foreach ($list as $key =&gt; $value)
	{
		if($key != $name)
		{
			foreach ($value as $item) { if($item == $name) printJedi(&quot;$key&quot;); }
		}
	}
}

function whoIsWorse($name, $list)
{
	foreach ($list[$name] as $value){ printJedi($value); }
}
</code></pre>
<h3>Modular Primes (2010)</h3>
<p>I didn’t get very creative with this one. Essentially, I asked the teams to find the two smallest prime numbers which has a pattern found from <a href="http://en.wikipedia.org/wiki/Wilson's_theorem#Applications">Wilson’s theorem</a>. See <a href="/media/programming-contest-questions/modular-primes.zip">entire source code</a> or read the code below for more details. The first answer for range 2 through 10 would be 5039 because:</p>
<pre><code>Answer: 5039
   -&gt; 2 (2519) + 1 = 5039
   -&gt; 3 (1679) + 2 = 5039
   -&gt; 4 (1259) + 3 = 5039
   -&gt; 5 (1007) + 4 = 5039
   -&gt; 6 (839) + 5 = 5039
   -&gt; 7 (719) + 6 = 5039
   -&gt; 8 (629) + 7 = 5039
   -&gt; 9 (559) + 8 = 5039
   -&gt; 10 (503) + 9 = 5039
</code></pre>
<p>The teams had to find the next prime that matches this same pattern for range 2 to 10 and I asked to be able to check for other ranges besides 2 through 10.</p>
<pre><code>/* Find primes P, with following pattern
 * 2(p2) + 1 = P
 * 3(p3) + 2 = P
 * 4(p4) + 3 = P
 * ...
 * N(pN) + (N-1) = P
 *
 * This is a variation of Wilson's theorem for a prime number 'n'
 *      (n-1)! = -1 mod n
 */
function main()
{
	$max = 10;    # check mod 2 - 10
	$i = 5000;    # start iterator at 5000 (I already know the answer and it is greater than 5000)
	$count = 2;   # how many primes should we find with this pattern?

	while ($count != 0)
	{

		# find a possible answer
		$answer = $i;
		for($n=2; $n&lt;=$max; $n++)
		{
			if ($i % $n != ($n-1)) { $answer = 0; break; }
		}

		# check to see if this is an answer and also primality
		if($answer == $i &amp;&amp; isPrime($answer))
		{
			print &quot;Answer: $answer\n&quot;;
			for($n=2; $n&lt;=$max; $n++)
			{
				$mod = $answer % $n;
				$divisor=($answer - $mod)/$n;

				print &quot; -&gt; $n ($divisor) + $mod = &quot; . $answer ;
				print &quot;\n&quot;;
			}
			print &quot;\n&quot;;
			$count--;
		}
		$i++;
	}
}
</code></pre>
<p>That wraps it up. It was fun being a contest judge. As I said earlier, my questions were usually among the first answered. Not having your question answered at all just means it was too complex anyway and what’s the point of that? The goal is to see how well people can program - not to attempt to baffle and frustrate a team for five hours.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/03/2012-03-12_programming-contest-questions/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to read a csv file in bash]]></title>
        <id>/2012/03/2012-03-26_how-to-read-a-csv-file-in-bash/</id>
        <link href="/2012/03/2012-03-26_how-to-read-a-csv-file-in-bash/"/>
        <updated>2012-03-26T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Csv files are very underrated. Below is a pretty straightforward way to read in a csv file in bash. Regardless of it’s simplicity, I thought I’d share it. I may need to remind myself later how to do this.
]]></summary>
        <content type="html"><![CDATA[<p>Csv files are very underrated. Below is a pretty straightforward way to read in a csv file in bash. Regardless of it’s simplicity, I thought I’d share it. I may need to remind myself later how to do this.</p>
<!-- more --> 
<pre><code>#!/bin/bash
INPUT=data.csv
OLDIFS=$IFS
IFS=,   # the delimiter of your csv file, using a comma here
[ ! -f $INPUT ] &amp;&amp; { echo &quot;$INPUT file not found&quot;; exit 99; }
while read col1 col2
do
        echo &quot;col1: $col1&quot;
        echo &quot;col2: $col2&quot;
done &lt; $INPUT
IFS=$OLDIFS
</code></pre>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/03/2012-03-26_how-to-read-a-csv-file-in-bash/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google+ Weebly]]></title>
        <id>/2012/04/2012-04-03_google-weebly/</id>
        <link href="/2012/04/2012-04-03_google-weebly/"/>
        <updated>2012-04-03T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I like Weebly’s social integration with Facebook and Twitter but it is missing Google’s +1 integration. To add Google+ to my Weebly blog, I just add two javascript includes to my website footer (header won’t work because we require Prototype.js first).
I can add scripts in my Settings &gt; Search Engine Optimization (SEO) e.g, see the picture. If you’d like to replicate this on your Weebly blog, you can probably do the same as I’ve done below.
As a side note, I am assuming Weebly uses similar identifiers for all it’s web sites when it renders the ${content} section of blogs, so if that is true then hopefully my scripts should work for your Weebly blog too.
I started by looking at the Google Plus builder and I noticed this &lt;g:plusone&gt; tag you can add anywhere on your website. However, I didn’t want to have to manually add this to every single blog post, so I decided to do some scripting.
]]></summary>
        <content type="html"><![CDATA[<p>I like Weebly’s social integration with Facebook and Twitter but it is missing <a href="http://plus.google.com/">Google’s +1</a> integration. To add Google+ to my Weebly blog, I just add two javascript includes to my website footer (header won’t work because we require Prototype.js first).</p>
<p>I can add scripts in my <strong>Settings &gt; Search Engine Optimization (SEO)</strong> e.g, see the picture. If you’d like to replicate this on your Weebly blog, you can probably do the same as I’ve done below.</p>
<p>As a side note, I am assuming Weebly uses similar identifiers for all it’s web sites when it renders the ${content} section of blogs, so if that is true then hopefully my scripts should work for your Weebly blog too.</p>
<p>I started by looking at the <a href="http://www.google.com/webmasters/+1/button/index.html">Google Plus builder</a> and I noticed this <code>&lt;g:plusone&gt;</code> tag you can add anywhere on your website. However, I didn’t want to have to manually add this to every single blog post, so I decided to do some scripting.</p>
<!-- more -->
<p><a data-lightbox="google-weebly" href="/media/google-weebly/weebly-settings.jpg"><img class="full-width" src="/media/google-weebly/weebly-settings.jpg"></a></p>
<p>To add google +1 to your weebly site just do this:</p>
<pre><code>&lt;!-- Google+ library --&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://apis.google.com/js/plusone.js&quot;&gt;&lt;/script&gt;

&lt;!-- Google+ Weebly integration --&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://def246.com/media/google-weebly/weebly.google.plus.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>Weebly uses Prototype to abstract the horror of javascript, so it was obvious to me that I should just piggy back off this library. Prototype is very similar to jQuery, so I had very little problem with it and within a couple minutes I had Google +1 working on my Weebly site. However, all the +1’s linked to the same content. <a href="http://en.wikipedia.org/wiki/Underdog_(TV_series)">Not to fear</a>, using <a href="https://developers.google.com/+/plugins/+1button/">Google’s +1 API</a> I found it was very simple to specify the url you want to +1.</p>
<p>Also as a minor annoyance, it seems that Prototype and jQuery do not play well together. My post Nostaliga with CSS that included jQuery broke the Prototype.js script for Weebly. Why? Because they hate each other! That … and somewhere jQuery uses a global $ selector to call <code>$(...)._each()</code> function which instigates Prototype; however, Prototype has no such <code>_each</code> function which causes the library to error. I ended up spending a few minutes re-writing the sprite script to Prototype.js. <em>I know… I know… whatever… lol.</em></p>
<p><strong>Lesson to be learned:</strong> don’t use jQuery on your Weebly website and expect everything to work.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/04/2012-04-03_google-weebly/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Presenting at ARBug]]></title>
        <id>/2012/04/2012-04-12_presenting-at-arbug/</id>
        <link href="/2012/04/2012-04-12_presenting-at-arbug/"/>
        <updated>2012-04-12T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I presented the course evaluations building block at ARBug this year. I did this to practice for my upcoming presetation at BbWorld DevCon 12. The presentation was geared towards system admins but there were only 3 system admins out of the 12 people that showed up to hear me talk so the audience wasn’t really right. Below is the prezi I used, I may not use this for DevCon… as it was a little more liberal in nature.
]]></summary>
        <content type="html"><![CDATA[<p>I presented the <a href="/2012/01/04/blackboard-course-evaluations-building-block/">course evaluations building block</a> at ARBug this year. I did this to practice for my upcoming presetation at <a href="http://www.bbworld.com/2012/BbWorld/content.asp?id=2035">BbWorld DevCon 12</a>. The presentation was geared towards system admins but there were only 3 system admins out of the 12 people that showed up to hear me talk so the audience wasn’t really right. Below is the prezi I used, I may not use this for DevCon… as it was a little more liberal in nature.</p>
<!-- more -->
<center><div class="prezi-player"><style type="text/css" media="screen">.prezi-player { width: 550px; } .prezi-player-links { text-align: center; }</style><object id="prezi_nncol4okylfu" name="prezi_nncol4okylfu" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="550" height="400"><param name="movie" value="http://prezi.com/bin/preziloader.swf"/><param name="allowfullscreen" value="true"/><param name="allowscriptaccess" value="always"/><param name="bgcolor" value="#ffffff"/><param name="flashvars" value="prezi_id=nncol4okylfu&amp;lock_to_path=1&amp;color=ffffff&amp;autoplay=no&amp;autohide_ctrls=0"/><embed id="preziEmbed_nncol4okylfu" name="preziEmbed_nncol4okylfu" src="http://prezi.com/bin/preziloader.swf" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="550" height="400" bgcolor="#ffffff" flashvars="prezi_id=nncol4okylfu&amp;lock_to_path=1&amp;color=ffffff&amp;autoplay=no&amp;autohide_ctrls=0"></embed></object><div class="prezi-player-links"><p><a title="Course Evaluations" href="http://prezi.com/nncol4okylfu/course-evaluations/">Course Evaluations</a> on <a href="http://prezi.com">Prezi</a></p></div></div></center>
<h3>Feedback</h3>
<ol>
<li>One professor told me that I am a fun presenter but course evaluations are boring, so it’s hard to be overly excited about them.</li>
<li>I learned that I should put my email address/contact information on my slides so people will know how to contact me later.</li>
<li>I should slow down and gauge the audience more. Talk less, look more. It’s easy for me to forget this, and ramble on about details…</li>
<li>I need to tell people up front about when to ask questions (so they aren’t confused).</li>
<li>Tell people up front that this is a custom solution and not owned by Blackboard.</li>
<li>Too much information, who really cares about the past CE8 process? Maybe leave this out.</li>
</ol>
<p>All in all, it was fun to present. Glad I did it. I think if I present next year, I’ll pick a different topic on something instructional designers/teachers are actually interested in.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/04/2012-04-12_presenting-at-arbug/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Framework Blackboard SIS Integration]]></title>
        <id>/2012/06/2012-06-18_the-framework-blackboard-sis-integration/</id>
        <link href="/2012/06/2012-06-18_the-framework-blackboard-sis-integration/"/>
        <updated>2012-06-18T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Blackboard has a new and elegant feature. This feature simplifies what can become a complex problem - synchronizing data from your student information system into Blackboard?
Another feature, new to Blackboard 9.1.8, is the ability to group courses by terms. However, terms cannot automatically be associated with the snapshot client; hence, what got me interested in the Data SIS Integration using Snapshot Flat feed files.
]]></summary>
        <content type="html"><![CDATA[<p>Blackboard has a new and elegant feature. This feature simplifies what can become a complex problem - synchronizing data from your student information system into Blackboard?</p>
<p>Another feature, new to Blackboard <strong>9.1.8</strong>, is the ability to group courses by terms. However, terms cannot automatically be associated with the <strong>snapshot client</strong>; hence, what got me interested in the Data SIS Integration using Snapshot Flat feed files.</p>
<!-- more -->
<p>Watch the video for my sexy voice. Read more for some of my discoveries.</p>
<p>{% youtube 9v9_eslc4SU %}</p>
<p>Immediately, I was impressed by the web framework, so I…</p>
<ol>
<li>Decided to try and automate it - which really only took minutes with curl</li>
<li>Wrote a wrapper script around curl to auto-discover the feed types</li>
<li>Wrote some examples on how to use this framework script.</li>
<li>Created a video demonstrating how to setup SIS integration. The video was the longest part in this entire process.</li>
</ol>
<p>Below is an example of how easy it is to add some users from a csv  file into Blackboard. You can also see more examples in <a href="/media/the-framework-blackboard-sis-integration/the-framework.zip">this zip file</a> - look at the example script and feeds/ directory.</p>
<pre><code># setup some env variables
export SHARED_USERNAME=&quot;your-shared-username&quot;
export SHARED_PASSWORD=&quot;your-shared-password&quot;
export BB_URL=&quot;http://your-shared-url.com&quot;

echo &quot;adds the 55 users in the feeds/users.csv to EXAMPLES dsk&quot;
./framework refresh feeds/users.csv
</code></pre>
<p>If you found this script useful, then be a chum and help me <a href="http://www.lilsugar.com/How-Much-Diapers-Cost-9128186">buy a pack of diapers</a> for my little girl. Feedback is also welcome - comment or shoot me an email: K.D. <code>at</code> dockins <code>dot</code> org.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/06/2012-06-18_the-framework-blackboard-sis-integration/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blackboard Migration Project (2011 - 2012)]]></title>
        <id>/2012/06/2012-06-27_blackboard-migration-project/</id>
        <link href="/2012/06/2012-06-27_blackboard-migration-project/"/>
        <updated>2012-06-27T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[This year long project was to transition our faculty and staff from our old locally hosted Blackboard Vista/CE8 to a managed hosted Blackboard Learn 9.1 - in all respects two different learning management systems (LMS). Below are some items that I played a part in.
]]></summary>
        <content type="html"><![CDATA[<p>This year long project was to transition our faculty and staff from our old locally hosted Blackboard Vista/CE8 to a managed hosted Blackboard Learn 9.1 - in all respects two different learning management systems (<a href="http://en.wikipedia.org/wiki/Learning_management_system">LMS</a>). Below are some items that I played a part in.</p>
<!-- more -->
<h3>SIS (Student Information System) Integration with Snapshot</h3>
<p>Blackboard can capture students, faculty, courses, roles and various other things from the student information system using the Snapshot tool. Our group had a three weeks to discuss the business rules and logic behind synchronization and work out the technical details on how this would be accomplished. Later I was trained on the snapshot override client which allows exceptions and one-off feed files to Blackboard.</p>
<h3>Community and Content Engagement</h3>
<p>I attended several Blackboard training sessions and one certificate online course about the Content and Community piece of Blackboard. This piece allows us to setup institutional roles and group users into that role. Once these roles are in place, we can target users and release information (via modules and tabs) only to those certain individuals within the role.</p>
<h3>3rd Party Building Block Integration/Development</h3>
<p>Building Blocks are Blackboard’s way of adding customization. You can think of them as “plug-ins.” There are various places you can get these Building Blocks - you can develop your own or download from vendors, such as those on <a href="http://www.blackboard.com/partnerships/extensions.aspx">Blackboard Extensions</a>. There is even an <a href="http://projects.oscelot.org/gf/">open source website called Oscelot</a> which developers release Building Blocks for free public download. However, a problem that often rises is that someone has to setup, configure and support these Building Blocks and then learn how it best utilized for other users. We used many B2’s including McGraw Hill, Wimba and Blackboard Collaborate, Section Merge Tool, ASTRO, BbStats, Impersonate, Blackboard Mobile and many more.</p>
<div class="row"><div class="col-md-8">
One example of how I used open source building blocks to better our users is B2WebCT, which was developed by [Stephen Vickers](http://www.spvsoftwareproducts.com/). We had one year of co-production on both Blackboard CE8 and 9.1. This meant two different websites for users. The problem was that students and teachers would become confused because they didn't know where their course was located (in CE8 or 9.1).
<p>The B2WebCT Building Block fixed this problem by allowing us to place a module on the 9.1 webpage that single-signs-on the users to CE8. Thus, we were able to point every user to 9.1 and they could see a list of courses on <strong>both</strong> systems! <em>And everyone was pleased.</em></p>
</div><div class="col-md-4">
<a data-lightbox="blackboard-migration-project" href="/media/blackboard-migration-project/blackboard.png"><img class="full-width" src="/media/blackboard-migration-project/blackboard.png"></a>
</div></div>
<h3>System Administration Advanced Configuration</h3>
<p>There were many things I did to help simplify the lives of our instructional designers, technical staff and faculty members. Here are a few I can remember…</p>
<ul>
<li>Course Templates (using snapshot tool, we can provide course templates based on rules)</li>
<li>Tool Availability (which tools should we use?)</li>
<li>Branding (helped with troublesome CSS and staged a “frozen pristine” development server for our <a href="http://jennovate.it/">graphics designer</a>)</li>
<li>Managed things like orphaned content, specialized system roles and other various settings.</li>
<li>Cut down on migrated course sizes with quotas and active reporting - including SQL database queries</li>
<li>Setting up a course archival process (there was always talk about this, but I made it happen)</li>
</ul>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/06/2012-06-27_blackboard-migration-project/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blackboard Bundles - ¿Que language es esta?]]></title>
        <id>/2012/07/2012-07-10_blackboard-bundles-que-language-es-esta/</id>
        <link href="/2012/07/2012-07-10_blackboard-bundles-que-language-es-esta/"/>
        <updated>2012-07-10T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[If you’re looking for locale globalization in your building blocks then you need to use bundles. Bundles allow you to create property files for each language and then used them throughout your application.
There is a B2Context jar file developed by Stephen Vickers that allows you to easily get the correct language property file and then import it into the pageContext for parsing in your jsp file. But rather than waste time trying to figure it all that out, just look how Michael Fudge does it in the B2 Starter Kit.
]]></summary>
        <content type="html"><![CDATA[<p>If you’re looking for locale globalization in your building blocks then you need to use <a href="http://blogs.reading.ac.uk/develop/2010/11/24/bb-bundles/">bundles</a>. Bundles allow you to create property files for each language and then used them throughout your application.</p>
<p>There is a <a href="http://projects.oscelot.org/gf/project/bb-b2context/">B2Context</a> jar file developed by Stephen Vickers that allows you to easily get the correct language property file and then import it into the pageContext for parsing in your jsp file. But rather than waste time trying to figure it all that out, just look how Michael Fudge does it in the <a href="http://projects.oscelot.org/gf/project/b2sk/">B2 Starter Kit</a>.</p>
<!-- more -->
<pre><code>&lt;!-- B2-StarterKit\WebContent\system\formdemo.jsp --&gt;
&lt;%
  B2Context b2Context = new B2Context(request);
  String cancelUrl = b2Context.getNavigationItem(&quot;admin_plugin_manage&quot;).getHref();
  pageContext.setAttribute(&quot;bundle&quot;, b2Context.getResourceStrings());
  pageContext.setAttribute(&quot;cancelUrl&quot;, &quot;index.jsp&quot;);
  pageContext.setAttribute(&quot;thisUrl&quot;, &quot;formdemo.jsp&quot;);
%&gt;
&lt;bbNG:pageHeader instructions=&quot;${bundle['page.system.formdemo.instructions']}&quot;&gt;
                &lt;bbNG:breadcrumbBar environment=&quot;SYS_ADMIN_PANEL&quot; navItem=&quot;admin_plugin_manage&quot;&gt;
                &lt;bbNG:breadcrumb href=&quot;${cancelUrl}&quot; title=&quot;${bundle['plugin.name']}&quot; /&gt;
                &lt;bbNG:breadcrumb title=&quot;${bundle['page.system.formdemo.breadcrumb']}&quot; /&gt;
        &lt;/bbNG:breadcrumbBar&gt;
            &lt;bbNG:pageTitleBar iconUrl=&quot;${bundle['plugin.logo']}&quot; showIcon=&quot;true&quot; showTitleBar=&quot;true&quot; title=&quot;${bundle['page.system.formdemo.title']}&quot;/&gt;
&lt;/bbNG:pageHeader&gt;
</code></pre>
<p>Since the locales set is captured by the clients browser it’s good to know your audience. So <a href="http://www.roseindia.net/tutorials/i18n/locales-list.shtml">here is a list of locales</a> you might expect to see coming in, so that you can name your properties correctly that reside in the WEB-INF/bundles directory.</p>
<pre><code>### B2-StarterKit\WebContent\WEB-INF\bundles\bb-manifest-en_US.properties ###
### the location matters ^^ it needs to be in WEB-INF\bundles\ and the name matters too ...
### for example en_US is english and is likely the default bundle
### but the default depends on global Blackboard system settings
### it could very well be the fr_FR if the Blackboard environment is at a French university

...
page.system.formdemo.title=B2SK - Example Form Processing Demo
page.system.formdemo.breadcrumb= Form Demo
page.system.formdemo.instructions=This example demonstrates basic form processing the contents of the form are echoed back to the browser.
page.system.formdemo.step.title=Form Data
page.system.formdemo.step.instructions=Please fill in this form.
page.system.formdemo.label.demoTextelement=demoTextelement:
page.system.formdemo.label.demoRadio=demoRadio:
page.system.formdemo.label.demoCheckbox=demoCheckbox
page.system.formdemo.label.demoSelect=demoSelect:
page.system.formdemo.label.demoDatepicker=demoDatepicker:

...
</code></pre>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/07/2012-07-10_blackboard-bundles-que-language-es-esta/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blackboard Catalyst Award Innovative Development]]></title>
        <id>/2012/07/2012-07-23_blackboard-catalyst-award-innovative-development/</id>
        <link href="/2012/07/2012-07-23_blackboard-catalyst-award-innovative-development/"/>
        <updated>2012-07-23T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[
I was presented a catalyst award this year from Blackboard for Innovative Development. I released a building block used by our university for course evaluations and apparently some other universities liked it enough to [nominate me for this award](/media/blackboard-catalyst-award-innovative-development/catalyst-awards-winners-2012.pdf). I was very honored to [bring recognition to our university](http://ualr.edu/www/2012/07/02/ualr-innovator-to-be-honored-in-new-orleans/) ([pdf](/media/blackboard-catalyst-award-innovative-development/ualr-innovator-to-be-honored-in-new-orleans.pdf)).



]]></summary>
        <content type="html"><![CDATA[<div class="row"><div class="col-sm-10">
I was presented a catalyst award this year from Blackboard for Innovative Development. I released a building block used by our university for course evaluations and apparently some other universities liked it enough to [nominate me for this award](/media/blackboard-catalyst-award-innovative-development/catalyst-awards-winners-2012.pdf). I was very honored to [bring recognition to our university](http://ualr.edu/www/2012/07/02/ualr-innovator-to-be-honored-in-new-orleans/) ([pdf](/media/blackboard-catalyst-award-innovative-development/ualr-innovator-to-be-honored-in-new-orleans.pdf)).
</div><div class="col-sm-2">
<a data-lightbox="blackboard-catalyst-award" href="/media/blackboard-catalyst-award-innovative-development/catalyst-award-winners-logo.jpg"><img class="full-width" src="/media/blackboard-catalyst-award-innovative-development/catalyst-award-winners-logo.jpg"></a>
</div></div>
<!-- more -->
<div class="row"><div class="col-sm-2">
<a data-lightbox="blackboard-catalyst-award" href="/media/blackboard-catalyst-award-innovative-development/catalyst-awards.png"><img class="full-width" src="/media/blackboard-catalyst-award-innovative-development/catalyst-awards.png"></a>
</div><div class="col-sm-10">
There are certainly <a data-lightbox="blackboard-catalyst-award" href="/media/blackboard-catalyst-award-innovative-development/catalyst-awards-1.png">plenty of other developers</a> out there who are more innovative than me, but nonetheless I walked up to the stage (twice) and accepted the handshake and all that good stuff.
<p>I almost missed the first acceptance because I was busy talking to so many people was in front of the DevCon audience with <a href="http://gkroner.com/">George Kroner</a> and <a href="http://www.johnfontaine.com/">John Fontaine</a>. Look how <a data-lightbox="blackboard-catalyst-award" href="/media/blackboard-catalyst-award-innovative-development/catalyst-awards-2.png">sexy I am.</a> ^_^</p>
<p>The second acceptance I received was at the Catalyst Awards lunch where I got to shake hands with the CTO of Blackboard - Ray Henderson. Ray pretty much manages the entire academic technology side of Blackboard, while the CEO, Michael Chasen, is the figurehead and strategy giver.</p>
</div></div>
<div class="row"><div class="col-sm-10">
And speaking of figureheads, I got this big huge shiny award to take home and put on a shelf. I haven't quite found a place for it yet, and I think I'll have to clean out my office first before I get it out of the box. I wonder how much these glass awards cost - think I could eBay it or something? Maybe I'll check that out later... but enough about my award, let's discuss Blackboard World!
<p><strong>It was exhausting.</strong></p>
<p><a href="/media/blackboard-catalyst-award-innovative-development/bb-recap.mp4">My wife, daughter and I</a> actually made it in the background of the <a href="(https://www.youtube.com/watch?v=2P7lxjkr4fU)">BbWorld recap video</a> - talking with other award winners. Blackboard World was extremely busy this year. I started with <a href="http://www.oscelot.org/OSCELOT/dashboard/open-source-days">Open Source Day</a> (<a href="/media/blackboard-catalyst-award-innovative-development/open-source-days-oscelot.pdf">pdf</a>) Sunday morning, DevCon Monday through Tuesday, and finished up BbWorld Thursday night. I meet a lot of interesting people, saw a lot of new stuff and worked my butt off every day.</p>
</div><div class="col-sm-2">
<a data-lightbox="blackboard-catalyst-award" href="/media/blackboard-catalyst-award-innovative-development/award.jpg"><img class="full-width" src="/media/blackboard-catalyst-award-innovative-development/award.jpg"></a>
</div></div>
<p>Here’s my re-cap on my experience in New Orleans:</p>
<ul>
<li>They say <a href="http://www.flickr.com/photos/blackboardtv/7548688822/in/set-72157629769552788/">birds of a feather, flock together</a> - which is probably why I like open source day so much.</li>
<li>I presented at DevCon. (next post)</li>
<li>My favorite DevCon session was by <a href="http://www.slideshare.net/BlackboardInc/devcon-2012-william-boyd-title-of-presentation">William Boyd</a> about Spring @Security and Blackboard entitlements.</li>
<li>Best speech was by <a href="http://twitter.com/khanacademy">Sal Khan</a> who shared how <a href="http://www.khanacademy.org/">Khan Academy</a> all started and the direction its headed.</li>
<li>Didn’t really have a favorite BbWorld session (those were kind of boring).</li>
<li>Ate tons of Cajun food, including duck gumbo, fat shrimp and ratatouille</li>
<li><strong>My favorite part</strong>: Got to feel my little girl playing the drums in her momma’s belly (as we walked by Bourbon street performers playing drums).</li>
</ul>
<p>By the end of the week we were exhausted of New Orleans and ready to go home and rest.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/07/2012-07-23_blackboard-catalyst-award-innovative-development/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Presenting at DevCon 2012]]></title>
        <id>/2012/07/2012-07-30_presenting-at-devcon-2012/</id>
        <link href="/2012/07/2012-07-30_presenting-at-devcon-2012/"/>
        <updated>2012-07-30T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I presented my Course Evaluation building block for Blackboard at DevCon 2012 in New Orleans, LA.
Watch it here! or (audio only)
]]></summary>
        <content type="html"><![CDATA[<p>I presented my Course Evaluation building block for Blackboard at DevCon 2012 in New Orleans, LA.</p>
<p><a href="http://blackboard.echo360.com/ess/echo/presentation/9af19481-343c-4ffa-b185-380159293122">Watch it here!</a> or (<a href="/media/presenting-at-devcon-2012/lecture.mp3">audio only</a>)</p>
<!-- more -->
<p>It was fun to walk around later and have people come up to me and ask me questions - usually it’s the other way around.
I found that getting up in front of people is not really that scary, especially when you’re confident and prepared to talk about your material. Echo 360 can take you back in time to my presentation.</p>
<p>Later at BbWorld, I got to demo the survey functionality coming later this Fall (October version 9.1.10) and I’m very excited to see Blackboard step up to the plate.</p>
<p>My block will most assuredly be sun-set unless we find some show stopper in the new survey/course evaluation tool that Blackboard is offering out of the box. When I was asked how I felt about this, I replied, <strong>&quot;We knew a year ago the Blackboard Course Evaluations was coming at some point, but this (B2) gave us a solution while we waited which saved us thousands of dollars. I’m glad the wait is almost over.&quot;</strong></p>
<p>Kudos to Blackboard for yet another step in the right direction!</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/07/2012-07-30_presenting-at-devcon-2012/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pitch [anything] in 15 seconds]]></title>
        <id>/2012/08/2012-08-08_pitch-anything-in-15-seconds/</id>
        <link href="/2012/08/2012-08-08_pitch-anything-in-15-seconds/"/>
        <updated>2012-08-08T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Read an article about pitching anything in 15 seconds. As a techie, I often find myself caught tangled in details of an artificial problem - spouting off ideas and technical feasibilities.
But life isn’t all about technology and this article is an excellent reminder of how important it is to step back and look at the bigger picture.
]]></summary>
        <content type="html"><![CDATA[<p>Read an article about <a href="http://www.forbes.com/sites/carminegallo/2012/07/17/how-to-pitch-anything-in-15-seconds/">pitching anything in 15 seconds</a>. As a techie, I often find myself caught tangled in details of an artificial problem - spouting off ideas and technical feasibilities.</p>
<p>But life isn’t all about technology and this article is an excellent reminder of how important it is to step back and look at the bigger picture.</p>
<!-- more -->
<p><a data-lightbox="universe" href="/media/pitch-anything-in-15-seconds/universe.jpeg">{% img full-width /media/pitch-anything-in-15-seconds/universe.jpeg %}</a></p>
<p>The article explains 3 easy steps to pitch <strong>[anything]</strong>.</p>
<p><strong>Step 1:</strong> I really like the Twitter friendly headline. It forces you to simplify and shorten your idea to less than 140 characters.</p>
<p><strong>Step 2:</strong> Give three benefits of <strong>[anything]</strong>. Again, simplicity is king here.</p>
<p><strong>Step 3:</strong> Reinforce with stories, statistics and examples.</p>
<p>These three steps can be applied to other things as well. For example, education. What would happen if we design our class around these steps? Cut out the powerpoints and paragraphs. Stick to the bare necessities. Stick to examples and stories.</p>
<p>What if we applied these steps to software design? Too often I see co-workers skipping to programming language specifics or server operating systems before even simplifying what is they need to do (I’m guilty of this myself).</p>
<p>I’m going to jot down these steps and try them out in a upcoming few meetings, I want to see <strong>how well</strong> they work. Again… to paraphrase…</p>
<ul>
<li>Twitter-like Headline</li>
<li>Give 3 benefits</li>
<li>Reinforce with stories, statistics and examples</li>
</ul>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/08/2012-08-08_pitch-anything-in-15-seconds/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[jQuery Collage Plugin]]></title>
        <id>/2012/08/2012-08-14_jquery-collage-plugin/</id>
        <link href="/2012/08/2012-08-14_jquery-collage-plugin/"/>
        <updated>2012-08-14T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I’d like to share with you a jQuery plugin I wrote that allows me to turn a canvas into a collage of randomly sorted images.
The problem I ran into was the different aspect ratios.
I don’t know if a collage is possible using a pure css solution, but if you have any suggestions I welcome them! If you just start float’ing images together you get a lot of ugly whitespace. Obviously if you knew the image dimensions before hand then you could write some css to handle all the images.
The algorithm treats the entire canvas like a matrix of rows and columns and fill up the first column. When  I reach the bottom row of the canvas I start the next column. If I remember the positioning of the last column of images I know approximately where to put my next column of images. If you want to see the source code just start with this page.
]]></summary>
        <content type="html"><![CDATA[<p>I’d like to share with you a jQuery plugin I wrote that allows me to turn a canvas into a collage of randomly sorted images.</p>
<p>The problem I ran into was the different aspect ratios.</p>
<p>I don’t know if a collage is possible using a pure css solution, but if you have any suggestions I welcome them! If you just start float’ing images together you get a lot of ugly whitespace. Obviously if you knew the image dimensions before hand then you could write some css to handle all the images.</p>
<p>The algorithm treats the entire canvas like a matrix of rows and columns and fill up the first column. When  I reach the bottom row of the canvas I start the next column. If I remember the positioning of the last column of images I know approximately where to put my next column of images. If you want to see the source code just <a href="/media/jquery-collage-plugin/collage.html">start with this page</a>.</p>
<!-- more -->
<iframe src="/media/jquery-collage-plugin/collage.html" width="100%" height="500" scrolling="no" style="border: none;"></iframe>
<p>I didn’t spend a lot of time documenting this plugin because I just wanted something quick and dirty to display random images on my site in a sort of ‘collage-like’ manner. Unfortunately, sometimes it still shows some white space between the images as the algorithm isn’t perfect… I blame jQuery (not really, it’s my fault entirely). Here is a code snippet on how I get this thing to running.</p>
<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;
  jQuery(window).load(function() {
    jQuery('#refresh-canvas').click(function() { jQuery('.canvas').collage(); });
    jQuery('.canvas').collage({ numberOfImages: jQuery('.canvas').find(&quot;img&quot;).length });
  });
&lt;/script&gt;
</code></pre>
<p>Of course, you will need to include these javascript files as well in order for the code snippet above to work.</p>
<p>** UPDATE ** I made a <a href="https://github.com/kdocki/jquery-collage">github repo for this code</a> since that’s the mature thing to do.</p>
<p>Enjoy!</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/08/2012-08-14_jquery-collage-plugin/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sublime Text 2 is Sublime]]></title>
        <id>/2012/09/2012-09-09_sublime-text-2-is-sublime/</id>
        <link href="/2012/09/2012-09-09_sublime-text-2-is-sublime/"/>
        <updated>2012-09-09T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I really enjoy working with Sublime Text 2. I encourage you to try it out! Watch the video to see a demonstration of some functionality Sublime gives you.
I’ve been using it for a couple of weeks now to do some php programming and I still love it. I feel like an ultimate bad-ass every time I do multi-line edits.
]]></summary>
        <content type="html"><![CDATA[<p>I really enjoy working with <a href="http://www.sublimetext.com/">Sublime Text 2</a>. I encourage you to try it out! Watch the video to see a demonstration of some functionality Sublime gives you.</p>
<p>I’ve been using it for a couple of weeks now to do some php programming and I still love it. I feel like an <strong>ultimate</strong> bad-ass every time I do <em>multi-line edits</em>.</p>
<!-- more -->
<object id="scPlayer" class="embeddedObject" width="100%" height="415" type="application/x-shockwave-flash" data="http://content.screencast.com/users/ktdockins/folders/Jing/media/a22e1f97-62eb-4db0-a71e-2a59d97bd1c6/jingswfplayer.swf">
	<param name="movie" value="http://content.screencast.com/users/ktdockins/folders/Jing/media/a22e1f97-62eb-4db0-a71e-2a59d97bd1c6/jingswfplayer.swf">
	<param name="quality" value="high">
	<param name="bgcolor" value="#FFFFFF">
	<param name="flashVars" value="containerwidth=1920&amp;containerheight=1050&amp;thumb=http://content.screencast.com/users/ktdockins/folders/Jing/media/a22e1f97-62eb-4db0-a71e-2a59d97bd1c6/FirstFrame.jpg&amp;content=http://content.screencast.com/users/ktdockins/folders/Jing/media/a22e1f97-62eb-4db0-a71e-2a59d97bd1c6/2012-08-23_1711.swf&amp;blurover=false">
	<param name="allowFullScreen" value="true">
	<param name="scale" value="showall">
	<param name="allowScriptAccess" value="always">
	<param name="base" value="http://content.screencast.com/users/ktdockins/folders/Jing/media/a22e1f97-62eb-4db0-a71e-2a59d97bd1c6/">
</object>
<p>UPDATE: Still using Sublime Text a few months later and still love it. I’ve recommended installing Sublime package control (<a href="http://wbond.net/sublime_packages/package_control">download here</a>). Some of my favorite packages are</p>
<ol>
<li>Tag - finishes your tags (and Ctrl+Alt+F auto indents code)</li>
<li>Zen Coding - allows me to get my zen on.</li>
</ol>
<p>There are tons of packages you can find by pressing <strong>Ctrl+Shift+P</strong> and search for <em>Install Package</em></p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/09/2012-09-09_sublime-text-2-is-sublime/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angularjs parent scopes]]></title>
        <id>/2012/09/2012-09-20_angularjs-parent-scopes/</id>
        <link href="/2012/09/2012-09-20_angularjs-parent-scopes/"/>
        <updated>2012-09-20T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[How does one access the parent of the $scope in a controller? Easy… use $scope.$parent. You can even get parents of parents. Neat, right?
]]></summary>
        <content type="html"><![CDATA[<p>How does one access the parent of the $scope in a controller? Easy… use <code>$scope.$parent</code>. You can even get parents of parents. Neat, right?</p>
<!-- more -->
<iframe src="http://embed.plnkr.co/zFp9G2" frameborder="0" width="100%" height="300px" allowfullscreen="allowfullscreen"></iframe>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/09/2012-09-20_angularjs-parent-scopes/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Student View Building Block]]></title>
        <id>/2012/09/2012-09-21_student-view-building-block/</id>
        <link href="/2012/09/2012-09-21_student-view-building-block/"/>
        <updated>2012-09-21T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[In the old days of WebCT, instructors were given a tab that allowed them to view their course as a student. In Blackboard 9.1 this functionality is missing and much missed!
After a little investigating I found an open source Student View building block developed by cool Aussie cat named Wiley Fuller. The block exposes a course tool for the teacher to click which causes a demo student to be created and enrolled into the course and then switches the instructor to the freshly made demo student.
]]></summary>
        <content type="html"><![CDATA[<p>In the old days of WebCT, instructors were given a <a href="/media/student-view-building-block/studentview.png" data-lightbox="studentview">tab</a> that allowed them to view their course as a student. In Blackboard 9.1 this functionality is missing and much missed!</p>
<p>After a little investigating I found an <strong>open source</strong> <a href="http://projects.oscelot.org/gf/project/studentview/">Student View building block</a> developed by cool Aussie cat named <a href="http://www.linkedin.com/pub/wiley-fuller/0/895/905">Wiley Fuller</a>. The block exposes a course tool for the teacher to click which causes a demo student to be created and enrolled into the course and then switches the instructor to the freshly made demo student.</p>
<!-- more -->
<p>However, I found a few things missing so I decided to chip into the open source community. Here they are:</p>
<ol>
<li>Demo students can be grouped into a data source key</li>
<li>Demo student accounts can be prefixed with a custom tag set by system admin</li>
<li>Demo student that is created can be named after the course pkid (default), teacher’s pkid or the teacher’s username.</li>
</ol>
<p>You can view my code changes with subversion. I left it up to Wiley to merge the <a href="http://projects.oscelot.org/gf/project/studentview/scmsvn/?action=browse&amp;path=%2Fbranches%2F">branch</a> back into the trunk (which eventually he did). Wiley also implemented velocity templates for the RenderingHook which allows the B2 to interject javascript code and add those nifty little Student/Teacher view links to the course menu.</p>
<pre><code>svn checkout http://projects.oscelot.org/svn/studentview/trunk/
</code></pre>
<p>To get an idea of what visually changed…</p>
<div class="row"><div class="col-md-6">
Before
<a data-lightbox="studentview"href="/media/student-view-building-block/before.png"><img class="full-width" src="/media/student-view-building-block/before.png"></a>
</div><div class="col-md-6">
After
<a data-lightbox="studentview"href="/media/student-view-building-block/after.png"><img class="full-width" src="/media/student-view-building-block/after.png"></a>
</div></div>
<p>Here’s a summary of code changes</p>
<pre><code>[ktd1@box1 ~]$ svn diff --summarize  http://projects.oscelot.org/svn/studentview/trunk/ http://projects.oscelot.org/svn/studentview/branches/dsk-userPrefix-userId
M       src/java/StripesResources.properties
D       src/java/au/edu/swinburne/bb/studentview/UserIdType.java
M       src/java/au/edu/swinburne/bb/studentview/stripes/ConfigAction.java
M       src/java/au/edu/swinburne/bb/studentview/stripes/ViewAsStudentAction.java
M       web/WEB-INF/applicationContext.xml
M       web/WEB-INF/jsp/config.jsp
</code></pre>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/09/2012-09-21_student-view-building-block/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sublime Text 2 Cheat Sheet]]></title>
        <id>/2012/10/2012-10-03_sublime-text-2-cheat-sheet/</id>
        <link href="/2012/10/2012-10-03_sublime-text-2-cheat-sheet/"/>
        <updated>2012-10-03T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Feel free to print this off.
]]></summary>
        <content type="html"><![CDATA[<p>Feel free to <a href="/media/sublime-text-2-cheat-sheet/sublime-shortcuts.txt">print this off</a>.</p>
<!-- more -->
<h3>General</h3>
<pre><code>Ctrl + Shift + T     open last closed file

Ctrl K ,  Ctrl B     opens/closes the file explorer

Ctrl + Shift + P     command prompt

Ctrl + `             python console
</code></pre>
<h3>Find/Replace</h3>
<pre><code>Ctrl + P                    goto to anything

Ctrl + R                    goto symbol (i.e. classes)
(or) Ctrl + P, then type @

Ctrl + ;                    goto word in current file
(or) Ctrl + P, then type #

Ctrl + G                    goto line in current file
(or) Ctrl + P, then type :

Ctrl + H                    replace

Ctrl + Shift + F            find in files

Ctrl + F                    find
</code></pre>
<h3>Splits/Tabs</h3>
<pre><code>Alt + Shift + 1,2,…     splits the screen into multiple
                        views for multiple files

Alt + Shift + 5         grid (4 groups)

Alt + 1,2,3,…           switch between files tabs
                        Wastes time clicking on a tabs

Ctrl + 1,2,3,…          focus on group

Ctrl + Shift + 1,2,3,…	move file to group

Ctrl + PgUp/PgDn        cycles throught the open files
</code></pre>
<h3>Editing</h3>
<pre><code>Ctrl + Space           auto completion

Ctrl + L               select line
                       (repeat select next lines)

Ctrl + D               select word
                       (repeat for multiple editing)

Ctrl + mouse click     multiplies your mark/caret

Ctrl + Shift + D       duplicate line(s)

Ctrl + J               join lines

Ctrl + KU              upper case

Ctrl + KL              lower case

Ctrl + /               comment

Ctrl + Shift + /       block comment

Ctrl + Shift + M       select content into brackets

Ctrl + M               jump to matching brackets

Alt + Shift + W        wrap selection with a tag
                       enter tag’s name

Ctrl + U               soft undo (movement undo)

Ctrl + Y               redo or repeat

Ctrl + Shift + V       paste and ident

Ctrl + KK              delete from cursor to end of line

Ctrl + K + BKSP        delete from cursor to start of line
</code></pre>
<h3>Bookmarks</h3>
<pre><code>Ctrl + F2             toggle bookmark

F2                    next bookmark

Shift + F2            previous bookmark

Ctrl + Shift + F2     clear bookmarks
</code></pre>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/10/2012-10-03_sublime-text-2-cheat-sheet/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[418 I'm a teapot (RFC 2324)]]></title>
        <id>/2012/11/2012-11-23_418-im-a-teapot-rfc-2324/</id>
        <link href="/2012/11/2012-11-23_418-im-a-teapot-rfc-2324/"/>
        <updated>2012-11-23T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[Not had a lot of time to write lately with my 11 week old daughter, wife and work keeping me more than busy. But while I was working I was looking up RFC 2324 (http protocol) status codes and ran across this 418 I’m a teapot code.
]]></summary>
        <content type="html"><![CDATA[<p>Not had a lot of time to write lately with my 11 week old daughter, wife and work keeping me more than busy. But while I was working I was looking up RFC 2324 (http protocol) status codes and ran across this 418 I’m a teapot code.</p>
<!-- more -->
<p>At some point I want to use this status code in a project I’m working on. ^_^</p>
<a href="http://knowyourmeme.com/memes/htp-error-418-im-a-teapot">
	{% img full-width /media/418-im-a-teapot-rfc-2324/hpcloud418.png %}
</a>]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/11/2012-11-23_418-im-a-teapot-rfc-2324/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Binding to primitives in Angularjs ng-repeat]]></title>
        <id>/2012/12/2012-12-09_binding-to-primitives-in-angularjs-ngrepeat/</id>
        <link href="/2012/12/2012-12-09_binding-to-primitives-in-angularjs-ngrepeat/"/>
        <updated>2012-12-09T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[I recently stumbled upon a bug in angular. https://github.com/angular/angular.js/pull/1661
At the time of this writing the bug is still present in version 1.0.5 (stable) and 1.1.13 (unstable). Maybe it’s not a good idea to bind to a primitive type in an array but let’s say you had just a simple javascript array of strings and you want to repeat those in unordered list. Seems simple right? Now say you want to update the array model - let’s call it list.
]]></summary>
        <content type="html"><![CDATA[<p>I recently stumbled upon a bug in angular. <a href="https://github.com/angular/angular.js/pull/1661">https://github.com/angular/angular.js/pull/1661</a></p>
<p>At the time of this writing the bug is still present in version 1.0.5 (stable) and 1.1.13 (unstable). Maybe it’s not a good idea to bind to a primitive type in an array but let’s say you had just a simple javascript array of strings and you want to repeat those in unordered <strong>list</strong>. Seems simple right? Now say you want to update the array model - let’s call it <strong>list</strong>.</p>
<!-- more -->
<p>Here is the bug in action: <a href="http://plnkr.co/edit/DSC4X3XaY7jWGu97meRk?p=preview">http://plnkr.co/edit/DSC4X3XaY7jWGu97meRk?p=preview</a></p>
<p>and here is my workaround: <a href="http://plnkr.co/edit/zPHj9XHQW2D1scM2ZBhj">http://plnkr.co/edit/zPHj9XHQW2D1scM2ZBhj</a></p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/12/2012-12-09_binding-to-primitives-in-angularjs-ngrepeat/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Drawing Straws]]></title>
        <id>/2012/12/2012-12-22_drawing-straws/</id>
        <link href="/2012/12/2012-12-22_drawing-straws/"/>
        <updated>2012-12-22T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[The other night we were watching the movie Armageddon with Bruce Willis and Liv Tyler. Near the end of the movie the crew picks straws to determine who stays behind. Thus, being the Buzzkillington that I am, I posed a question to everyone…
If you could pick your turn, would you go first, last, or some where in between?
Not everyone could agree. Some said first, others said it didn’t matter. The answer is that it really shouldn’t matter which order you pick your straw in - given that the straws are put in a uniformly distributed random order.
]]></summary>
        <content type="html"><![CDATA[<p>The other night we were watching the movie Armageddon with Bruce Willis and Liv Tyler. Near the end of the movie the crew picks straws to determine who stays behind. Thus, being the Buzzkillington that I am, I posed a question to everyone…</p>
<p><strong>If you could pick your turn, would you go first, last, or some where in between?</strong></p>
<p>Not everyone could agree. Some said first, others said it didn’t matter. The answer is that it really shouldn’t matter which order you pick your straw in - <em>given that the straws are put in a uniformly distributed random order</em>.</p>
<!-- more -->
<p>{% img full-width /media/drawing-straws/armageddon-straws.jpg %}</p>
<p>This means you <strong>should</strong> receive no favor by picking first or last. This might seem like common sense, however, statistics can be tricky sometimes, (i.e. the <a href="http://en.wikipedia.org/wiki/Monty_Hall_problem">Monty Hall problem</a>) so I’m never too quick to brush statistical problems off with common sense. Thus I wrote a simulation to show myself that order doesn’t matter.</p>
<pre><code>var myApp = angular.module('myApp',[]);

function MyCtrl($scope) {
  $scope.number_of_sticks = 4;
  $scope.iterations = 1000000;

  $scope.winners = [];
  $scope.stats = [];
  $scope.deviation= [];
  $scope.average = 0;

  $scope.getSticks = function(size)
  {
    var sticks = [];
    var loser = Math.floor((Math.random()*size));
    for(var i = 0; i &lt; size; i++) sticks[i] = 0;
    sticks[loser] = 1;
    return sticks;
  };

  $scope.play = function(size)
  {
    var sticks = $scope.getSticks(size);
    for(var i = 0; i &lt; sticks.length; i++)
      if(typeof $scope.winners[i] === 'undefined')
        $scope.winners[i] = sticks[i];
      else
        $scope.winners[i] = $scope.winners[i] + sticks[i];
  };

  for(var i = 0; i &lt; $scope.iterations; i++)
    $scope.play($scope.number_of_sticks);


  for(var i = 0; i &lt; $scope.number_of_sticks; i++) {
    $scope.stats[i] = $scope.winners[i] / $scope.iterations;
      $scope.average += $scope.stats[i];
    }

    $scope.average = $scope.average / $scope.number_of_sticks;

  for(var i = 0; i &lt; $scope.number_of_sticks; i++)
      $scope.deviation[i] = Math.round(($scope.average - $scope.stats[i]) * 100);

}
</code></pre>
<p>Below if you click Result you can run a straw picking game one million times over with four people and as expected… no participant has a clear advantage (meaning they loose 25% of the time).</p>
<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/ADukg/1603/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2012/12/2012-12-22_drawing-straws/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[IoC container in Laravel 3]]></title>
        <id>/2013/02/2013-02-07_ioc-container-in-laravel/</id>
        <link href="/2013/02/2013-02-07_ioc-container-in-laravel/"/>
        <updated>2013-02-07T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[The IoC container in Laravel is a hidden diamond in the rough that not a lot of people seem to know about. It allows for dependency injection and extremely testable code. However, there was a bug in it so that you could not resolve any class that used optional parameters in it’s constructors (including Eloquent). The bug had been fixed in Laravel 4 which is still not out for beta, so I decided to backport this to Laravel 3 for Taylor (since he’s really busy with L4).
]]></summary>
        <content type="html"><![CDATA[<p>The IoC container in Laravel is a hidden diamond in the rough that not a lot of people seem to know about. It allows for dependency injection and extremely testable code. However, there was a bug in it so that you could not resolve any class that used optional parameters in it’s constructors (including Eloquent). The bug had been fixed in Laravel 4 which is still not out for beta, so I decided to <a href="https://github.com/laravel/laravel/commit/b48031b04ab0a94a00c85a32eae704678842969b">backport this to Laravel 3</a> for Taylor (since he’s really busy with L4).</p>
<!-- more --> 
<p>I also snuck in some extra functionality. The ability to pass in parameters to the resolve. This allows us to override the resolve if we need to do so which is a nice feature when using a lot of nested DI (especially if you’re componsating for testing doubles). See below</p>
<pre><code>class Foo
{
      public $bar;
      public __construct(Bar bar)
      {
         $this-&gt;bar = bar;
      }
}

class Bar
{
   public $neato = &quot;hmm&quot;;
}

$bar1 = IoC::resolve('Bar');
$bar1-&gt;neato = &quot;Something else&quot;;
$foo1 = IoC::resolve('Foo', [$bar1]);
$foo2 = IoC::resolve('Foo');

// you can control your bars man!
print $foo1-&gt;bar-&gt;neato . ' ' .
      $foo2-&gt;bar-&gt;neato;
</code></pre>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2013/02/2013-02-07_ioc-container-in-laravel/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google lol()]]></title>
        <id>/2013/04/2013-04-02_google-lol/</id>
        <link href="/2013/04/2013-04-02_google-lol/"/>
        <updated>2013-04-02T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I’ve been busy web programming and changing diapers. But I figured I should write about something just so weebly doesn’t think my website died. So I decided to take 5 minutes to write.
** Nerd alert - below statement contains nerdenium known to cause severe headaches**
]]></summary>
        <content type="html"><![CDATA[<p>I’ve been busy web programming and changing diapers. But I figured I should write about something just so weebly doesn’t think my website died. So I decided to take 5 minutes to write.</p>
<p>** Nerd alert - below statement contains <span data-color="green">nerdenium</span> known to cause severe headaches**</p>
<!-- more --> 
<p>So I needed to grab a quick image url and I stumbled upon this on Google’s webpage.</p>
<pre><code>&lt;img alt=&quot;Google&quot; height=&quot;95&quot; src=&quot;/images/srpr/logo4w.png&quot; width=&quot;275&quot; id=&quot;hplogo&quot; onload=&quot;window.lol&amp;&amp;lol()&quot; style=&quot;padding-top:112px&quot;&gt;
</code></pre>
<p>If the obscurity above doesn’t stick out like a sore thumb then don’t say I didn’t warn you (didn’t you see the Nerd alert?). What on earth is this <code>lol()</code>function? It wasn’t defined for me but I did find some <a href="http://stackoverflow.com/questions/2894550/blank-space-on-google-home-page">bored people on stackoverflow</a> talking about it. I also did not find a <code>lmao()</code> or <code>roflmao()</code> but it’s apparent the guys at Google have a sense of humor… <code>lol()</code>. Reminds me of my older days of writing crazy named functions like <code>call_me(s, e, x, y)</code>.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2013/04/2013-04-02_google-lol/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Simple Service - Little Rock Startup Winners]]></title>
        <id>/2013/06/2013-06-06_simple-service-little-rock-startup-winners/</id>
        <link href="/2013/06/2013-06-06_simple-service-little-rock-startup-winners/"/>
        <updated>2013-06-06T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[A couple of months ago Trav and I attended the Little Rock Startup Weekend contest. And won. We even made it into the news paper (pdf). We now have a website for future updates and a blog while we design out our application.
]]></summary>
        <content type="html"><![CDATA[<p>A couple of months ago Trav and I attended the Little Rock Startup Weekend contest. <strong>And won.</strong> We even made it into the <a href="http://www.arkansasbusiness.com/article/91889/simple-service-wins-startup-weekend-little-rock">news paper</a> (<a href="/media/simple-service-little-rock-startup-winners/simple-service-app-wins-startup-weekend-little-rock-arkansas-business.pdf">pdf</a>). We now have a website for future updates and a blog while we design out our application.</p>
<!-- more --> 
<p>{% img full-width /media/simple-service-little-rock-startup-winners/simple-service-277.jpg %}</p>
<p>Even after a couple of months, the team we created during that hectic weekend still meets weekly to talk about the product. We’ve been doing market analysis and research with nonprofits and schools and trying to design all with public service in mind. I’m also enjoying the free year of Gold memberships from <a href="http://teamtreehouse.com">Treehouse</a>.</p>
<p><strong>UPDATE (08/2013)</strong> Unfortunately we have split up, break ups happen. I learned a lot during this experience though.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2013/06/2013-06-06_simple-service-little-rock-startup-winners/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Select 2 jQuery (creating tags)]]></title>
        <id>/2013/07/2013-07-10_select2-jquery/</id>
        <link href="/2013/07/2013-07-10_select2-jquery/"/>
        <updated>2013-07-10T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I wanted something to do tags for a project I’m working on, so I put together something quick with Select2 which (imo) is much more feature-rich than it’s sister plugin Chosen. I’ve not tried out tag-it so I can’t really comment on how well it works.
]]></summary>
        <content type="html"><![CDATA[<p>I wanted something to do tags for a project I’m working on, so I put together something quick with <a href="http://ivaynberg.github.io/select2/">Select2</a> which (imo) is much more feature-rich than it’s sister plugin <a href="http://harvesthq.github.io/chosen/">Chosen</a>. I’ve not tried out <a href="http://aehlke.github.io/tag-it/">tag-it</a> so I can’t really comment on how well it works.</p>
<!-- more --> 
<p>{% img /media/select2-jquery/bloganizer-tags.jpg %}</p>
<p>Here is some code to do tagging with select2. It’s actually pretty simple once you dig through their big ass wiki api and figure out how to do it.</p>
<pre><code>$(&quot;.taggy&quot;).select2(
{
	tags: true,

	tokenSeparators: [&quot;,&quot;, &quot; &quot;],

	createSearchChoice: function(term, data)
	{
		if ($(data).filter(function() {
			return this.text.localeCompare(term) === 0;
		}).length === 0) {
			return {
				id: term,
				text: term
			};
		}
	}
});
</code></pre>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2013/07/2013-07-10_select2-jquery/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deployd Mincer]]></title>
        <id>/2013/07/2013-07-19_deployd-mincer/</id>
        <link href="/2013/07/2013-07-19_deployd-mincer/"/>
        <updated>2013-07-19T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[So I created a simplistic asset pipeline (sprockets style) interface for Deployd framework. The node package basically piggy backs off of the awesome mincer.js nodejs package. I was investigating Deployd as a way to do quick to life prototypes in nodejs. Unfortunately, it looks like Deployd might be dead or no longer maintained - so it is very unlikely that I will be doing any more with dpd-mincer. However, it was fun to see how difficult it is to work with deployd, and it actually was simple enough after a few console.log() to figure out what was inside some dpd objects.
]]></summary>
        <content type="html"><![CDATA[<p>So I created a <a href="https://github.com/kdocki/dpd-mincer">simplistic asset pipeline</a> (sprockets style) interface for <a href="http://www.deployd.com">Deployd</a> framework. The node package basically piggy backs off of the awesome <a href="https://github.com/nodeca/mincer">mincer.js</a> nodejs package. I was investigating Deployd as a way to do quick to life prototypes in nodejs. <strong>Unfortunately, it looks like Deployd might be dead or no longer maintained</strong> - so it is very unlikely that I will be doing any more with <a href="https://npmjs.org/package/dpd-mincer">dpd-mincer</a>. However, it was fun to see how difficult it is to work with deployd, and it actually was simple enough after a few <code>console.log()</code> to figure out what was inside some dpd objects.</p>
<!-- more --> 
<p>Check out <a href="https://github.com/kdocki/dpd-mincer">dpd-mincer on github</a></p>
<p>The one thing that stinks though about Deployd is that it is almost like a restful MVC but without the V. If you could render a view (like underscore template or handlebars) - it would be awesome at prototyping. But instead you end up creating the resources in Deployd and then consuming the JSON via your favorite javascript engine, e.g. Marionette or AngularJS, both libraries which take time to setup, at which point you are no longer prototyping.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2013/07/2013-07-19_deployd-mincer/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Twitter Bootstrap Modals in Backbone.Marionette]]></title>
        <id>/2013/07/2013-07-24_twitter-bootstrap-modals-in-backbone-marionette/</id>
        <link href="/2013/07/2013-07-24_twitter-bootstrap-modals-in-backbone-marionette/"/>
        <updated>2013-07-24T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I was reading a blog post by Derek Bailey where he talks about managing twitter bootstrap modals in Marionette. That gave me an idea to write a javascript mixin that I could reuse for my twitter bootstrap modals that just simply lets me open and close modals properly. It helps eliminate a little bit of boiler plate code to handle modals.
]]></summary>
        <content type="html"><![CDATA[<p>I was reading a <a href="http://lostechies.com/derickbailey/2012/04/17/managing-a-modal-dialog-with-backbone-and-marionette/">blog post by Derek Bailey</a> where he talks about managing twitter bootstrap modals in Marionette. That gave me an idea to write a javascript mixin that I could reuse for my twitter bootstrap modals that just simply lets me open and close modals <strong>properly</strong>. It helps eliminate a little bit of boiler plate code to handle modals.</p>
<!-- more --> 
<p>You can see the code at <a href="https://github.com/kdocki/marionette-twitter-bootstrap-modal-mixin">https://github.com/kdocki/marionette-twitter-bootstrap-modal-mixin</a></p>
<p>You can see a demo at <a href="http://kdocki.github.io/marionette-twitter-bootstrap-modal-mixin">http://kdocki.github.io/marionette-twitter-bootstrap-modal-mixin</a></p>
<p>I could have stuck to single inheritance by extending a <em>Marionette.ItemView</em> or something. But what if you wanted to use a <em>Marionette.CompositeView</em>? You’d end up writing the same class twice, so by using the mixin you are able to ‘mix in’ only the functionality needed for the modal.</p>
<p>** Update **
After talking to <a href="http://www.linkedin.com/pub/brian-mann/68/636/954">Brian Mann</a> about it, he suggested I use a Marionette.Region to do modals which is how I do modals now. I might do another post on this later.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2013/07/2013-07-24_twitter-bootstrap-modals-in-backbone-marionette/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Laravel 4 Book by Taylor Otwell]]></title>
        <id>/2013/08/2013-08-12_laravel-book-by-taylor-otwell/</id>
        <link href="/2013/08/2013-08-12_laravel-book-by-taylor-otwell/"/>
        <updated>2013-08-12T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[So a few months ago, I remember having lunch with Taylor at Genghis Grill and he was talking about maybe doing a video series to make money. Travis and I both suggested he write a book on Laravel. Heck, I even promised that I’d buy, so here we are a few months later and he has his book out. I’ve purchased the book, but haven’t gotten to read it yet.
]]></summary>
        <content type="html"><![CDATA[<p>So a few months ago, I remember having lunch with Taylor at Genghis Grill and he was talking about maybe doing a video series to make money. Travis and I both suggested he write a book on Laravel. Heck, I even promised that I’d buy, so here we are a few months later and he has <a href="https://leanpub.com/laravel">his book out</a>. I’ve purchased the book, but haven’t gotten to read it yet.</p>
<!-- more --> 
<p>The book price is $30 minimum. I’ve heard some people say that his book is too expensive. They say, <em>“It’s only 64 pages long! That’s 50 cents a page!”</em> Granted, there is truth to that, but then I look on leanpub and I see a book called Codebright for the same price. Codebright repeats a lot of what could be learned for free at <a href="http://laravel.com/docs">http://laravel.com/docs</a>. Don’t mis-understand me though, I’m not out to attack Dayle Rees, as he is a prominent and helpful member of the Laravel community. I’m just pointing out that Taylor’s book price is the same as Dayle’s - which then in my opinion doesn’t make the book seem so pricey.</p>
<p>** UPDATE (11/24/2013): ** Read the book. It was short and sweet.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2013/08/2013-08-12_laravel-book-by-taylor-otwell/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Laravel 4 Artisan Serve]]></title>
        <id>/2013/08/2013-08-13_laravel-artisan-serve/</id>
        <link href="/2013/08/2013-08-13_laravel-artisan-serve/"/>
        <updated>2013-08-13T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I recently came about this nifty little command I can use to start a laravel application.
php artisan serve

]]></summary>
        <content type="html"><![CDATA[<p>I recently came about this nifty little command I can use to start a laravel application.</p>
<pre><code>php artisan serve
</code></pre>
<!-- more --> 
<p>What this does is starts the php5 built in webserver much like doing <code>php -S localhost:8000</code>. This gave me an idea though to extend upon Laravel. Imagine you had something like</p>
<pre><code>php artisan watch
</code></pre>
<p>What would the watcher do? It could monitor some directories you have listed in <code>config/packages/codesleeve/watcher/config.php</code> for changes on the file system and then execute any commands you have listed in the watch config.</p>
<pre><code>function($app)
{
	$app['watch'] = new Codesleeve\Watcher($app);
	// now run CLI for artisan serve
	// (if watch config has serve == true)
}
</code></pre>
<p>But alias, maybe this is just re-inventing the wheel? I mean, currently, use <strong>grunt watch</strong> for stuff like <em>livereload</em>. This way I get rid of the F5 (or ctrl+R) for page refresh. This workflow works nicely on my multiple monitor setup. The reason this urks me though is that this requires that I have the Chrome browser LiveReload plugin, along with npm, grunt, several grunt libs, a package.json and list of dependencies. This isn’t really a big deal I suppose, but if we follow the Einstein minimalism principle rule, this whole process could be simpler therefore it is not truly elegant.</p>
<p>So what if I went a different route? What if Laravel had a compser packagist package available to do watches? For example, if I forked/modified something like <a href="https://github.com/dbergey/Reloadr">https://github.com/dbergey/Reloadr</a>. No grunt, no problem. For now though, I will continue using grunt while I play with this idea some later in the future.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2013/08/2013-08-13_laravel-artisan-serve/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Laravel 4 CSRF Token and AJAX (using jQuery)]]></title>
        <id>/2013/09/2013-09-18_laravel-4-csrf-token-and-ajax/</id>
        <link href="/2013/09/2013-09-18_laravel-4-csrf-token-and-ajax/"/>
        <updated>2013-09-18T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[If you’ve ever ventured into javascript land with your Laravel application and suddenly you don’t have a nice &lt;form&gt; to work with but instead are making ajax calls then you might have wondered how to do CSRF protection. Here’s how easy it is to do ajax csrf protection.
$.ajaxSetup({
    headers: {
        'X-CSRF-Token': $('meta[name=&quot;csrf-token&quot;]').attr('content')
    }
});

]]></summary>
        <content type="html"><![CDATA[<p>If you’ve ever ventured into javascript land with your <a href="http://laravel.com">Laravel</a> application and suddenly you don’t have a nice <code>&lt;form&gt;</code> to work with but instead are making ajax calls then you might have wondered how to do CSRF protection. Here’s how easy it is to do ajax csrf protection.</p>
<pre><code>$.ajaxSetup({
    headers: {
        'X-CSRF-Token': $('meta[name=&quot;csrf-token&quot;]').attr('content')
    }
});
</code></pre>
<!-- more --> 
<p>That will attach the header <code>X-CSRF-Token</code> to every ajax request you make using jQuery. Notice though that we are getting that csrf token value from a meta field.</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html class=&quot;no-js&quot; lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;
&lt;head&gt;
	&lt;title&gt;My Page&lt;/title&gt;
	&lt;meta name=&quot;csrf-token&quot; content=&quot;&lt;?= csrf_token() ?&gt;&quot;&gt;
&lt;body&gt;
   ...
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Next we need to modify our CSRF token filter in Laravel since out of the box it only looks for <code>Input::get('_token')</code></p>
<pre><code>Route::filter('csrf', function()
{
   $token = Request::header('X-CSRF-Token') ?: Input::get('_token');

   if (Session::token() !== $token) {
      throw new Illuminate\Session\TokenMismatchException;
   }
});
</code></pre>
<p>We will still look for _token in the input so we can still use the traditional <code>&lt;form&gt;</code> to submit data in addition to ajax submissions. I haven’t seen any issues with this yet. Of course if I run into any, I’ll be sure to update this post. Have a nice day!</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2013/09/2013-09-18_laravel-4-csrf-token-and-ajax/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Codesleeve Laravel 4 Asset Pipeline (inspired by rails/sprockets)]]></title>
        <id>/2013/09/2013-09-20_codesleeve-laravel4-asset-pipeline/</id>
        <link href="/2013/09/2013-09-20_codesleeve-laravel4-asset-pipeline/"/>
        <updated>2013-09-20T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Laravel 4 is certainly out of beta now and still continues to be one of the best php frameworks. One thing sorely missing is an asset pipeline. A few attempts have been made to remedy this but none have fit the bill. Here were a few should be’s on my mind when developing this…
]]></summary>
        <content type="html"><![CDATA[<p>Laravel 4 is certainly out of beta now and still continues to be one of the best php frameworks. One thing sorely missing is an asset pipeline. A few attempts have been made to remedy this but none have fit the bill. Here were a few should be’s on my mind when developing this…</p>
<!-- more --> 
<ol>
<li>
<p>Asset pipeline should be php friendly. Not everyone wants to go download npm, grunt, rails gems, less compilers, coffescript compilers etc. So by using Assetic and composer packages, I have tried to keep it all in house php and no need for external libraries or languages.</p>
</li>
<li>
<p>Asset pipeline should be super simple. One should be able to install and run with it - convention over configuration man. If you have to spend over 10 minutes with putting the asset pipeline to work, then I’ve done something wrong. Contact me.</p>
</li>
<li>
<p>Asset pipeline should be testable and tested. Tested code means happier code.</p>
</li>
<li>
<p>Asset pipeline should be fun. Let’s face it, if everything works smoothly and you just drag and drop in stuff and go about your way, you’ll be a much happier developer.</p>
</li>
<li>
<p>Asset pipeline should be transparent. An example of this in practice is the fact that you can drop in your fonts and images into the app/assets folder (which is outside of public) and still reference those files. You don’t have to think to hard about… <em>“which files do I want to be in my public/ folder and in my app/assets folder?”</em></p>
</li>
</ol>
<p>Here are a couple of videos for your pleasure, amigos.</p>
<h3>Introduction video to Asset Pipeline</h3>
<p>{% youtube 1iDB5BFsTw8 %}</p>
<h3>Creating a Handlerbars package</h3>
<p>{% youtube IPgUUYb7SqU %}</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2013/09/2013-09-20_codesleeve-laravel4-asset-pipeline/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Confirming passwords bad UX design?]]></title>
        <id>/2013/10/2013-10-30_confirming-passwords-bad-ux-design/</id>
        <link href="/2013/10/2013-10-30_confirming-passwords-bad-ux-design/"/>
        <updated>2013-10-30T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Let me first say, I don’t think password confirmations are bad UX design. But I ask you, are they really necessary? I don’t think so.
Let’s take a look at some popular sites which have millions of users. These are industry leaders.
Let me first say, I don’t think password confirmations are bad UX design. But I ask you, are they really necessary? I don’t think so.
Let’s take a look at some popular sites which have millions of users. These are industry leaders.
]]></summary>
        <content type="html"><![CDATA[<p>Let me first say, I don’t think password confirmations are bad UX design. But I ask you, are they really necessary? I don’t think so.</p>
<p>Let’s take a look at some popular sites which have millions of users. These are industry leaders.</p>
<p>Let me first say, I don’t think password confirmations are bad UX design. But I ask you, are they really necessary? I don’t think so.
Let’s take a look at some popular sites which have millions of users. These are industry leaders.</p>
<!-- more --> 
<div class="row"><div class="col-md-6">
{% img full-width /media/confirming-passwords-bad-ux-design/dropbox.png %}
{% img full-width /media/confirming-passwords-bad-ux-design/facebook.png %}
{% img full-width /media/confirming-passwords-bad-ux-design/twitter.png %}
</div><div class="col-md-6">
{% img full-width /media/confirming-passwords-bad-ux-design/pinterest.png %}
<p>Sites like Dropbox, Facebook, Pinterest and Twitter all practice <em>engineered minimalism</em> in design. The idea is simple, don’t make your users fill out a crap load of stuff. These sites all pay big bucks for A|B testing. Guess what?</p>
<p><strong>None of them make you confirm your password during sign up.</strong></p>
</div></div>
<p>Still not convinced? Let’s take a step back think about function. What is even the point of a sign up page? It’s most likely to get a user into your system so you can have them <em>do stuff</em> right?</p>
<p>Assume we aren’t going to use oAuth for whatever reason and we are going to have a sign up page. We probably want a low barrier of entry. That means having no wizards, fewest fields possible - <em>a real wam bam thank ya ma’am sign up</em>.</p>
<p>Let me ask you, how often do you mistype your password when signing up for something new? Most people use the same few passwords for all their websites, so they are seasoned veterans at typing their password. People make mistakes though so password recovery is important. If your site doesn’t have a way to recover a password, then confirming the user got their password correct would be pretty important. For example, when you’re signing up for a Gmail account, you have to type your password twice. That’s because it’s a lot harder to retrieve a password for email systems Where would you send a password recovery email to if you get locked out of your email?</p>
<p>I’m also a big fan of designing for the masses. We shouldn’t annoy 80% of the population by making them type their password twice, just because 20% of the population can’t type it right. Those 20% deserve to go reset it a few times, they need typing practice anyway. ^_^</p>
<p>If I still haven’t convinced you… try reading <a href="http://www.leemunroe.com/confirm-passwords-signup/">some</a> other <a href="http://ux.stackexchange.com/questions/20953/why-should-we-ask-the-password-twice-during-registration">places</a>.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2013/10/2013-10-30_confirming-passwords-bad-ux-design/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Computed properties on Backbone.Model]]></title>
        <id>/2013/11/2013-11-17_computed-properties-on-backbone-model/</id>
        <link href="/2013/11/2013-11-17_computed-properties-on-backbone-model/"/>
        <updated>2013-11-17T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[I wanted to be able to get computed properties on my backbone models. Especially after seeing it done in Emberjs.
I thought, surely someone else has done this before? So my search in Google landed me here on this blog post by kilon
]]></summary>
        <content type="html"><![CDATA[<p>I wanted to be able to get computed properties on my backbone models. Especially after seeing it <a href="http://emberjs.com/guides/object-model/computed-properties/">done in Emberjs</a>.</p>
<p>I thought, surely someone else has done this before? So my search in Google landed me here on this <a href="http://kilon.org/blog/2012/02/backbone-calculated-fields/">blog post by kilon</a></p>
<!-- more --> 
<p>After reading this site, the code made sense but it’s not really a plugin by any means. And it’s still polluting the model.attributes object with functions, which don’t get sent back to an ajax call when the model is synced.</p>
<p>Then I found <a href="https://github.com/phdesign/Backbone.Spark">Backbone.Spark</a> and honestly hated how ugly the code is. I mean why “spark?” Also I think having a getter and setter in 1 shared function is a pretty strong violation of Single Responsibility Principle.</p>
<p>Then I found <a href="https://github.com/alexanderbeletsky/backbone-computedfields">Backbone.ComputedFields</a> which has much nicer code and I almost used it; except that I am opinionated enough to make my own to follow the Marionette conventions.</p>
<p>Marionette Views have dynamically called functions for triggers, i.e. when <code>some:event</code> is triggered the function <code>onSomeEvent</code> is called if it exists. Following that same mentality, I applied it to get and set camel case functions. It seems many frameworks do camel case functions and snake case database column names. So that’s exactly the convention I followed. I hijack the <code>Backbone.Model</code> class and add functionality, which I will admit is more obtrusive than the <code>Backbone.ComputedFields</code> implementation, but I liked the intrusion enough to do it this way anyway.</p>
<p>Check out on my github repo here: <a href="https://github.com/kdocki/backbone.model.computed">https://github.com/kdocki/backbone.model.computed</a></p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2013/11/2013-11-17_computed-properties-on-backbone-model/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Testing Marionette Application Modules]]></title>
        <id>/2013/11/2013-11-26_testing-marionette-application-modules/</id>
        <link href="/2013/11/2013-11-26_testing-marionette-application-modules/"/>
        <updated>2013-11-26T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[Why is it that everything in Backbone and Marionette has extend() except for Marionette.Application? Derick Bailey is one of my programming heroes but I feel like he may have dropped the ball here. Why? Well… what if you wanted to have multiple applications but reuse the same modules? You can’t. Modules can only be attached to a specific instance of Marionette.Application. This is not very testable because you are always working on a single instance of your Marionette App and cannot test in isolation.
So I recently wrote a plugin to allow this. https://github.com/kdocki/marionette.application.module
]]></summary>
        <content type="html"><![CDATA[<p>Why is it that everything in Backbone and Marionette has extend() except for Marionette.Application? <a href="http://lostechies.com/derickbailey/">Derick Bailey</a> is one of my programming heroes but I feel like he may have dropped the ball here. Why? Well… what if you wanted to have multiple applications but reuse the same modules? You can’t. Modules can only be attached to a specific instance of Marionette.Application. This is not very testable because you are always working on a single instance of your Marionette App and cannot test in isolation.</p>
<p>So I recently wrote a plugin to allow this. <a href="https://github.com/kdocki/marionette.application.module">https://github.com/kdocki/marionette.application.module</a></p>
<!-- more --> 
<p>Once I’ve loaded the module plugin above I could create new apps on each test setUp in karma or jasmine-runner without having to worrying about the global events namespace being polluted or modules conflicting. In my test.js I created an app1 and app2, both will be completely separate applications and both have the Foo module included. Neat, right?</p>
<p>This is the <code>test.js</code></p>
<pre><code>var app1 = createApplication();
var app2 = createApplication();

app1.Foo.bar = 3;
app2.Foo.bar = 4;

app1.Foo.bar === app2.Foo.bar || throw &quot;Bah!&quot;;

// yay! this works correctly now
</code></pre>
<p>Here is a little more to this puzzle in case you are wondering what <code>createApplication()</code> is doing.</p>
<pre><code>var App = Marionette.Application.extend();

function createApplication()
{
    var app = new App;

    // set your initialize before and initialize after,
    // plus any application globals you want on your object

    return app;
}
</code></pre>
<p>Next we create a Foo module for our Application.</p>
<pre><code>App.module(&quot;Foo&quot;, function (Foo, App, Backbone, Marionette, $, _)
{
    var API =
    {
        showFoo : function(fooId)
        {
            App.execute('dispatcher:set:route', 'show:(id)', fooId);
            Foo.controller = new Foo.Show.Controller();
            Foo.controller.show(fooId);
        }
    };

    Foo.Router = Marionette.AppRouter.extend(
    {
        appRoutes: {
            'show/:id'      : 'showFoo'
        }
    });

    App.addInitializer(function()
    {
        return new Foo.Router({ controller: API });
    });

    App.commands.setHandler('!route:foo:show', API.showFoo);

});
</code></pre>
<p>Testing in isolation is important because it leaves us with our sanity. It is nice to be able to <code>reset</code> the state of the application anytime, i.e. in Ember you do App.reset(); Marionette should do this out of the box, maybe Derick can make it happen? It’d be a nice feature to have!</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2013/11/2013-11-26_testing-marionette-application-modules/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Arnold C Programming Language]]></title>
        <id>/2013/11/2013-11-30_arnold-c-programming-language/</id>
        <link href="/2013/11/2013-11-30_arnold-c-programming-language/"/>
        <updated>2013-11-30T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[There is a new programming language in town. I expect  great things from https://github.com/lhartikk/ArnoldC
What does this program do? I have no idea and I wrote it.
]]></summary>
        <content type="html"><![CDATA[<p>There is a new programming language in town. I expect <img src="/media/icons/trollface.png" style="width:40px"> great things from <a href="https://github.com/lhartikk/ArnoldC">https://github.com/lhartikk/ArnoldC</a></p>
<p><strong>What does this program do?</strong> <em>I have no idea and I wrote it.</em></p>
<!-- more --> 
<p>That is what makes this language great! No one really knows what great language will spew forth from this, much like the great governor himself.</p>
<p><code>TALK TO THE HAND I'LL BE BACK!</code></p>
<pre><code>IT'S SHOWTIME

  YOU SET US UP &quot;BATMAN!&quot;
  HEY CHRISTMAS TREE DA MAN 10

  LISTEN TO ME VERY CAREFULLY TRAVIS
    TALK TO THE HAND BATMAN
  HASTA LA VISTA, BABY

  GIVE THESE PEOPLE AIR BABY O' BABY O' BABY
    YOU SET US UP arnold I NEED YOUR CLOTHES YOUR BOOTS AND YOUR MOTORCYCLE GET DOWN 1
    I'LL BE BACK arnold
  HASTA LA VISTA, BABY

  HEY CHRISTMAS TREE OV'DER MAN 1

  STICK AROUND NO PROBLEMO
    BECAUSE I'M GOING TO SAY PLEASE DER MAN YOU ARE NOT YOU YOU ARE ME OV'DAER MAN
      DO IT NOW TRAVIS
        I'LL BE BACK
      BULLSHIT
        TALK TO THE HAND &quot;NANA &quot;
        HERE IS MY INVITATION OV'DER OV'DER MAN GET UP 2
        BECAUSE I'M GOING TO SAY PLEASE OV'DER MAN I LET HIM GO 4 LET OFF SOME STEAM BENNET 3
          GET YOUR ASS TO MARS OV'DER MAN IT'S LIKE BABY O' BABY O' BABY
        YOU HAVE NO RESPECT FOR LOGIC
      YOU HAVE NO RESPECT FOR LOGIC
  CHILL

YOU HAVE BEEN TERMINATED
</code></pre>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2013/11/2013-11-30_arnold-c-programming-language/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Marionette.Controller.listenAll]]></title>
        <id>/2013/11/2013-11-30_marionette-controller-listenall/</id>
        <link href="/2013/11/2013-11-30_marionette-controller-listenall/"/>
        <updated>2013-11-30T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[If you’ve used Marionette for a while, you’ll find that there is still quite a bit of boilerplate to write. This doesn’t bother me that much but I’ve noticed a very familiar pattern in my marionette controllers. It looks a lot like this…
]]></summary>
        <content type="html"><![CDATA[<p>If you’ve used Marionette for a while, you’ll find that there is still quite a bit of boilerplate to write. This doesn’t bother me that much but I’ve noticed a very familiar pattern in my marionette controllers. It looks a lot like this…</p>
<!-- more --> 
<pre><code>App.module('Sidebar.Show', function(Show, App, Backbone, Marionette, $, _) {
    Show.Controller = Marionette.Controller.extend({
        initialize : function() {
            var foobars = App.request('foobar:entities');
            var view = new Show.View();

            App.execute('when:done', foobars, function() {
                App.Region_Content.show(view);
            });

            this.listenTo(view, 'some:event', this.onSomeEvent);

            // ... may have several events on the view

            this.listenTo(view, 'something:clicked', this.onSomethingClicked);
            this.listenTo(view, 'something:else', this.onSomethingElse);
        },

        onSomeEvent : function() {
            // ...
        },

        onSomethingClicked : function() {
            // ...
        }

        onSomethingElse : function() {
            // ...
        }

    });
});
</code></pre>
<p>Like I said, I have no problem with writing a little extra code to help clarify things, but here is one of those cases where I think I can cut down on some boilerplate. Notice below the code is almost identical except I cut out the <code>this.listenTo</code> and just use a <code>this.listenAll</code></p>
<pre><code>App.module('Sidebar.Show', function(Show, App, Backbone, Marionette, $, _) {
    Show.Controller = Marionette.Controller.extend({
        initialize : function() {
            var foobars = App.request('foobar:entities');
            var view = new Show.View();

            App.execute('when:done', foobars, function() {
                App.Region_Content.show(view);
            });

            this.listenAll(view);
        },

        onSomeEvent : function() {
            // ...
        },

        onSomethingClicked : function() {
            // ...
        }

        onSomethingElse : function() {
            // ...
        }

    });
});
</code></pre>
<p>So now that you see how <code>listenAll</code> works, the next logical question is, how do I get it into my marionette application? Easy, just use the code below. Notice I’m not doing a <code>Marionette.Controller.extend({})</code> here primarily because I like this function so much I wanted it baked naively into the <code>Marionette.Controller</code>.</p>
<pre><code>Marionette.Controller.prototype.listenAll = function(obj) {
    var controller = this;

    this.listenTo(obj, 'all', function() {
        controller.triggerMethod.apply(this, arguments)
    });
}
</code></pre>
<p>That about sums it up. The last thing I’d like to say is that the <code>triggerMethod</code> function is pretty neat. There is a lot that can be learned by just skimming through the <a href="http://marionettejs.com/docs/backbone.marionette.html">Marionette annotated source</a>.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2013/11/2013-11-30_marionette-controller-listenall/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSRF token protection in Laravel]]></title>
        <id>/2013/12/2013-12-12_csrf-token-protection-in-laravel/</id>
        <link href="/2013/12/2013-12-12_csrf-token-protection-in-laravel/"/>
        <updated>2013-12-12T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[A while back I wrote about handling CSRF tokens with ajax calls to Laravel. I have re-vamped my philosophy since then. All routes should have protection, not just a few. This ensures that I

Never accidentally leave a route unprotected
Reduce complexity in my routes. Don’t worry about which routes are protected or unprotected.

]]></summary>
        <content type="html"><![CDATA[<p>A while back I wrote about <a href="/2013/09/18/laravel-4-csrf-token-and-ajax/">handling CSRF tokens with ajax calls to Laravel</a>. I have re-vamped my philosophy since then. <strong>All</strong> routes should have protection, not just a few. This ensures that I</p>
<ol>
<li>Never accidentally leave a route unprotected</li>
<li>Reduce complexity in my routes. Don’t worry about which routes are protected or unprotected.</li>
</ol>
<!-- more --> 
<p>How do I do it? It’s actually quite simple. We start by ignoring all GET requests. Next we handle the X-CSRF-Token header for ajax requests since those need to be protected too.</p>
<pre><code>Route::filter('csrf', function($route, $request)
{
    if (strtoupper($request-&gt;getMethod()) === 'GET')
    {
        return; // get requests are not CSRF protected
    }

    $token = $request-&gt;header('X-CSRF-Token') ?: Input::get('_token');

    if (Session::token() !== $token)
    {
	throw new Illuminate\Session\TokenMismatchException;
    }
});
</code></pre>
<p>To protect everything we just need to wrap a group around all our routes. This really shouldn’t affect performance too much and leaving parts of your site unprotected has far worse consequences than running this extra small weight filter for all routes.</p>
<pre><code>Route::group(['before' =&gt; 'csrf'], function()
{
    Route::get('/', 'HomeController@index');
    Route::post('login', 'AuthController@store');
    Route::any('logout', 'AuthController@destroy');

    Route::resource('users', 'UserController');
});
</code></pre>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2013/12/2013-12-12_csrf-token-protection-in-laravel/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React PHP (guard in php and laravel)]]></title>
        <id>/2014/01/2014-01-14_react-php/</id>
        <link href="/2014/01/2014-01-14_react-php/"/>
        <updated>2014-01-14T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[Well, I attempted to create a guard/grunt prototype for php. I attempted and failed. Why did I fail? The technology just isn’t there yet. I am going to have to re-think the architecture if I go any further.
I was using pcntl_signal to determine when an application shuts down, so that I could terminate any external processes that had been spawned by guard. One such process event handler was the livereload-protocol I implemented in php which via web sockets notifies any connected clients when files were changed on the server. Similar to how grunt watch works with livereload.
The problem is that pcntl_signal doesn’t work in Windows. Thus, I stopped working on this.
]]></summary>
        <content type="html"><![CDATA[<p>Well, I attempted to create a guard/grunt prototype for php. I attempted and failed. Why did I fail? The technology just isn’t there yet. I am going to have to re-think the architecture if I go any further.</p>
<p>I was using <a href="http://www.php.net/manual/en/function.pcntl-signal.php">pcntl_signal</a> to determine when an application shuts down, so that I could terminate any external processes that had been spawned by guard. One such process event handler was the <a href="https://github.com/CodeSleeve/guard-live-reload">livereload-protocol I implemented in php</a> which via web sockets notifies any connected clients when files were changed on the server. Similar to how grunt watch works with livereload.</p>
<p>The problem is that <code>pcntl_signal</code> doesn’t work in Windows. Thus, I stopped working on this.</p>
<!-- more --> 
<h4>Why not just use grunt?</h4>
<p>Great question. There is no reason why you can’t use grunt. You’ll have to setup node, npm install grunt-cli and configure a Gruntfile. This isn’t that bad. I guess I’m crazy mad and wanted to toy around with asynchronous php.</p>
<p>Also think about how interesting it could be to setup an event handler to watch files on a disk space and asynchronously add rows in your database anytime those files changed?</p>
<pre><code>class CrazyEloquentGuardEvent implements EventInterface
{
        public function start($watcher)
        {
                // nothing to do here when guard firsts starts up
        }
 
        public function stop()
        {
                // nothing to do here when guard first stops
        }
 
        public function listen($event)
        {
                CrazyGuardLogModel::create([
                   'resource' =&gt; $event-&gt;getResource(),
                   'change_type' =&gt; $event-&gt;getTypeString(),
                ]);
        }
}
</code></pre>
<h3>Reactive Programming</h3>
<p>Programming to an event loop in php is wild. It is also extremely powerful. I love the asynchronous aspect of node.js but it has drawbacks too. One drawback is the complexity. Anyone who has worked in both express and Laravel would likely tell you that Laravel is easier to use - I certainly would.</p>
<p>However, the benefits of an event loop frees us from waiting on things. Here is how I handled an event loop in React for the LiveReload server. I also used Ratchet for the WebSockets server which piggy backs off React. The only reason I am tampering with the React server here is so that I can have more control over what goes into the Event Loop.</p>
<pre><code>public function start()
{
	$config = $this-&gt;config;
	$loop = \React\EventLoop\Factory::create();
	$app = new \Ratchet\App($config['host'], $config['port'], $config['host'], $loop);
 
	foreach ($config['routes'] as $route)
	{
		call_user_func_array(array($app, 'route'), $route);
	}
 
	$loop-&gt;addTimer($config['timeout'], array($this, 'watchTempFile'));
	$app-&gt;run();		
}
</code></pre>
<p>If you’d really like to dig in, you can see the full extent of the code in the <a href="https://github.com/CodeSleeve/guard-live-reload/blob/master/src/Codesleeve/GuardLiveReload/LiveReloadServer.php#L31">codesleeve/guard-livereload</a> repository. I may change this eventually, but I think I’ll re-architect the entire thing if I do. Basically the react event loop cannot be an external process fired by codesleeve/guard, instead it guard needs to become itself an event loop and I will have to compartmentalize all the different events and configs together so that it is easy to drop in new event handlers. It’s do-able I believe but right now isn’t any where on my priority list of todos.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/01/2014-01-14_react-php/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scenarios in Laravel (Hexagonal Pattern Design Part 1)]]></title>
        <id>/2014/01/2014-01-15_hexagonal-pattern-design-scenarios/</id>
        <link href="/2014/01/2014-01-15_hexagonal-pattern-design-scenarios/"/>
        <updated>2014-01-15T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[Laravel is traditionally an MVC framework but MVC just doesn’t seem to scale for larger projects. Typically what ends up happening is logic is crammed into each section: models, views and controllers as the application grows which becomes next to impossible to test. Taylor Otwell’s book mentions the repository pattern but even that doesn’t really solve this scalability problem. After a colleague showed me a blog post about the Hexagonal Pattern in rails, I decided to try the design in Laravel - the results were nice.
]]></summary>
        <content type="html"><![CDATA[<p>Laravel is traditionally an MVC framework but MVC just doesn’t seem to scale for larger projects. Typically what ends up happening is logic is crammed into each section: models, views and controllers as the application grows which becomes next to impossible to test. Taylor Otwell’s book mentions the repository pattern but even that doesn’t really solve this scalability problem. After a <a href="http://travisbennett.net/">colleague</a> showed me a blog post about the <a href="http://victorsavkin.com/post/42542190528/hexagonal-architecture-for-rails-developers">Hexagonal Pattern</a> in rails, I decided to try the design in Laravel - the results were nice.</p>
<!-- more --> 
<div class="row"><div class="col-md-9">
<p>The basic idea is that routes and controllers are just for delivery. There is no logic in a controller, period.</p>
<pre><code>A controller is much like your UPS man. He is given an address (the route) and delivers a box (model+view) to your address. He doesn't need worry about the contents of the box.
</code></pre>
<p>But then you say, the UPS guy still makes decisions. For example, if it is currently raining, the box might end up in your car otherwise probably on your front porch.</p>
<pre><code>So where then do you put your logic? I call them *scenarios* but they are also called *use cases*. Uncle Bob calls them *interceptors*.
</code></pre>
</div><div class="col-md-3"><img class="full-width" src="/media/hexagonal-pattern-design-scenarios/controller.png" alt="concept of routing and controllers">
	<small>This diagram taken from the blog shows the separation of delivery and application.</small>
</div></div>
<p>So let’s use our concept of a Scenario with our contrived UPS example. Instead of the UPS guy trying to figure out what to do with the box, he simply follows a strict set of predetermined guidelines given the scenario. He makes no assumptions and does exactly as he is told. So in the scenario in which it is raining, his rules are to leave a pretty note explaining the situation and not leave the package in the rain. This means the UPS guy is not responsible for any decisions. He is just a delivery mechanism following orders.</p>
<h3>Implementation</h3>
<p>Below are two classes: UserController and UserScenario. This walks through how a user might be created in Laravel using our Hexagonal pattern with Scenarios.</p>
<pre><code>class UserController extends BaseController implements HexagonalInterface
{
   public function __construct(UserScenario $scenario)
   {
      $this-&gt;scenario = $scenario;
      $scenario-&gt;setDelegate($this);
   }

   public function create()
   {
      $user = $this-&gt;scenario-&gt;emptyUser();
      $this-&gt;layout-&gt;nest('content', 'user.create', compact('user'));
   }

   public function store()
   {
      return $this-&gt;scenario-&gt;createUser(Input::get());
   }

   protected function createInvalid($validator, $input)
   {
      return Redirect::action('UserController@create')-&gt;withErrors($validator)-&gt;withInput($input);
   }

   protected function createSuccess($user)
   {
      Auth::loginUsingId($user-&gt;id);
      return Redirect::action('HomeController@dashboard');
   }
}
</code></pre>
<p>That handles the controller aspect of this but you’re probably wondering what a <code>UserScenario</code> looks like.</p>
<pre><code>class UserScenario extends BaseScenario
{
  public function __construct(User $user)
  {
    parent::__construct();
    $this-&gt;user = $user;
  }

  public function emptyUser()
  {
    return $this-&gt;user;
  }

  public function createUser($input)
  {
    $validation = $this-&gt;validator($input, $this-&gt;user-&gt;creationRules);

    if ($validation-&gt;fails()) {
       return $this-&gt;invoke('createInvalid', [$validation, $input]);
    }

    $this-&gt;user-&gt;create($input);

    return $this-&gt;invoke('createSuccess', [$user]);
  }
}
</code></pre>
<p>You might be wondering what the <code>invoke()</code> function is? It comes from my BaseScenario class.</p>
<pre><code>class BaseScenario
{
  protected $delegate = null;

  public function __construct(Input $input = null)
  {
    $this-&gt;input = $input ?: App::make('Input');
  }

  protected function validator($input, $rules, $messages = [])
  {
    return Validator::make($input, $rules, $messages);
  }

  protected function invoke($methodName, $args)
  {
    $obj = $this-&gt;getDelegate();
    $method = new ReflectionMethod(get_class($obj), $methodName);
    $method-&gt;setAccessible(true);
    return $method-&gt;invokeArgs($obj, $args);
  }

  public function getDelegate()
  {
    return $this-&gt;delegate);
  }

  public function setDelegate(HexagonalInterface $delegate)
  {
    $this-&gt;delegate = $delegate;
  }
}
</code></pre>
<p>The reflection allows me to see the actions which should not have routes tied to them, i.e. <code>createInvalid</code> should not have a route and thus is a protected function. So there you have it, logic-less controllers using Scenarios.</p>
<aside class="important">Honestly this pattern can be extreme overkill. Notice how we have to keep switching back and forth between the scenario and controllers just to figure out what is going on. They are loosely coupled but still coupled. Sure we have a logic-less controller but hopefully you can see how this is still complicated in some ways.</aside>
<p>Hopefully I didn’t scare you off with this post. There are still two more posts to go! In the next post I will be talking about how to keep Laravel views simple and clean using macros.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/01/2014-01-15_hexagonal-pattern-design-scenarios/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Macros in Laravel (Hexagonal Pattern Design Part 2)]]></title>
        <id>/2014/01/2014-01-16_hexagonal-pattern-design-macros/</id>
        <link href="/2014/01/2014-01-16_hexagonal-pattern-design-macros/"/>
        <updated>2014-01-16T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[Here I am going to walk through an example of how to use macros and additional views to get rid of logic in our Laravel views.
]]></summary>
        <content type="html"><![CDATA[<p>Here I am going to walk through an example of how to use macros and additional views to get rid of logic in our Laravel views.</p>
<!-- more --> 
<p>Let’s pretend we have a form to create a user and one of the fields we can edit is first_name. So we might expect some HTML like below</p>
<pre><code>&lt;div class=&quot;control-group&quot;&gt;
    &lt;label class=&quot;control-label&quot; for=&quot;inputFirstName&quot;&gt;First Name&lt;/label&gt;
    &lt;div class=&quot;controls&quot;&gt;
        &lt;input type=&quot;text&quot; id=&quot;inputFirstName&quot; placeholder=&quot;First name&quot; value=&quot;&lt;?= $user-&gt;first_name ?&gt;&quot;&gt;
        &lt;?php if ($errors-&gt;has('first_name'): ?&gt;
            &lt;div class=&quot;errors&quot;&gt;
                &lt;?= $errors-&gt;first('first_name') ?&gt;  
            &lt;/div&gt;
        &lt;?php endif ?&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>I can simplify the conditional with a macro called show_message_when.</p>
<pre><code>&lt;div class=&quot;control-group&quot;&gt;
    &lt;label class=&quot;control-label&quot; for=&quot;inputFirstName&quot;&gt;First Name&lt;/label&gt;
    &lt;div class=&quot;controls&quot;&gt;
        &lt;input type=&quot;text&quot; id=&quot;inputFirstName&quot; placeholder=&quot;First name&quot; value=&quot;&lt;?= $user-&gt;first_name ?&gt;&quot;&gt;
        &lt;?= HTML::show_message_when('first_name', $errors) ?&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>And voila! No more logic in our views, it’s all evaluating variables now and all the logic has been extracted away. This makes testing a breeze, as we don’t have to worry about conditional structure in our view - assuming the variables are in place then the system just works.</p>
<p>This is a simple view in the first place but we can <strong>always</strong> extract out conditional logic from a view. That really only leaves foreach/loop logic, but that doesn’t bother me as much as conditionals so I usually leave those in place if they are simple. You <strong>could</strong> though create a <a href="http://laravel.com/docs/html#custom-macros">macro</a> to help with loops if you really wanted to do so. Let’s see another before and after example…</p>
<p>** Before **</p>
<pre><code>&lt;div class=&quot;container&quot;&gt;
 
    &lt;?php if (!$users): ?&gt;
        &lt;div class=&quot;empty row&quot;&gt;No users found&lt;/div&gt;
    &lt;?php endif ?&gt;
 
    &lt;table class=&quot;table&quot;&gt;
        &lt;th&gt;
            &lt;td&gt;Id&lt;/td&gt;
            &lt;td&gt;First Name&lt;/td&gt;
            &lt;td&gt;Last Name&lt;/td&gt;
            &lt;td&gt;Score&lt;/td&gt;
        &lt;/th&gt;
 
        &lt;?php foreach ($users as $user): ?&gt;
            &lt;tr&gt;
                &lt;td class=&quot;id&quot;&gt;&lt;?= $user-&gt;id ?&gt;&lt;/td&gt;
                &lt;td class=&quot;first_name&quot;&gt;&lt;?= $user-&gt;first_name ?&gt;&lt;/td&gt;
                &lt;td class=&quot;last_name&quot;&gt;&lt;?= $user-&gt;last_name ?&gt;&lt;/td&gt;
                &lt;td class=&quot;score&quot;&gt;&lt;?= $user-&gt;rank * $user-&gt;proficiency * 
                ($user-&gt;updated_at-&gt;diffInDays() - $user-&gt;created_at-&gt;diffInDays()) 
                * 1 / Globals::average_rank() &lt;/td&gt; 
            &lt;/tr&gt;   
        &lt;?php endforeach ?&gt;
    &lt;/table&gt;
 
    &lt;div class=&quot;my pagination row&quot;&gt;
        &lt;?= $users-&gt;links() ?&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><strong>After</strong></p>
<pre><code>&lt;div class=&quot;container&quot;&gt;
 
    &lt;?= HTML::not_found($users, 'No users found!') ?&gt;
 
    &lt;table class=&quot;table&quot;&gt;
        &lt;th&gt;
            &lt;td&gt;Id&lt;/td&gt;
            &lt;td&gt;First Name&lt;/td&gt;
            &lt;td&gt;Last Name&lt;/td&gt;
            &lt;td&gt;Score&lt;/td&gt;
        &lt;/th&gt;
 
        &lt;?= HTML::foreach('user', 'user.itemview', $users) ?&gt;
    &lt;/table&gt;
 
    &lt;div class=&quot;my pagination row&quot;&gt;
        &lt;?= $users-&gt;links() ?&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>And in <code>app/views/user/itemview.php</code> you might have something like this</p>
<pre><code>&lt;tr&gt;
    &lt;td class=&quot;id&quot;&gt;&lt;?= $user-&gt;id ?&gt;&lt;/td&gt;
    &lt;td class=&quot;first_name&quot;&gt;&lt;?= $user-&gt;first_name ?&gt;&lt;/td&gt;
    &lt;td class=&quot;last_name&quot;&gt;&lt;?= $user-&gt;last_name ?&gt;&lt;/td&gt;
    &lt;td class=&quot;score&quot;&gt;&lt;?= $user-&gt;score ?&gt; &lt;/td&gt; 
&lt;/tr&gt;
</code></pre>
<p>So you’re probably wondering what these macros look like? Well, I have made a <a href="https://gist.github.com/kdocki/ccdfacd391b143dbb7f7#file-macros-php">macros.php gist</a> to share with you guys. Now send me a beer. ^_^</p>
<pre><code>/**
 * HTML::show_message_when('first_name', $errors)
 */
HTML::macro('show_message_when', function show_message_when($name, $errors, $attributes = array())
{
    $attributes_string = &quot;&quot;;
    $content_string = &quot;&quot;;
 
    $attributes['class'] = isset($attributes['class']) ?: &quot;&quot;;
    $attributes['class'] .= &quot; $name&quot;;
 
    if ($errors-&gt;has($name))
    {
        $attributes['class'] .= &quot; alert&quot;;
        $attributes['class'] .= &quot; alert-danger&quot;;
        $content_string = $errors-&gt;first($name);
    }
 
    foreach ($attributes as $key =&gt; $value) {
        $attributes_string = &quot; $key = \&quot;&quot; . $value . &quot;\&quot;&quot;; 
    }
 
    return &quot;&lt;div $attributes_string&gt;$content_string&lt;/div&gt;&quot;;
});
 
 
/**
 * HTML::foreach('user', 'user.itemview', $users)
 */
HTML::macro('foreach', function($name, $view, $items)
{
    var html = &quot;&quot;;
 
    foreach ($items as $item)
    {
       html .= View::make($view, [$name =&gt; $item]);
    }
 
    return html;
});
 
/**
 * HTML::not_found($users, 'No users found!')
 */
HTML::macro('not_found', function($items, $message = 'None found!')
{
   return '&lt;div class=&quot;empty row&quot;&gt;' . $message . '&lt;/div&gt;';
});
</code></pre>
<p>So that about wraps it up.  I use macros all the time in my views. You don’t always have to use <code>HTML::macro</code> either. In fact, one macro I use often is just a normal function which I call like <code>active(...)</code> or <code>HTML::active(...)</code> and it allows me to set a class to active when we are visiting the right place.</p>
<pre><code>&lt;li class=&quot;&lt;?= active(&quot;foobar.index&quot;) ?&gt;&quot;&gt;
	&lt;a href=&quot;&lt;?= route(&quot;foobar.index&quot;) ?&gt;&quot;&gt;
		&lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;
		&lt;span class=&quot;hidden-sm&quot;&gt;My Watchlists&lt;/span&gt;
	&lt;/a&gt;
&lt;/li&gt;
</code></pre>
<p>If you didn’t get anything else out of this besides the fact that you can use macros to keep your views clean then I think I can pat myself on the back. Now go, change the world my friend! My next blog will be talking about using presenters to keep views clean in the hexagonal pattern.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/01/2014-01-16_hexagonal-pattern-design-macros/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Presenters in Laravel (Hexagonal Pattern Design Part 3)]]></title>
        <id>/2014/02/2014-02-20_hexagonal-pattern-design-presenters/</id>
        <link href="/2014/02/2014-02-20_hexagonal-pattern-design-presenters/"/>
        <updated>2014-02-20T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is the last part in three of the hexagonal pattern series. You can download a simple example [here](https://github.com/kdocki/laravel-presenter-example].
Presenters allow you to tack on additional fields and logic to an existing Laravel model. There are several libraries out there that assist in creating presenters, namely,

ShawnMcCool/laravel-auto-presenter
robclancy/presenter

I am going to use robclancy presenter just because I have more experience with it.  After we include it in our composer.json and include the two ServiceProviders and we are set to use it.
]]></summary>
        <content type="html"><![CDATA[<p>This is the last part in three of the hexagonal pattern series. You can download a simple example [here](<a href="https://github.com/kdocki/laravel-presenter-example">https://github.com/kdocki/laravel-presenter-example</a>].</p>
<p>Presenters allow you to tack on additional fields and logic to an existing Laravel model. There are several libraries out there that assist in creating presenters, namely,</p>
<ul>
<li><a href="https://github.com/ShawnMcCool/laravel-auto-presenter">ShawnMcCool/laravel-auto-presenter</a></li>
<li><a href="https://github.com/robclancy/presenter">robclancy/presenter</a></li>
</ul>
<p>I am going to use robclancy presenter just because I have more experience with it.  After we include it in our composer.json and include the two ServiceProviders and we are set to use it.</p>
<!-- more -->
<pre><code>class User extends Eloquent implements Robbo\Presenter\PresentableInterface 
{
	protected $guarded = array();
 
	public function getPresenter()
	{
		return new UserPresenter($this);
	}
}
</code></pre>
<p>So what does UserPresenter look like? It’s simple really</p>
<pre><code>class UserPresenter extends Robbo\Presenter\Presenter
{
	public function presentAvatar()
	{
		return &quot;&lt;img src=\&quot;http://gravitar.com/{$this-&gt;email}\&quot;&gt;&quot;;
	}
}
</code></pre>
<p>And that’s it. Notice I never even touched a controller. The Roboo Presenter will go ahead and take care of wrapping your presenters around your model (provided you implement the PresentableInterface). We could get pretty complex here but I am just returning an image avatar for simplicity.</p>
<p>If you run <code>php artisan migrate</code> and then <code>php artisan serve</code> and point your browser at <code>localhost:8000/users</code> you can create a few users and then see that each user has an avatar even though that isn’t an attribute attached to the model.</p>
<pre><code>&lt;table class=&quot;table table-striped table-bordered&quot;&gt;
	&lt;thead&gt;
		&lt;tr&gt;
			&lt;th&gt;Email&lt;/th&gt;
			&lt;th&gt;Password&lt;/th&gt;
			&lt;th&gt;First_name&lt;/th&gt;
			&lt;th&gt;Last_name&lt;/th&gt;
			&lt;th&gt;Avatar&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/thead&gt;
 
	&lt;tbody&gt;
		@foreach ($users as $user)
			&lt;tr&gt;
				&lt;td&gt;{%raw%}{{{ $user-&gt;email }}}{%endraw%}&lt;/td&gt;
				&lt;td&gt;{%raw%}{{{ $user-&gt;password }}}{%endraw%}&lt;/td&gt;
				&lt;td&gt;{%raw%}{{{ $user-&gt;first_name }}}{%endraw%}&lt;/td&gt;
				&lt;td&gt;{%raw%}{{{ $user-&gt;last_name }}}{%endraw%}&lt;/td&gt;
				&lt;td&gt;{%raw%}{{ $user-&gt;avatar }}{%endraw%}&lt;/td&gt;
			&lt;/tr&gt;
		@endforeach
	&lt;/tbody&gt;
&lt;/table&gt;
</code></pre>
<p>I hope you see by using scenarios, presenters and macros you can keep your Laravel application very clean. Many developers jump straight to the Repository pattern and abuse the views or even worse try to shove presenter logic into a repository or model which is not responsible for keeping up with that view logic.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/02/2014-02-20_hexagonal-pattern-design-presenters/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Codesleeve Asset Pipeline (refactor)]]></title>
        <id>/2014/03/2014-03-09_codesleeve-asset-pipeline-(refactor)/</id>
        <link href="/2014/03/2014-03-09_codesleeve-asset-pipeline-(refactor)/"/>
        <updated>2014-03-09T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[After kicking the boot around for a while I finally decided to re-factor the asset pipeline. The functionality is all in all the same but the code is easier on the eyes. However, I did bring in a lot of new features.

Config allows you to control caching interface
Config allows you to control directives
Config allows you to control which environments  are concatenated
Config allows you to control mime types so you can combine javascripts and stylesheets in a single folder
Use a sprockets parser and generator to create the Rails-style asset pipeline functionality
Use relative paths in the manifest files
Use Laravel event listener to alter the configuration of the pipeline after package boot/start up
Use caching to speed up local development when using a lot of pre-processors (i.e. coffee, less, sass)
Use assets:generate to create static files in public/assets directory.
Completely customize the javascript_include_tag, stylesheet_link_tag composers
Completely customize the AssetController class

]]></summary>
        <content type="html"><![CDATA[<p>After kicking the boot around for a while I finally decided to re-factor the <a href="https://github.com/CodeSleeve/asset-pipeline">asset pipeline</a>. The functionality is all in all the same but the code is easier on the eyes. However, I did bring in a lot of new features.</p>
<ul>
<li>Config allows you to control caching interface</li>
<li>Config allows you to control directives</li>
<li>Config allows you to control which environments  are concatenated</li>
<li>Config allows you to control mime types so you can combine javascripts and stylesheets in a single folder</li>
<li>Use a <a href="https://github.com/CodeSleeve/sprockets">sprockets parser and generator</a> to create the Rails-style asset pipeline functionality</li>
<li>Use relative paths in the manifest files</li>
<li>Use Laravel event listener to alter the configuration of the pipeline after package boot/start up</li>
<li>Use caching to speed up local development when using a lot of pre-processors (i.e. coffee, less, sass)</li>
<li>Use assets:generate to create static files in public/assets directory.</li>
<li>Completely customize the javascript_include_tag, stylesheet_link_tag composers</li>
<li>Completely customize the AssetController class</li>
</ul>
<!-- more -->
<div class="row"><div class="col-xs-9">
Regarding functionality, the Laravel asset pipeline can go toe to toe with the Rails pipeline.However, the last missing pieces are precompilers, minification and static file generation.
<p><em>Currently</em>, I use some open source php packages to handle <strong>coffeescript</strong>, <strong>less</strong>, <strong>scss</strong>, <strong>javascript</strong> and <strong>css</strong> minification. Those packages can break things and aren’t up to date.</p>
<p>As it stands right now the css minifier out of the box breaks when trying to minify Twitter Bootstrap 3 code because there is a @-moz-tag in the css. To get around this I  use bootstrap.min.css because pipeline skips minification on .min. files.</p>
<p>New comers may not know this though and be confused or frustrated when all their styles break after trying to minify bootstrap css.</p>
<p>That’ll do for now pig, that’ll do.</p>
</div><div class="col-xs-3">
	<img class="full-width" src="/media/codesleeve-asset-pipeline-refactor/wally-the-janitor.jpg" alt="that'll do pig">
</div></div>]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/03/2014-03-09_codesleeve-asset-pipeline-(refactor)/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Serve then remove temporary file using Laravel]]></title>
        <id>/2014/03/2014-03-20_serve-then-remove-temporary-file-using-laravel/</id>
        <link href="/2014/03/2014-03-20_serve-then-remove-temporary-file-using-laravel/"/>
        <updated>2014-03-20T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Let’s say you are running a report for the user. You generate some temporary file to give to the user and now you have this zombie pdf file sitting out there in your /tmp directory. How do you clean it up? Why not do it directly after you serve to the user? Here are a couple of options. The first option just cleans up the file after the application has served the response.
Route::get('get-file', function()
{
    $filename = storage_path() . '/testing.txt';
 
    App::finish(function($request, $response) use ($filename)
    {
        unlink($filename);
    });
 
    return Response::download($filename);
});

]]></summary>
        <content type="html"><![CDATA[<p>Let’s say you are running a report for the user. You generate some temporary file to give to the user and now you have this zombie pdf file sitting out there in your /tmp directory. How do you clean it up? Why not do it directly after you serve to the user? Here are a couple of options. The first option just cleans up the file after the application has served the response.</p>
<pre><code>Route::get('get-file', function()
{
    $filename = storage_path() . '/testing.txt';
 
    App::finish(function($request, $response) use ($filename)
    {
        unlink($filename);
    });
 
    return Response::download($filename);
});
</code></pre>
<!-- more -->
<p>If you don’t like the idea of putting <code>App::finish</code> in your controller action or route closure then you could always use a helper to do your downloads. This will let you call: <code>ResponseHelper::downloadAndDelete($filename);</code></p>
<pre><code>use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
 
class ResponseHelper extends Illuminate\Support\Facades\Response
{
    static public function downloadAndDelete($fileName, $name = null, array $headers = array())
    {
        $file = new File((string) $fileName);
        $base = $name ?: basename($fileName);
        $content = file_get_contents($fileName);
 
        $response = Response::make($content);
 
        if (!isset($headers['Content-Type']))
        {
            $headers['Content-Type'] = $file-&gt;getMimeType();
        }
 
        if (!isset($headers['Content-Length']))
        {
            $headers['Content-Length'] = $file-&gt;getSize();
        }
 
        if (!isset($headers['Content-disposition']))
        {
            $headers['Content-disposition'] = 'attachment; filename=' . $base;
        }
 
        foreach ($headers as $headerName =&gt; $headerValue)
        {
            $response-&gt;header($headerName, $headerValue);
        }
 
        unlink($fileName);
 
        return $response;
    }
}
</code></pre>
<p>Finally, another idea is to register your <code>App::finished</code> closures in another class or as event listeners. I’ll leave that up to you to implement.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/03/2014-03-20_serve-then-remove-temporary-file-using-laravel/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Which Javascript framework to use? Angular vs. Ember vs. Marionette]]></title>
        <id>/2014/04/2014-04-17_which-javascript-framework-to-use-angular-vs-ember-vs-marionette/</id>
        <link href="/2014/04/2014-04-17_which-javascript-framework-to-use-angular-vs-ember-vs-marionette/"/>
        <updated>2014-04-16T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[So you’ve got a new project you want to build and you’re going to pick a front-end javascript framework. First make sure you absolutely need the single page application. Chances are you can do without it. However, let’s say you want to do a lot of javascript client-side intensive stuff, then how should you decide what framework to use? I’ve been in this same scenario myself multiple times, so I decided to blog about it. I have a love-hate relationship with all 3 of these frameworks because I have used all of them on work and personal projects. I only focus on client side frameworks here, not server side, e.g. meteor, sailsjs, express. I only included the frameworks I have the most experience with.
]]></summary>
        <content type="html"><![CDATA[<p>So you’ve got a new project you want to build and you’re going to pick a front-end javascript framework. First make sure you absolutely need the single page application. Chances are you can do without it. However, let’s say you want to do a lot of javascript client-side intensive stuff, then how should you decide what framework to use? I’ve been in this same scenario myself multiple times, so I decided to blog about it. I have a love-hate relationship with all 3 of these frameworks because I have used all of them on work and personal projects. I only focus on client side frameworks here, not server side, e.g. meteor, sailsjs, express. I only included the frameworks I have the most experience with.</p>
<!-- more -->
<h3>Angular</h3>
<hr>
<div class="row"><div class="col-md-6">
**Love**
<p><strong>If I’ve already got a server side page built and I just want to fancy up the UX</strong> with some dynamic features, e.g. - adding a new text box when I push a button, this is super simple with ng bindings.</p>
<p><strong>Two way data-binding is pretty awesome.</strong> If we couple this with <code>$resource</code> or <code>$http</code> then we have simple model-view layer with persistence with very little effort.</p>
<p><strong>Dependency injection keeps the code nice and clean</strong> but it sucks that you end up having to attach a bunch of extra strings to your controllers just so you can minify code and not break things.</p>
</div><div class="col-md-6">
**Hate**
<p><strong>Creating a custom directive for an existing jquery plugin.</strong> I can go download a jquery plugin like jquery.colorwheel.js and have this thing up and running in minutes. But not if I have to go write an angular directive for it - I already deal with too many 3rd party plugins as it is without having to write my own angular interfaces for them.</p>
<p><strong>Routing in angular is a pain to me.</strong> I don’t like the ngRoute service and I have to go study the docs just for routes. Angular seems to work better for me when I let the server-side tackle routing.</p>
<p><strong>Obtrusive javascript is somewhat of a code smell to me.</strong> Sure it is easy to use but it still couples the presentation layer (html page) with logic. If you think about it, <code>&lt;button ng-click=&quot;foobar&quot;&gt;</code> and <code>&lt;button onclick=&quot;foobar&quot;&gt;</code> are both still obtrusive.</p>
</div></div>
<h3>Ember</h3>
<hr>
<div class="row"><div class="col-md-6">
**Love**
<p><strong>How easy it is to get going.</strong> For me, Ember comes the closest to behaving like a server-side MVC framework. You have routes, controllers, views, models, etc.</p>
<p><strong>Naming conventions are very nice.</strong> If you follow the standard naming conventions which are very similar to Rails, then it makes coding with Ember so much easier.</p>
<p><strong>Handlebar templating is what I primarily use.</strong> However what if I wanted to switch this to a different templating language? I hear HTMLbars will solve a lot of problems with Handlebars.</p>
<p><strong>Chrome dev tools integration is very very awesome.</strong> It helps me speed up troubleshooting and I have a clear picture of what is going on inside my application just be inspecting chrome tools. Angular has one of these tools as well, but I haven’t used it all that much.</p>
<p>Tom Dale and Yehuda Katz are programming heroes of mine. We all have developers that we listen closely to what they have to say. These guys are very opinionated about their development styles</p>
<p><strong>Testing in ember is not an after-thought.</strong> The guys have documentation and examples. I have played with karma, jasmine and phantomjs and a framework that promotes BDD or TDD is pretty awesome in my opinion. The guys at angular use testacular so they get + points for that.</p>
<p><strong>Ember community in IRC (<a href="http://irc.freenode.net">irc.freenode.net</a> #emberjs) is very helpful.</strong> I have found that #emberjs has more activity than #angular and #documentcloud and these guys are pretty helpful.</p>
<p><strong>Ember is very promising.</strong> To me this framework seems to be the most promising. It still has a lot of things to figure out and is still a bit unstable but with HTMLbars on the rise and the level of awareness this framework has gotten in the past year, I know Ember is just going to keep getting better and better.</p>
</div><div class="col-md-6">
**Hate**
<p><strong>My biggest complaint is how difficult it is to bring in a jquery plugin.</strong> This probably needs some explanation. Let’s use jquery.chosen plugin as an example.</p>
<p><a href="http://emberjs.jsbin.com/xiguxemu/3/edit">First, checkout this jsbin example I made using chosen plugin.</a></p>
<p>Like many other jquery plugins, the chosen plugin manipulates the DOM which ultimately means that we can’t call <code>$('element').chosen()</code> until after</p>
<ol>
<li>the models have been fetched</li>
<li>and the handlebar template rendered into DOM</li>
</ol>
<p>So at what stage do you call the chosen plugin in Ember?  In Marionette, this is trivial as we have this nifty little hook called <code>onRender</code> where we can setup a jquery plugin once a view has rendered.</p>
<p>Scourging through documentation and stackoverflow pages and pestering people on IRC, I finally find there is a function called <code>didInsertElement</code> along with</p>
<p><code>Ember.run.scheduleOnce('afterRender',this, this.onRender)</code></p>
<p>which seem to work great - <strong>except if you don’t change routes this never executes!</strong> This is all very confusing to me.</p>
<p>After some searching I find some options from <a href="http://www.justinball.com/2013/10/07/using-chosen-with-ember.js/">some random blog on the internet</a>. On top of this, because Ember junks up your DOM with &lt;script&gt; tags then it later pollutes the DOM so you have to modify the chosen.js source code to ignore that. Now I decide I want the ability to bring in custom tags so I need to switch to select2.js and I am in the same boat again. <em>Lots of frustration here just to bring in a simple jquery plugin.</em></p>
<p>Lastly, I could just pray that some poor unforunately soul has had this same exact frustration has me and created a special handlebars helper or something (<a href="http://addepar.github.io/#/ember-widgets/select">which sure enough one exists</a>).</p>
<p>Having a simple process like <code>onRender</code> that is called anytime a view and using an unobtrustive templating engine like HTMLbars will be a game changer for me. We have to remember that single page applications are very likely to have lots of 3rd party plugins in them.</p>
<p>If you have a jquery plugin that messes with the DOM (which most do), then chances are you are going to bang your head against the wall at least once trying to get Ember to work with it.</p>
<p><strong>Putting logic in handlebars views makes things difficult.</strong> This isn’t really Ember’s fault but it is pretty easy to create some crazy wicked nested views full of #if #else and eventually you find yourself tracing through handlebar templates and cursing it simultaneously.</p>
<p><strong>Emberscript pre-compliation is a custom fork of coffeescript and can be buggy.</strong> Writing annotations just to save several lines of code and then running through several stages of pre-compliation is not my ideal workflow for writing javascript applications. I prefer a generator over annotations any day because:</p>
<p><span class="lg"><em>I prefer 20 lines of simple, readable code over 5 lines of complex code.</em></span></p>
</div></div>
<h3>Marionette</h3>
<hr>
<div class="row"><div class="col-md-6">
**Love**
<p><strong>Composite style architecture can scale.</strong> You can write 100k line of code applications with Marionette. Modules which can be dynamically included/excluded, a lot like operating system. Derick Bailey is another one of my programming heroes and knows the importance of architecture.</p>
<p><strong>Marionette stays out of my way.</strong> It is probably the easiest framework for me to bring in other 3rd party plugins because it doesn’t make me adhere to a scope like angular and I have complete control over when views are rendered.</p>
<p><strong>Focused by design.</strong> What does this even mean? It means that I don’t have to shift through pages of documentation to understand what Marionette and Backbone can do. The docs are all on a single github page and can be read front-to-back in probably less than an hour.</p>
<p>So what does Marionette do? I’ve made a list.</p>
<ol>
<li>Organize your views into either <code>Regions</code>, <code>Layouts</code>, <code>ItemViews</code>, <code>CompositeViews</code> or <code>CollectionViews</code>.</li>
<li>Organize your application so you can bubble up events from <code>views -&gt; controllers -&gt; application</code>.</li>
<li>Organize event handling with Backbone.wreqr for application-wide message bus</li>
</ol>
<p>Simple right? Marionette has no opinion about your model/persistence later and relies completely on Backbone for this. There are a lot of things in Marionette you will have to go find elsewhere, like how to handle promises, routing and persistence. You won’t find things like <em>two-way data-binding</em> or <em>computed properties</em> out of the box with Marionette.</p>
<p>Fortunately, there are Backbone plugins out there for these types of features. <a href="https://github.com/kdocki/backbone.model.computed">Heck I even wrote one myself</a>.</p>
<p><strong>Brian Mann’s videos show you how to make an enterprise worthy application.</strong> When I was first learning Marionette I was confused. I didn’t know how it should be used, and then I saw these videos and it improved not only my Marionette skills but my overall performance as a developer in Laravel and other frameworks.</p>
</div><div class="col-md-6">
**Hate**
<p><strong>Composite style architecture is complex.</strong> There is a reason people like MVC frameworks. They know to find their models, they can view <code>app/models</code>. To find controllers, <code>app/controllers</code>. Marionette has no structure except for that you give it. Creating a new Marionette single page application can be a daunting task to start with just because you have to organize your code with intent. <em>You don’t just drop a file in models/users.js but instead  face the challenge of how to broadcast the users entity?</em></p>
<p><strong>Routing as an afterthought is something <em>Derick Bailey</em> and <em>Brian Mann</em> evangelize.</strong> I can’t say I agree 100% because routing is an essential part of single page applications. The reason why this bothers me is that when you rely solely on events to do your routing then it takes a <span class="lg">lot more</span> time.</p>
<p>For example, if you have route to #users and write a link <code>&lt;a href=&quot;#users&quot;&gt;Users&lt;/a&gt;</code> in your navigation then you are done. Simple right? But in Marionette the preffered thinking seems to be that we should</p>
<ol>
<li>listen to an event on <code>&lt;a class=&quot;js-clicked&quot;&gt;Users&lt;/a&gt;</code> DOM element inside of the users’ <code>Item</code>/<code>Collection</code>/<code>Composite</code> View</li>
<li>bubble the event up using a trigger to parent controller.</li>
<li>parent controller listens for triggers on child views.</li>
<li>the controller would handle a trigger from child view in a function and take necessary action, which would to be call some event like <code>App.vent.trigger('!route:to:users')</code></li>
</ol>
<p>If none of that makes sense to you then you aren’t alone. Basically, it is a lot of work for something as simple as routing.</p>
<p><strong>Testing in Marionette can be wearisome.</strong> Unlike Ember, which has the Chrome dev tools integration, in order to test I have to set breakpoints and follow execution and that can prove to be difficult since there are many events flying around everywhere. Often times I find myself just doing <code>console.log</code>. Also I have tried using karma/mocha with Marionette and because the <code>Marionette.Application</code> is a singleton it is hard to test in isolation.</p>
</div></div>
<h3>So which one should I use?</h3>
<p>Depending on the application I am trying to build I would pick one of these three.</p>
<p><strong>When to use Angular?</strong> If I’m just trying to add a simple UX feature that I want some two-way data binding then I might bring in angularjs. But I wouldn’t want to do a lot of routing and client-side templating with it. Another thing I wouldn’t want to do is create custom directive. This might work well for teams that are strictly dedicated to Angular, but our team definitely does not fit that bill.</p>
<p><strong>When to use Ember?</strong> If I want to create a more MVC looking front-end client with lots of routing then Ember would be my choice. Ember is great to start prototyping with. It is really fast to get started with but as the application grows, if you are not careful, then it will become increasingly more difficult to work with. Also be prepared to read a lot of docs, blog posts, stack overflows and watch a lot of videos <strong>because Ember is the richest (feature-wise) of these 3 frameworks</strong> and will take a while for you to become comfortable with. An example of this is Ember model (DS data store). You can define your has many/belongs to relationships on the client side if you wanted to. I’ve not found a good reason to do this yet though. Also instead of following RESTful standards it does something called side-loading so <strong>be prepared to write your own Adapter for Ember</strong> or handle data in a custom way on the server-side. Honestly, I have not done much with Ember model as you can just use plain ol’ javascript objects with Ember too. You can even use <code>Backbone.Model</code> with it.</p>
<p><strong>When to use Marionette?</strong> You might be curious to see how the composite design pattern will work on your application but I would <strong>only pick Marionette if you (and your team) are very comfortable with javascript.</strong> If you use Marionette you should be ready to <strong>use lots of additional plugins</strong> and watch Brian Mann’s videos on a good way to organize your marionette application. You can easily bring in lots of jquery plugins without having to worry about the DOM being messed and you will know you are in complete control of your DOM because there is not a whole lot of magic going on behind the scenes with Marionette since you are having to wire up the different types of views yourself.</p>
<p>Above all else, no matter the framework you choose, <strong>test your code</strong>. A feature rich client side architecture will need tests just like a server side architecture. This is one area Marionette seems to lack guidance. I have seen many more tutorials for Ember and Angular on testing than Marionette. But it is still possible using jasmine or mocha to crank out a test suite in all 3 of these client side frameworks. Good luck, amigos.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/04/2014-04-17_which-javascript-framework-to-use-angular-vs-ember-vs-marionette/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[My Standing Desk]]></title>
        <id>/2014/05/2014-05-15_my-standing-desk/</id>
        <link href="/2014/05/2014-05-15_my-standing-desk/"/>
        <updated>2014-05-15T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I began writing this article months ago when I started researching standing desks. I started writing an article and realized, I should probably buy a desk first before I write this blog post. Thus, all that was saved in my draft was this line:
{% blockquote %}
I sit. A lot. So much in fact that it is killing me. I want to stand more. I want to move more.
{% endblockquote %}
From the desperation found in the quote above, one thing was clear - I desired change. I won’t go into details but my health was the primary reason I was seeking out standing desks.
]]></summary>
        <content type="html"><![CDATA[<p>I began writing this article months ago when I started researching standing desks. I started writing an article and realized, I should probably buy a desk first before I write this blog post. Thus, all that was saved in my draft was this line:</p>
<p>{% blockquote %}
I sit. A lot. So much in fact that it is killing me. I want to stand more. I want to move more.
{% endblockquote %}</p>
<p>From the desperation found in the quote above, one thing was clear - I desired change. I won’t go into details but my health was the primary reason I was seeking out standing desks.</p>
<!-- more -->
<p>I spend most of my day at my desk, writing code, working on projects, and in Hangouts. It’s my profession. If I’m not slinging code, then I’m not producing anything. I love working from home, it’s flexible but that doesn’t mean I don’t spend a good part of my days working.</p>
<p>So after searching for a while I found there was plenty of options for a standing desk. I could <a href="http://lifehacker.com/build-your-own-electric-standing-desk-1305005648">build my own</a>, buy a stationary standing desk so that I have two desks, one for standing and one for sitting or pick from various desks, such as, <a href="http://www.nextdesks.com/video/adjustable-height-desk-terra">NextDesk</a>, <a href="https://myupdesk.com/upwrite">UpDesk</a> and <a href="http://www.geekdesk.com/">GeekDesk</a>.</p>
<h3>Build vs. Buy</h3>
<p>I wouldn’t try to construct my own bed. Why? Because I want it to be comfortable and functional. I spend on average eight hours a day in my bed. The same logic applies to my desk. The old desk I was using was built by my own hands, and I’m man enough to admit that I’m no professional craftsman. It was made from mdf board I painted, some bolts I purchased from Home Depot and some metal brackets from an old yardsale desk my wife had salvaged. We recently moved in the last few months and I’m surprised it even survived the move. So I was determined to purchase my next desk.</p>
<h3>What Desk Should I Purchase?</h3>
<p>I looked at various standing desks from like IKEA because I though this would be easier on the pocketbook. However, two different desks means two different workspaces which was an immediate turn off for me. I have a three monitor setup and a kick ass Ubuntu system that I develop with. How do I get that same kick ass workspace on two desks? Buy an additional three more monitors and do some sort of kvm/splitter setup or a different desktop machine? No, I wanted to keep it simple. <strong>One desk, one workspace</strong>. Also my office only has room for one desk. Thus I decided I wanted a desk which could slide up and down between sitting and standing positions.</p>
<p>I had seen a GeekDesk in action before from an old colleague, so it was the first thing I went to. But after reading <a href="http://thewirecutter.com/reviews/the-best-standing-desks/">thewirecutter</a>, I sought out a different desk. I have pretty high standards and some aspects important to me,</p>
<ul>
<li>
<p><em>look and feel</em> - I will make contact with my desk more throughout the day than my wife . My wife is easy on the eyes, has beautiful curves, and nonabrasive soft skin that is calming yet exciting. I expect no less from my desk.</p>
</li>
<li>
<p><em>i like to move it, move it</em> - If I want to sit, stand, stand, sit, stand, stand, sit throughout my day then I need to easily move positions at anytime. It cannot be any hassle to move up and down or the desk has failed.</p>
</li>
<li>
<p><em>easily cleaned</em> - I believe that a tidy desk makes me more productive. Having little toys, bills/papers, or pci express cards strung about my desk only distracts me from the real tasks at hand.</p>
</li>
<li>
<p><em>single purposed</em> - I will often eat lunch at my desk. If my whole point of getting a standing desk is to be healthier and move around more, then why would I go back to my desk to sit down and eat lunch? I want my desk to be simply a place of work. Not my dinner table and not my coffin.</p>
</li>
<li>
<p><em>organization</em> - My old desk had a filing cabinet drawer. One might think that this would help with organization. Unfortunately, this was not the case. My daughter often comes running into my office when the door is left open and what once was a full drawer full of paperwork, cables and various electronics quickly becomes an empty drawer. Having a desk with no drawers forces me to place these things somewhere else. I can put my receipts and paperwork in our real filing cabinet. I can put cables and electronics in storage bins with the other cables. What real purpose does a drawer on a desk serve a web designer? Simple: I throw crap I don’t want visible into the drawers and forget about it. Solution: I get off my butt and put the crap where it really needs to go.</p>
</li>
</ul>
<h3>What did I do?</h3>
<p>After searching a while, I noticed that the UpDesk was stationed out of Nashville, TN. And it just so happens that I to go on business trips to Nashville, TN. I took that opportunity to stop by the warehouse for UpDesk and got a first-hand tour of these amazing desks. They didn’t have a show room but after ringing a doorbell this guy named Kamron shows up and lets me walk right into the office space where the employees all utilize fruits of their own labor; each employee had a different style of desk. I really enjoyed what I saw and decided that this was the desk for me. I had a large whiteboard UpWrite desk custom made and after four weeks of anticipation it was ready. Here are some pictures.</p>
<p>{%raw %}
<a class="inline thumbnail" data-lightbox="updesk" href="/media/my-standing-desk/1.jpg"><img class="cropped" src="/media/my-standing-desk/1_s.jpg"></a>
<a class="inline thumbnail" data-lightbox="updesk" href="/media/my-standing-desk/2.jpg"><img class="cropped" src="/media/my-standing-desk/2_s.jpg"></a>
<a class="inline thumbnail" data-lightbox="updesk" href="/media/my-standing-desk/3.jpg"><img class="cropped" src="/media/my-standing-desk/3_s.jpg"></a>
<a class="inline thumbnail" data-lightbox="updesk" href="/media/my-standing-desk/4.jpg"><img class="cropped" src="/media/my-standing-desk/4_s.jpg"></a>
<a class="inline thumbnail" data-lightbox="updesk" href="/media/my-standing-desk/5.jpg"><img class="cropped" src="/media/my-standing-desk/5_s.jpg"></a>
<a class="inline thumbnail" data-lightbox="updesk" href="/media/my-standing-desk/6.jpg"><img class="cropped" src="/media/my-standing-desk/6_s.jpg"></a>
<a class="inline thumbnail" data-lightbox="updesk" href="/media/my-standing-desk/7.jpg"><img class="cropped" src="/media/my-standing-desk/7_s.jpg"></a>
<a class="inline thumbnail" data-lightbox="updesk" href="/media/my-standing-desk/8.jpg"><img class="cropped" src="/media/my-standing-desk/8_s.jpg"></a>
<a class="inline thumbnail" data-lightbox="updesk" href="/media/my-standing-desk/9.jpg"><img class="cropped" src="/media/my-standing-desk/9_s.jpg"></a>
<a class="inline thumbnail" data-lightbox="updesk" href="/media/my-standing-desk/10.jpg"><img class="cropped" src="/media/my-standing-desk/10_s.jpg"></a>
<a class="inline thumbnail" data-lightbox="updesk" href="/media/my-standing-desk/11.jpg"><img class="cropped" src="/media/my-standing-desk/11_s.jpg"></a>
<a class="inline thumbnail" data-lightbox="updesk" href="/media/my-standing-desk/12.jpg"><img class="cropped" src="/media/my-standing-desk/12_s.jpg"></a>
<a class="inline thumbnail" data-lightbox="updesk" href="/media/my-standing-desk/13.jpg"><img class="cropped" src="/media/my-standing-desk/13_s.jpg"></a>
{% endraw %}</p>
<p>It’s been a few months since I’ve had my UpDesk and I use it daily for work. I typically stand up a few hours a day and rotate back and forth. I sweat when I’m standing and standing too much flares up my hemorrhoids. I’ve got a mat to stand on which helps some.
I feel more productive when standing, and I like to have client meetings while I stand so I can walk around some. I do use the whiteboard to hash out ideas in my head but I still find myself using pencil and paper too.</p>
<h3>DOWNside of UPdesk</h3>
<p><strong>The real downside to this product is the cost.</strong> However, I believe you get what you pay for though, and this is a solid build desk. Doesn’t wobble, supports my 3 monitors with no problem and gets moved up and down minimum twice a day.</p>
<p><strong>Another downside to this desk is that it isn’t kid friendly.</strong> My twenty-month old daughter can push the up and down arrows and if I’m sitting under the desk it comes down on the chair and the desk starts to tilt and raise up. I don’t use the presets because she constantly re-programs them. It would be nice if this thing had an off/on switch at the back of the controller or something.</p>
<p><strong>My last complaint is that the edge of the desk is too rough.</strong> Now don’t get me wrong, the desk isn’t cutting slahes into my skin so that I bleed all over the place but this is an area of improvement. As a developer my hands are on the keyboard constantly and my wrists will rest on the edge of the desk. It’d be cool if it had a more rounded corner at the edge of the desk - especially for one that costs so much.</p>
<h3>UPside of UPdesk</h3>
<p><strong>The desk moves up and down quickly and quietly.</strong> However we have a lot of black outs here. So I have a UPS battery that helps keep my computers running if the power flickers. When I first plugged my desk into the battery section then anytime I re-positioned the desk it made the UPS beep constantly. I ended up mounting another surge protector to the desk.</p>
<ol>
<li>surge protector is battery protected (for computer, router, dsl modem)</li>
<li>other surge protector is not battery protected (for monitors, printer, things I don’t care if they shut off during power surge)</li>
</ol>
<p><strong>Increased productivity and organization.</strong> I keep papers and things on my desk but I find I am constantly re-organizing my desk to keep it clutter free. This is exactly what I wanted so that I don’t have papers and bills just lingering around for months. I am able to walk around and think while I code too, if I’m standing up. Google Hangout meetings are awesome with this thing.</p>
<p>The desk has helped my carpal tunnel. I still have some carpal tunnel but not the pain shooting through my wrists kind anymore after a long days work.</p>
<h3>Buyers Remorse? Yes or no? Closing Thoughts?</h3>
<p>It has been almost 7 months with this desk and I don’t regret the purchase on bit. It was a bit expensive but given my line of work: it was a good investment and tax deductible too.</p>
<p><em>I would recommend a standing desk to anyone who works from home and sits a lot.</em></p>
<p>I will add though that if you are trying to loose weight or become more conciseness about your health then just adding a standing desk to your life isn’t going to fix all your problems. <span class="lg">It certainly didn’t fix all my health problems. So keep in mind if you are buying a desk solely for your health, it isn’t going to work miracles.</span></p>
<p>That being said, if you can <strong>afford it</strong> and the <strong>whiteboard is something you’ll use</strong> then I say <strong>do it</strong>. If the price is too expensive you might consider a different type of UpDesk, like the one without the whiteboard. Even though a standing desk isn’t going to perform some miracle on your health you still shouldn’t sit around all day, it is shaving the years off your life.</p>
<p><strong>UPDATE (MAY 16th 2014)</strong></p>
<p>The <a href="https://www.kickstarter.com/projects/2036834894/the-most-affordable-automatic-sit-to-stand-desk">STANDdesk</a> looks pretty nice and is half the cost. I have a buddy who ordered one, I’ll check his out and update here accordingly.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/05/2014-05-15_my-standing-desk/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[There is NO TDD debate]]></title>
        <id>/2014/05/2014-05-21_there-is-no-tdd-debate/</id>
        <link href="/2014/05/2014-05-21_there-is-no-tdd-debate/"/>
        <updated>2014-05-21T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I’ve been watching the TDD debates with Martin Fowler, Kent Beck and David Hansson. There is some good material in there. It’s pretty cool watching these three. All three are developer heroes of mine. Unfortunately, there isn’t much of a debate.
Martin Fowler plays time cop and mediator but doesn’t speak that much which is a shame because I know he is a bad ass - and he’s got that cool accent. Kent seems to go with David’s flow. Kent even has an article on Facebook called Rest In Peace TDD.
]]></summary>
        <content type="html"><![CDATA[<p>I’ve been watching the TDD debates with Martin Fowler, Kent Beck and David Hansson. There is some good material in there. It’s pretty cool watching these three. All three are developer heroes of mine. <strong>Unfortunately, there isn’t much of a debate</strong>.</p>
<p>Martin Fowler plays time cop and mediator but doesn’t speak that much which is a shame because I know he is a bad ass - and he’s got that cool accent. Kent seems to go with David’s flow. Kent even has an article on Facebook called <a href="https://www.facebook.com/notes/kent-beck/rip-tdd/750840194948847">Rest In Peace TDD</a>.</p>
<!-- more -->
<p><strong>There is no debate here.</strong> Where is the tension? The conflict? Where is the name calling?</p>
<h4>And most importantly, <strong>where is Uncle Bob?</strong></h4>
<p>I’m not <a href="http://martinfowler.com/snips/201405071053.html">looking for a death match</a> but the real power players in this conflict are Robert Martin and David Hansson.</p>
<p>Let’s look at a brief history: <em>the order of events occur in real time</em> <small>(not really, just been watching too much Jack Bauer on 24)</small>.</p>
<h3>A Brief History</h3>
<p>It all started with an article/talk that David came out called <a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">TDD is dead, long live testing</a>. David states that he doesn’t test first and he is pretty content with his own style. Of course, David knows how to sell his ideas so he starts his article with a semi-offensive tag line.</p>
<p>{% blockquote %}
Test-first fundamentalism is like abstinence-only sex ed: An unrealistic, ineffective morality campaign for self-loathing and shaming.
{% endblockquote %}</p>
<p>At the same time David also gave a great <a href="https://www.youtube.com/watch?v=9LfmrkyP81M">speech at RailsConf 2014</a> about TDD. David’s beef with TDD is that we loose <em>architecture clarity</em> when we start to break apart and encapsulate pieces of rails controllers.</p>
<p>In waltzes Uncle Bob whose <a href="http://blog.8thlight.com/uncle-bob/2014/04/25/MonogamousTDD.html">reciprocated response</a> attacks David’s claim as nonsensical and lacking credibility.</p>
<p>This forms into a sort of Pokemon battle where @dhh and @ub are hiding behind their blogs without any direct interaction between the two.</p>
<h4>@dhh <a href="http://david.heinemeierhansson.com/2014/test-induced-design-damage.html">attacks</a>  |  @ub <a href="http://blog.8thlight.com/uncle-bob/2014/05/01/Design-Damage.html">defends</a>  |  @ub <a href="http://blog.8thlight.com/uncle-bob/2014/05/02/ProfessionalismAndTDD.html">counterattacks</a></h4>
<p>This spawned a “debate” on Google Hangouts. But again, not really much debating going on here. Watch them yourself, gather your own opinions.</p>
<table>
<thead>
<tr>
<th>Videos</th>
<th>About</th>
<th style="text-align:right">TDD</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Part 1</strong></td>
<td>     </td>
<td style="text-align:right"><strong>Part 2</strong></td>
</tr>
<tr>
<td>{% youtube z9quxZsLcfo %}</td>
<td></td>
<td style="text-align:right">{% youtube JoTB2mcjU7w %}</td>
</tr>
<tr>
<td><strong>Part 3</strong></td>
<td></td>
<td style="text-align:right"><strong>Part 4</strong></td>
</tr>
<tr>
<td>{% youtube YNw4baDz6WA %}</td>
<td></td>
<td style="text-align:right">{% youtube dGtasFJnUxI %}</td>
</tr>
<tr>
<td><strong>Part 5</strong></td>
<td></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td>{% youtube gWD6REVeKW4 %}</td>
<td></td>
<td style="text-align:right"></td>
</tr>
</tbody>
</table>
<h3>What are your thoughts?</h3>
<p>I don’t imagine many people care what I think. But what the hell, you’re reading this right? I agree with David on many things: especially on the points like <strong>code clarity &amp; knowing the trade offs involved with TDD</strong>.</p>
<p>I work a lot with Laravel and I see the community diving into things like the hexagonal pattern and DDD. I’m not personally working on a large application like Facebook. I write at best, medium sized applications. My experience with DDD and hexagonal is that when done on smaller projects, it turns seemingly simple and harmless code into complex and over-engineered crap. <strong>I’ll say it again, code to crap</strong>.</p>
<h4>There is little beauty in turning simple into complex.</h4>
<p>I’ve done hexagonal layering and repositories. The real problem I was trying to tackle was <em>code maintainability, project risk and developer sanity</em>.</p>
<p>I’ve been writing code for over a decade. I get paid to do it too. I consider myself a professional and I don’t always test first. I also still haven’t found a silver bullet when developing though. Sometimes I prototype first. Other times I’ll write a test spec and then write code to satisfy that spec. It just depends on the situation really.</p>
<p>However, writing a test first ensures that I am writing an end-result I can feel confident about. But I don’t want tests to drive my design. Changes dictate my design. It is one of the most important factors of my design. That is not to say that domain is any less important but I like to follow this age-old principle:</p>
<p>{% blockquote %}
Encapsulate the things that change. Let sleeping dragons lie.
{% endblockquote %}</p>
<p>Okay, that last part about dragons I just made up. If some code (the dragon) never changes, don’t write a bunch of indirection or abstractions around that code. Also a manual test would work just fine here. Anything else and it’s just making it harder man.</p>
<p>Here is an example of doing it in style. In Taylor’s laravel/cashier project he has a class called Invoice that can print off a pdf receipt of an invoice. However, one of the methods of an invoice is called <a href="https://github.com/laravel/cashier/blob/master/src/Laravel/Cashier/Invoice.php#L341">getPhantomProcess</a> which uses the external phantomjs binary file in order to create a pdf document. Is this bad design? It seems to violate open/closed and single responsibility principles. This code is less flexible because the only way to create pdf documents is through phantomjs. But notice Taylor made his code simple to follow, it’s elegant. He didn’t let tests dictate his design either.</p>
<p>Taylor could have injected in a dependency for Invoice that allows for a pdf to be created some other way. It certainly would have been easier unit tested this way. However, this part of the code is not going to change. Taylor is always going to use Phantomjs, so he is content. And thus, my point:</p>
<h4>Less work, still works.</h4>
<p>Everyone knows Taylor is an awesome developer. One thing that makes him great is that he is okay with breaking rules if it makes life easier. David, Kent and Martin all seem to be the same way too. I can agree with that. Make life easier.</p>
<h3>TDD is not dead.</h3>
<p>I don’t agree that TDD is dead though. I think it has evolved. To know if TDD is dead, we should define it. Uncle Bob states three principles of TDD are:</p>
<ol>
<li>Write no production code, except to pass a failing test.</li>
<li>Write only enough of a test to demonstrate a failure.</li>
<li>Write only enough production code to pass a test.</li>
</ol>
<p>The TDD principles are not the problem here. Notice these principles say nothing specific about your tests. It doesn’t say that you have to write tons of mocks and unit tests. TDD doesn’t say anything about your architecture or design. I like to interrupt these 3 principles slightly different, much like writing an essay article:</p>
<ol>
<li>Create an outline that satisfies my objective (perhaps my objective is to inform you about cows)</li>
<li>Using the basic outline, fill in details with some paragraphs. (here is were I write the story)</li>
<li>Reflect. Does the objective of the story and outline still match? <small>(did I actually inform you about cows? Are there any tangents about unicorns?)</small></li>
</ol>
<h4>(And we don’t try to write a novel in one go. Iterate the process.)</h4>
<p>I think the way we test is evolving. For example, (imo) testing behavior in web apps is more far important than unit testing. Sure tests might run a bit slower but unit tests produce a far less valuable feedback loop than say an integration test. In fact, the most valuable feedback loop is a <strong>customer</strong> which assuredly won’t provide feedback in mere milliseconds.</p>
<p>Regression testing a web app seems to work well too, as I think David &amp; Kent both touched on this point when they talked about. This is a grey area where TDD is evolving. If you are writing all your tests up front, then you shouldn’t have to write regression tests right? <em>That’s not how it works in the real world.</em> What is wrong with writing tests after the fact? Nothing. That one user, QA person or that jerk down the road is going to break something and then you’ll have to go fix it. If you have time you’ll write a test to ensure it doesn’t happen again. All this to say though, just because you do regression testing, doesn’t mean you should just throw TDD out the window. It’s not all or nothing here.</p>
<p>For modules (or that one hefty algorithm) that have simple objectives and interfaces (unlike the UX and presentation layer stuff then TDD makes a lot more sense. You start digging in to the units and approaching this with white box testing. That doesn’t mean you have to bust out Mockery and start mocking all over the place though. I’ve found that phpspec for creating doubles works well. However, if you start trying to mock large things like Eloquent, well phpspec fubars. This is just my own style though; I should get back on point.</p>
<p>I’ve found that using TDD used in the proper cases is bad ass and produces great quality code. Some proper cases
being re-usable modules, components, packages, frameworks, etc. An terrible time to use TDD is a throw-away prototype or when the problem domain’s architecture is very small or unclear.</p>
<p>So <strong>when it makes sense</strong>, write some tests, write some code, make sure tests pass. Rinse, wash, repeat daily. In the right context, there is nothing dead about the process of TDD. Don’t get me wrong, I enjoy watching Martin, Kent and David express themselves. Ever notice that Kent squints really hard when he is thinking? ++Geek awesomeness!</p>
<p>All this said, <span class="lg">adding Uncle Bob to the conversation will make the debate better.</span></p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/05/2014-05-21_there-is-no-tdd-debate/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ETags With Laravel Filters]]></title>
        <id>/2014/05/2014-05-23_etags-with-laravel-filters/</id>
        <link href="/2014/05/2014-05-23_etags-with-laravel-filters/"/>
        <updated>2014-05-23T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[ETags PHONE HOME?! No. So what are ETags? Wikipedia has this to say:
{% blockquote %}
The ETag or entity tag is part of HTTP, the protocol for the World Wide Web. It is one of several mechanisms that HTTP provides for web cache validation, and which allows a client to make conditional requests. This allows caches to be more efficient, and saves bandwidth, as a web server does not need to send a full response if the content has not changed. ETags can also be used for optimistic concurrency control as a way to help prevent simultaneous updates of a resource from overwriting each other.
{% endblockquote %}
]]></summary>
        <content type="html"><![CDATA[<p>ETags PHONE HOME?! No. So what are ETags? Wikipedia has this to say:</p>
<p>{% blockquote %}
The ETag or entity tag is part of <a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">HTTP</a>, the protocol for the <a href="http://en.wikipedia.org/wiki/World_Wide_Web">World Wide Web</a>. It is one of several mechanisms that HTTP provides for <a href="http://en.wikipedia.org/wiki/Web_cache">web cache</a> validation, and which allows a client to make conditional requests. This allows caches to be more efficient, and saves bandwidth, as a web server does not need to send a full response if the content has not changed. ETags can also be used for <a href="http://en.wikipedia.org/wiki/Optimistic_concurrency_control">optimistic concurrency control</a> as a way to help prevent simultaneous updates of a resource from overwriting each other.
{% endblockquote %}</p>
<!-- more -->
<p>Often my wife will call me up and ask me to read her the grocery list because she forgot it. So I waddle over to the refrigerator and start reading off the list which can take several minutes if it’s large. Once she has this, she is done. In this case, I am the server, she is the client. Now imagine if my wife called me up 2 minutes later and asked the same question? Would I go back to the refrigerator and spend another 5 minutes reading off a list? <strong>No, I’d tell my wife:</strong></p>
<p><span style="text-align: center; font-size: 1.5em;">304 - Not Modified.</span></p>
<p>The grocery list hasn’t changed in the last two minutes. There is no reason to read it off again. <em>But there is a problem.</em> I can’t just ignore the fact that my wife is calling me again by instantly hanging up on her just because the list hasn’t changed.</p>
<ul>
<li>Maybe she lost the list?</li>
<li>Maybe she wants to verify the list hasn’t changed?</li>
<li>Maybe the dog ate her list?</li>
<li>Maybe she just wants to say hi?</li>
</ul>
<p>This is a list we are talking about. Things are written in order. Perhaps she could just tell me the last thing on her list and if it matches the last item on mine then we are good to go. Perhaps we could also compare the number of items in the list.</p>
<p>Or we could use an ETag.</p>
<p>Let’s switch context over to the world wide web. If I send some html, json or xml to a client then if they ask for the same page again within a “time-frame” I am just going to tell them to use the data they already have in front of them.</p>
<p>In the above example we used “time” as a factor for our ETag. The grocery list isn’t going to change every hour. We might update it a few times throughout the week. The combination of current date + the resource (we will use url) becomes the entity we are tagging.</p>
<p>When the server and client have to communicate, it is costing time (and time is money) to both parties involved.</p>
<ol>
<li>The server has to spend time conjuring up data for the client.</li>
<li>The client has to spend time capturing the data sent from the server.</li>
</ol>
<p>Let’s look at how we can mitigate and reduce the amount of time for both of the parties involved.</p>
<p>The server does not have to re-process the request. The client and server both save on bandwidth which costs money for both the client and server. Plenty of hosting companies charge for bandwidth and some ISPs too, especially on mobile devices. Let’s look at some code.</p>
<pre><code>Route::group(['before' =&gt; 'cached.request', 'after' =&gt; 'cached.response'], function()
{
	Route::get('/', function()
	{
		sleep(5);
		return Response::json(array('test' =&gt; 'some data that takes a while to return'));
	});
});

Route::filter('cached.request', 'CachingFilter@before');
Route::filter('cached.response', 'CachingFilter@after');
</code></pre>
<p>This code is sleeping for 5 seconds and then we could send a big chunk of data to the client. I’m just doing this sleep to show that on the next page refresh you will see results instantly because the server is responding with a 304. What does the CachingFilter look like? Let’s take a look.</p>
<pre><code>class CachingFilter
{
	/**
	 * Create the entity we will be searching etag for
	 */
	protected function entity($request)
	{
		return $request-&gt;url() . '-' . with(new DateTime)-&gt;format('d');
	}

	/**
	 * Should be run before routes are executed
	 * Will abort if etag match is found
	 */
	public function before($route, $request)
	{
		$entity = $this-&gt;entity($request);

		$etag = new Etag($entity, $request-&gt;getEtags());

		if ($etag-&gt;isValid())
		{
			App::abort(304);
		}
	}

	/**
	 * Should be run after a route is executed
	 * Creates a new etag for this response content
	 */
	public function after($route, $request, $response)
	{
		$entity = $this-&gt;entity($request);

		$etag = new Etag($entity, $request-&gt;getEtags());

	 	$response-&gt;setEtag($etag-&gt;key());
	}
}
</code></pre>
<p>Finally we will want to see what this Etag class is doing. It has two methods. One fetches the key for us. The other method will tell us if the etag is still valid or not.</p>
<pre><code>class Etag
{
	public function __construct($entity, $etags)
	{
		$this-&gt;entity = $entity;
		$this-&gt;etags = $etags;
	}
	/**
	 * Create an etag cached for given request and response.
	 *
	 * @return  void
	 */
	public function key()
	{
		return md5($this-&gt;entity);
	}

	/**
	 * Does the browser have an Etag stored for this request?
	 */
	public function isValid()
	{
		$key = $this-&gt;key();

		$etag = str_replace('&quot;', '', $this-&gt;etags);

		return $etag &amp;&amp; $etag[0] == $key;
	}
}
</code></pre>
<p>It’s important to note here that this only targets 1 client at a time. This type of client-side caching is useful for when the same url (resource) provides different content for different users. Imagine if you went to <code>/users/me</code> and saw someone else’s page?</p>
<p>However, in the case were you are fetching a specific set of entities then you might utilize database caching and Etags. The page <code>/pages/how-i-met-your-mother</code> is likely to be the same for all users of the system. Unfortunately this approach still requires the Laravel application to be booted so it will never be as fast as just serving a static html file.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/05/2014-05-23_etags-with-laravel-filters/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reminders with Ubuntu]]></title>
        <id>/2014/06/2014-06-04_reminders-with-ubuntu/</id>
        <link href="/2014/06/2014-06-04_reminders-with-ubuntu/"/>
        <updated>2014-06-04T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[There are some things I do daily and being a human I often forget them. I could just set up reminders on my phone but I wanted to do it on my computer. After some research I found a few articles that really helped me out. Here is my setup on Ubuntu.
]]></summary>
        <content type="html"><![CDATA[<p>There are some things I do daily and being a human I often forget them. I could just set up reminders on my phone but I wanted to do it on my computer. After some research I found a few articles that really helped me out. Here is my setup on Ubuntu.</p>
<!-- more -->
<h5><a href="http://www.maketecheasier.com/add-receive-reminders-on-desktop-in-ubuntu/">Install Indicator Remindor.</a></h5>
<pre><code>sudo add-apt-repository ppa:bhdouglass/indicator-remindor
sudo apt-get update
sudo apt-get install indicator-remindor

</code></pre>
<p>This thing lets me setup my reminders easy-peasy. It even has an alarm to play mp3s when the notification pops up. I don’t use that though since I don’t want to take a chance of waking up my daughter from a nap or something. However, if I’m in the kitchen getting a glass of water and notification passes by quietly then am I just out of luck? No.</p>
<h5><a href="http://www.makeuseof.com/tag/review-notifications-ubuntu-desktop-linux/">Install Recent Notifications</a></h5>
<pre><code>sudo add-apt-repository ppa:jconti/recent-notifications
sudo apt-get update
sudo apt-get install indicator-notifications
</code></pre>
<p>Lastly, if you use Google calendar like me you probably want to be notified about your upcoming events. Ubuntu doesn’t have out of the box support for this so you have to do some setup.</p>
<h5><a href="http://xmodulo.com/2013/12/integrate-google-calendar-linux-desktop.html">Install Google Calendar Cli</a></h5>
<pre><code>sudo apt-get install git python-pip python-gdata python-dateutil python-gflags python-vobject python-parsedatetime1
sudo pip install google-api-python-client
sudo pip install apiclient urllib3
git clone https://github.com/insanum/gcalcli.git
cd gcalcli
sudo python setup.py install
</code></pre>
<p>A few notes about this. I ended up using the <em>–upgrade</em> flag when doing a pip install for google-api-python-client and urllib3. Next when I ran</p>
<pre><code>gcalcli agenda
</code></pre>
<p>I got this <code>ERROR: Missing module - cannot import name __version__</code></p>
<p>After searching some I found that this is an issue in the apiclient library and can be fixed by opening <code>/usr/local/lib/python2.7/dist-packages/apiclient/model.py</code> and commenting out the line</p>
<pre><code>#from apiclient import __version__
</code></pre>
<p>Hopefully everything goes smoothly for you after this and then you should have your browser open when you run <code>gcalcli agenda</code>. You’ll need to approve the gcalcli application for your google account. After this you should be able to see your events by running <code>gcalcli agenda</code> once again.</p>
<p>However, we aren’t done yet.</p>
<p>You may not always be logged into google or your oauth session may expire. So you’ll need to enable the calendar API and register an application for gcalcli at <a href="https://cloud.google.com/console">https://cloud.google.com/console</a> so that you can be sure to access your agenda’s later down the road.</p>
<p>To do this plugin in the client id and secret from the app you created into the file <code>~/.gcalclirc</code></p>
<p>Lastly, how do you get notified about your calendar events? It’s easy. Just setup a cronjob to run the remind command from gcalcli.</p>
<pre><code>crontab -l
# run reminders every 10 minutes which will send-inotify
# when an event actually exists that you need to be reminded about
*/10 * * * * /usr/local/bin/gcalcli remind
</code></pre>
<p>Now all that is left is to go remind yourself to do some tasks via Google or in your indicator task bar. Having your events in Google calendar though let’s you propagate out on other devices like your phone so it’s a pretty sweet setup to have Google Calendar integration with Ubuntu notifications. Good luck, and may the odds be never in your favor?</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/06/2014-06-04_reminders-with-ubuntu/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Switching To Hexo]]></title>
        <id>/2014/06/2014-06-16_switching-my-blog/</id>
        <link href="/2014/06/2014-06-16_switching-my-blog/"/>
        <updated>2014-06-16T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I’ve made the switch over to hexo for my page. I’ve used weebly for years now and I loved it for it’s ability to quickly crank out awesome content using a drag and drop builder. However, I’m a web developer and I find myself often fighting weebly.
For example, on weebly I had my portfolio website written with Ember js but one day it stopped working when weebly changed how it includes javascripts (like jquery) into the source - this ended up breaking the site. I decided then that enough is enough. Time to make the switch. For a while now, I’ve been interested in front-matter Markdown-based blog systems like [Jekyll](http://jekyllrbb.com], Hexo, Sculpin, Ghost and a few others.
]]></summary>
        <content type="html"><![CDATA[<p>I’ve made the switch over to <a href="http://hexo.io">hexo</a> for my page. I’ve used weebly for years now and I loved it for it’s ability to quickly crank out awesome content using a drag and drop builder. However, I’m a web developer and I find myself often fighting weebly.</p>
<p><strong>For example</strong>, on weebly I had my portfolio website written with Ember js but one day it stopped working when weebly changed how it includes javascripts (like jquery) into the source - this ended up breaking the site. I decided then that enough is enough. <em>Time to make the switch.</em> For a while now, I’ve been interested in front-matter Markdown-based blog systems like [Jekyll](<a href="http://jekyllrbb.com">http://jekyllrbb.com</a>], <a href="http://hexo.io">Hexo</a>, <a href="https://sculpin.io/">Sculpin</a>, <a href="http://ghost.org">Ghost</a> and a few others.</p>
<!-- more -->
<p>After some research, I chose Hexo for it’s ease of use. Jekyll looked nice but honestly I’m not a big fan of Ruby so that steered me away from it. I use Laravel a lot and OctoberCMS looked bad ass; however I wanted just static pages that I could host my blog on <a href="http://blog.lazywei.com/2013/11/24/how-do-i-configure-my-hexo-blog/">github pages</a> like a pro. I’ve been doing this web thing for almost 20 years now and the only thing that has stayed consistent about the Internet is html, javascript and css. Thus, that’s what I want to build.</p>
<p>I don’t want to spend a bunch of time with server administration. I’ve been blogging since 2000 - geek on the 5th, lamegeek and a few others and after those blogs died, I swore I would never setup another apache server. Why? I spent more time playing with linux and apache and frankly I just don’t have time for that shit anymore. I didn’t do backups of those servers and they died when the server that was running in some dude’s closet fsck or formatted. I didn’t care enough about the content to go back and restore either.</p>
<h3>Code snippets</h3>
<p>The things I write about are usually pretty technical in nature so I’m pretty content with this setup. Now I can do code snippets like all the other cool kids.</p>
<pre><code>
$foo = FooFactory::createWithBar();
$foo-&gt;hookedOnAFeeling('High on believing');

</code></pre>
<h3>WSIWHAT?</h3>
<p>I’ve added <code>hexo-livereload</code> so I can get automatic page refreshes while I’m updating - so I can see how my markdown parsed on the page. It is a really nice setup I am really enjoying.</p>
<h3>SEO</h3>
<p>I’ve ported over my old blog posts over which took some time to get it out of weebly but it is worth it. I’m sure to lose some search optimization I’ve gained over the past few years but that’s okay. At least now I have my pages statically listed and I don’t have to worry about them changing yet again. :smile:</p>
<p>I love the way it generates static files - it’s all setup to be SEO friendly.</p>
<h3>Comments</h3>
<p>I’m going to use disqus for comments on my blog. I really enjoy getting feedback from people about my blog posts, it gives me warm fuzzies deep down inside</p>
<h3>What about Dynamic Content</h3>
<p>Javascript, duh… I’m a badass web developer, don’t forget it holmes. ^_^</p>
<h3>Hexo rocks!</h3>
<p>It took me about 30 minutes to really dig into hexo and figure out it’s internals. If I ever want to switch in the future to another technology, I just need to publish my static html content and then start from there. And I’m pretty content with that. It’s not like weebly where if that site crashes, I’m stuck without my blog and portfolio website for ever.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/06/2014-06-16_switching-my-blog/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cracking Fogcreek]]></title>
        <id>/2014/06/2014-06-25_cracking-fogcreek/</id>
        <link href="/2014/06/2014-06-25_cracking-fogcreek/"/>
        <updated>2014-06-25T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[You ever apply for a job and they make you do a little programming question? These are fun sarcasm because they usually have some math involved and it provides me a small and unimportant challenge - similar to a video game.
]]></summary>
        <content type="html"><![CDATA[<p>You ever apply for a job and they make you do a little programming question? These are fun <em>sarcasm</em> because they usually have some math involved and it provides me a small and unimportant challenge - similar to a video game.</p>
<!-- more -->
<h3>The Question</h3>
<p>Find a 9 letter string of characters that contains only letters from</p>
<pre><code>acdegilmnoprstuw
</code></pre>
<p>such that the hash(the_string) is</p>
<pre><code>910897038977002
</code></pre>
<p>if hash is defined by the following pseudo-code:</p>
<pre><code>    Int64 hash (String s) {
        Int64 h = 7
        String letters = &quot;acdegilmnoprstuw&quot;
        for(Int32 i = 0; i &lt; s.length; i++) {
            h = (h * 37 + letters.indexOf(s[i]))
        }
        return h
    }
</code></pre>
<p>For example, if we were trying to find the 7 letter string where hash(the_string) was 680131659347, the answer would be “leepadg”.)</p>
<h3>My Answer</h3>
<p>First I need to define the alphabet we can pick letters from. The bigger the alphabet the more difficult it is to brute force an answer. I wrote a brute force approach as a comparasion and just in case I can’t figure this out solution, but I ended up solving the problem the non-brute force way before execution was finished.</p>
<p>That was just luck though because the answer starts with an ‘a’ which happens to be one of the first characters of the alphabet. If our answer had started with a ‘w’ then we would have searched about <strong>15^9 (over 38 billion)</strong> different hash combinations which would take many lifetimes to accomplish.</p>
<p>It’s never good to have code that dramatically changes execution time depending on input, especially code that takes 100s of years to complete, so instead we are going to use math and reverse engineer the hashing algorithm so that we can find answers in constant time regardless of input.</p>
<p>So here is our given alphabet.</p>
<pre><code>var alphabet = &quot;acdegilmnoprstuw&quot;;
</code></pre>
<p>Next I establish the base we are in. There are fifteen letters in this alphabet so we are using the mathematical base 15 (HEX).</p>
<pre><code>var base = alphabet.length;
</code></pre>
<p>Next I duplicate the hash function from the question. I use this to hash various results and to also test that hashing the string <em>leepadg</em> returns 680131659347.</p>
<pre><code>function hash(the_string)
{
    var h = 7;

    for (var i = 0; i &lt; the_string.length; i++)
    {
        h = (h * 37 + alphabet.indexOf(the_string[i]));
    }

    return h;
}
</code></pre>
<p>The mathematical formula for this hash function expanded is</p>
<p>{% blockquote %}
37^9 * 7 + 37^8 * s1 + 37^7 * s2 + … + 37^2 * s7 + 37^1 * s8 + 37^0 * s9 = 910897038977002
{% endblockquote %}</p>
<p>where s1 is the first character in our 9 digit string and s9 is the last. The value of s1 thru s9 cannot be greater than 15 or less than 0 either.</p>
<p>Now the real magic comes in. All I am going to do is cut down the number of searches needed to find the answer <em>dramatically</em>. I still use <code>hash</code> function though, instead of searching for billions of solutions, we smartly guide our search with this algorithm below.</p>
<p>We start with the smallest possible hash the answer could be. Since the letter a is the smallest letter in the alphabet there can be no string <strong>before</strong> the string <code>aaaaaaaaa</code>. Now if I treat this string like it is some very large number in the base of 15 of our alphabet then I start at the very highest power which is the very first ‘a’. If you don’t get this let me explain in further detail.</p>
<p>It might be strange to see <code>aaaaaaaaa</code> as a number. But what if this was written as <code>111111111</code> instead? The highest power is the first 1 which is 1 * 10^9 = 10000000. Since we are treating letters of our alphabet as a set of numbers we can do the same thing. We are used to dealing with the set of real numbers, but in this we only need to worry about the set of characters inside of our alphabet.</p>
<p>Let A = 910897038977002. We were given this number and it is the one we are trying to crack.</p>
<p>So if we look at <code>A - hash('aaaaaaaaa')</code> there are three possible outcomes. The result is bigger than 0, smaller than 0 or exactly 0.</p>
<p>So let’s talk about each one of those possibilities.</p>
<ul>
<li>If the answer is 0 we are finished, and we have found our solution.</li>
<li>If the answer here is less than 0 then there is no possible solution.</li>
<li>If the answer here is more than 0 then we need to continue looking for solutions.</li>
</ul>
<p>Our job is to traverse through every letter from beginning to end and find the highest letter possible for each power. This will give us an answer if there is a solution. In this case <code>A - hash('aaaaaaaaa') &gt; 0</code> but <code>A - hash('caaaaaaaa') &lt; 0</code> so we know the first letter must begin with an <code>a</code>. If this doesn’t make sense then allow me to explain differently.</p>
<p>Let’s play this algorithm out but imagine we are dealing with just simple normal numbers. We have the answer 422. We want to find the number 422. So we start with the lowest number 000. Next we ask ourselves a series of questions in this order</p>
<p>000 &lt; 422 (yes)
100 &lt; 422 (yes)
200 &lt; 422 (yes)
300 &lt; 422 (yes)
400 &lt; 422 (yes)
500 &lt; 422 (no)</p>
<p>Now on to the next power</p>
<p>410 &lt; 422 (yes)
420 &lt; 422 (yes)
430 &lt; 422 (no)</p>
<p>Now to the smallest power</p>
<p>421 &lt; 422 (yes)
422 = 422 (solution found)</p>
<p>This gives you an idea of the alogrithm we are using but the only difference is that we make use of the <code>hash(string)</code> function each time we do our comparison. This is essentially much like prime factorization, especially since the number 37 is a prime number and we are subtracting powers of 37 away from the answer in order to find our reverse hash. So let’s look at the implementation</p>
<pre><code>function reverse_hash(A)
{
    var answer = 'aaaaaaaaa';

    // subtract away the max amount possible without going negative
    // we start with 'aaaaaaaaa' and work our way up, one letter at
    // a time (from beginning 'a').
    for (var column = 0; column &lt; 9; column++)
    {
        var charAt = 0;
        var next = answer;

        // we cannot ever go more than the base of our alphabet
        while (charAt &lt; base + 1)
        {
            // replace the letters at the given column
            next = next.replaceAt(column, alphabet[charAt++]);

            // we did not go negative so we can update our answer
            if (A - hash(next) &gt;= 0)
            {
                answer = next;
            }
            else
            {
                break; // go to the next column in answer
            }
        }
    }

    return answer;
}
</code></pre>
<p>Finally I add a helper function to the String.prototype to replace characters. I normally wouldn’t mess with String.prototype but since I am not using this application on a large scale it doesn’t matter.</p>
<pre><code>String.prototype.replaceAt = function(index, letter)
{
    return this.substr(0, index)
        + letter
        + this.substr(index+letter.length);
}
</code></pre>
<p>To find the reversed hash answer in just milliseconds we can use our new <code>reverse_hash</code> command.</p>
<pre><code>var answer = reverse_hash(910897038977002);
</code></pre>
<p>And that is it. Oh and if you are wondering what the answer is: <code>asparagus</code> There is probably another 20 ways to solve this problem but this is the way I chose. Did you actually make it here? Wow… I figured I would have bored most people off by this line.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/06/2014-06-25_cracking-fogcreek/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Laravel Blade @var extension]]></title>
        <id>/2014/07/2014-07-23_laravel-blade-var-extension/</id>
        <link href="/2014/07/2014-07-23_laravel-blade-var-extension/"/>
        <updated>2014-07-23T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[After 2 years of using Laravel, I’d never been a huge fan of blade. When I first met Taylor Otwell at Genghis grill, I probably insulted him by saying:

“I hate blade” - me to Taylor Otwell

]]></summary>
        <content type="html"><![CDATA[<p>After 2 years of using Laravel, I’d never been a huge fan of blade. When I first met Taylor Otwell at Genghis grill, I probably insulted him by saying:</p>
<blockquote>
<p>“I hate blade” - me to Taylor Otwell</p>
</blockquote>
<!-- more -->
<p>However, with the new job I’ve had to dig into blade and blade has really grown on me. I’ve been working on extending Blade functionality to do other neat things and during all this, an idea came to me to treat blade <code>@blocks</code> like front matter. This isn’t something you’d normally want to do (and we don’t do it for work projects) but let’s do it anyway. Why? <strong>Because we can.</strong> I’m going to create a <code>@var</code> extension that allows me to register variables inside of my blade views instead of a controller.</p>
<p>{% include_file media/laravel-blade-var-extension/snippet1.txt %}</p>
<p>So first we have to register our new <code>@var</code> pattern by using Blade’s extend method.</p>
<pre><code>Blade::extend(function($view, $compiler)
{
    $pattern = &quot;/(?&lt;!\w)(\s*)@var\(\s*'([A-Za-z1-9_]*)',\s*(.*)\)/&quot;;

    $view = preg_replace($pattern, &quot;&lt;?php \$$2 = resolve($3) ?&gt;&quot;, $view);

    return $view;
});
</code></pre>
<p>What does this do? It basically just replaces those variables with lines like this</p>
<pre><code>&lt;?php $user = resolve('User.paginate') ?&gt;
&lt;?php $userList = resolve('User.lists', ['first_name', 'id']) ?&gt;
</code></pre>
<p>So what does this resolve function do? It handles resolving the string <code>class.method</code> for us using Laravel’s IoC container.</p>
<pre><code>function resolve($name, $args = array())
{
	$parts = explode('.', $name);

	$obj = App::make($parts[0]);

	return call_user_func_array(array($obj, $parts[1]), $args);
}
</code></pre>
<p>And there we have it. A simple way to inject variables in your Blade views. I am not using this at the moment so it’s only a proof of concept. One nice thing about this approach is that you can easily see all the registered variables inside of your view and know where they come from. But this approach doesn’t allow you the flexibility to re-use views with different variables - which is a primary reason why we use controllers - separation of concerns!</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/07/2014-07-23_laravel-blade-var-extension/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Access localhost:8000 Anywhere (ngrok)]]></title>
        <id>/2014/08/2014-08-27_access-localhost-8000-from-anywhere/</id>
        <link href="/2014/08/2014-08-27_access-localhost-8000-from-anywhere/"/>
        <updated>2014-08-27T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Lately, I was given the task to write some php classes with Laravel that make use of Zencoder api. The way Zencoder works is I create a new encoding job and during that request I tell Zencoder emails and url locations to send notifications when that job is finished.
]]></summary>
        <content type="html"><![CDATA[<p>Lately, I was given the task to write some php classes with Laravel that make use of Zencoder api. The way Zencoder works is I create a new encoding job and during that request I tell Zencoder emails and url locations to send notifications when that job is finished.</p>
<!-- more -->
<p>So if I make a Guzzle request to Zencoder</p>
<pre><code>$data = [
	'input' : $fileName,
	'notifications': [
		'foo@bar.com',						// email when finished
		url('/api/notifications/zencoder'), // post finished job
	],
];

$client = new GuzzleHttp\Client();

$response = $client-&gt;get('https://app.zencoder.com/api/v2/jobs', [
	'headers' =&gt; ['Zencoder-Api-Key' =&gt; $apiKey],
	'body' =&gt; json_encode($data),
]);
</code></pre>
<p>Once this job completes encoding the video, I should expect to get a notification sent to my email address and also Zencoder will send a POST with the job output data to my <code>$callBackUrl</code>. However, <code>http://localhost:8000/api/notifications/zencoder</code> is not a valid url to ping so Zencoder ends up throwing me a HTTP error - 422 Unaccessible Entity.</p>
<p>Now I can use <a href="https://ngrok.com/">ngrok</a> to create a proxy site for my local server. When developing I don’t use apache or nginx, rather I just serve files using</p>
<pre><code>php artisan serve
</code></pre>
<p>This gets me a site up I can access on <a href="http://localhost:8000">http://localhost:8000</a>. The next part is to just run</p>
<pre><code>ngrok 8000
</code></pre>
<p>I’m ready to go now. This gives me a site like</p>
<p><a href="http://773andwlq13.ngrok.com">http://773andwlq13.ngrok.com</a></p>
<p>Now I can <code>dd(Input::all())</code> in the controller for the route <code>/api/notifications/zencoder</code> and see what sample data I should expect from Zencoder. Later I found this in the docs but it’s nice to be able to test the real deal.</p>
<p>This also gives programmers the ability to show clients the real site without setting up a staging server. It’s super easy. ngrok is what I settled with but there are other applications that accomplish the same thing. Here is a list.</p>
<ul>
<li><a href="https://ngrok.com/">ngrok</a></li>
<li><a href="https://pagekite.net/">PageKite</a></li>
<li><a href="https://forwardhq.com/">Forward</a></li>
<li><a href="http://proxylocal.com/">ProxyLocal</a></li>
<li><a href="http://www.browserstack.com/">BrowserStack</a></li>
</ul>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/08/2014-08-27_access-localhost-8000-from-anywhere/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Searching Files With Laravel]]></title>
        <id>/2014/09/2014-09-09_searching-files-with-laravel/</id>
        <link href="/2014/09/2014-09-09_searching-files-with-laravel/"/>
        <updated>2014-09-09T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[How easy is it to search for files with laravel? Using Symfony’s Finder class it is really, really easy!
Say I wanted to recursively search a directory for all the files with fish in the name, over 100KB in size and had some text: ‘awesome’ inside of the file. That would be a tough one with just native php but never to fear, Fabien Potencier is here. Oh and I forgot to mention, I only want files that have been modified since yesterday. Oh and can you sort those by name for me? Thanks.
]]></summary>
        <content type="html"><![CDATA[<p>How easy is it to search for files with laravel? Using <a href="http://symfony.com/doc/current/components/finder.html">Symfony’s Finder</a> class it is really, really easy!</p>
<p>Say I wanted to recursively search a directory for all the files with fish in the name, over 100KB in size and had some text: ‘awesome’ inside of the file. That would be a tough one with just native php but never to fear, <a href="http://fabien.potencier.org">Fabien Potencier</a> is here. Oh and I forgot to mention, I only want files that have been modified since yesterday. Oh and can you sort those by name for me? Thanks.</p>
<!-- more -->
<p>Since Laravel piggybacks off so many Symfony components, we can already use this Finder class in any Laravel application like so:</p>
<pre><code>$finder = new Symfony\Component\Finder\Finder();

$finder-&gt;files()
    -&gt;in($dir)
    -&gt;size('&lt; 100K')
    -&gt;name(&quot;{$search}&quot;)
    -&gt;date('since yesterday')
    -&gt;contains('awesome');

foreach ($finder as $file)
{
	print $file-&gt;getRealpath();
}
</code></pre>
<p>Bye, bye <a href="http://php.net/manual/en/class.recursivedirectoryiterator.php">RecursiveDirectoryIterator</a>, may we never meet again! If I ever meet Fabien I’m likely to get a restraining order slapped on me after I give him a big hug and kiss.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/09/2014-09-09_searching-files-with-laravel/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Moments of Programmer Clarity]]></title>
        <id>/2014/09/2014-09-10_moments-of-programmer-clarity/</id>
        <link href="/2014/09/2014-09-10_moments-of-programmer-clarity/"/>
        <updated>2014-09-10T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[We all love moments of clarity. That moment when things just click. I’ve had a few of these in my life time and now I’d like to share one with you. What feels like a very very long time ago I watched Brian Mann’s backbone on rails series. I’m a bit of a tight ass so it was a big deal for me to spend money on these videos but I’m glad I did. During the hour long easy to follow explanation of how Mann organizes his application, it was a single picture that made things click. Ah… that prized moment of clarity. I’ll share the picture with you.
]]></summary>
        <content type="html"><![CDATA[<p>We all love moments of clarity. That moment when things just click. I’ve had a few of these in my life time and now I’d like to share one with you. What feels like a very very long time ago I watched Brian Mann’s <a href="http://www.backbonerails.com/series/engineering_single_page_apps">backbone on rails</a> series. I’m a bit of a tight ass so it was a big deal for me to spend money on these videos but I’m glad I did. During the hour long easy to follow explanation of how Mann organizes his application, it was a single picture that made things click. Ah… that prized moment of clarity. I’ll share the picture with you.</p>
<!-- more -->
<img src="/media/moments-of-programmer-clarity/marionette-video.png" alt="A Momemnt of Clarity">
<p>So a picture is worth a thousand words but without some context here you probably don’t understand the big deal about this picture. You probably look at it and brush it off like some outdated UML diagram or math equation. Allow me to explain how this picture changed my thinking. Before watching the Mann videos, I had been thinking in MVC. I used Rails and Laravel models, views, and controllers. Anything else was pure chaos. Oh, how I desired to confirm to convention over configuration. I would fight tooth and nail for convention over configuration. However, the problem I kept running into though was as my applications grew, so did my models, views and controllers.</p>
<p>During my Java programming days I had usually thrown stuff in the <code>src/</code> directory with little thought. I whimsically named classes and they often had many responsibilities. The results were typically large bloated classes that I dreaded visiting. I think that is why, partially, when I got bit by the MVC bug, I fell hard. I was in love with MVC. It was the true path to organizing my application. It just made sense and gave my programming direction. This is where the database stuff goes, this is where the routes go, this is where the html goes and I just sprinkled the business logic in controllers and wherever it needed to go. So let’s look at our image again.</p>
<img src="/media/moments-of-programmer-clarity/marionette-video.png" alt="A Moment of Clarity">
<p>In this application we have three parts Users, Leads and Appointments. Using Rails we could scaffold out some CRUD (create-read-update-delete) for the models, views, and controllers but it is rarely that simple. Notice in this example, when you show a user you need to view Users and Leads and also list Appointments for that user. This is how real world applications work. Despite our best attempts to separate models, views and controllers into CRUD actions, things will over time end up all mixed and mangled together.</p>
<h3>Here is the lesson learned from my moment of clarity.</h3>
<h2>When you have a complex problem get help</h2>
<p>It’s simple when you think about it. If your controller is taking on too much water (responsibility), the controller can ask for help from other class. <strong>Delegate</strong> the hard work. In this case, Brian goes on to say we should only ask for help from our parents. What is a parent? It is the successor who reigns over your family tree. In the case of this example image: Users and Application are parents to Users.Show and Application.List methods respectively. This means that <code>Users.Show</code> must not know about <code>Appointments.List</code>.Instead Users.Show communicates with the global message broker that his parent provides to him, <code>App.request('appointment.listings')</code>. <code>Users.Show</code> has no clue who will answer the <code>appointment.listings</code> request but <strong>someone</strong> will.</p>
<p>Meanwhile in Cyberland, the Appointment component has already told it’s parent (App) that he will handle any requests for <code>appointment.listings</code> and thus later he receives an anonymous call from User component and responds to it. This is all in the context of Marionette, but the concept applies across all programming languages: <strong>when dealing with complex issues, ask for help.</strong> Let’s illustrate our principle using a Laravel controller</p>
<pre><code>require_once('./lib/Stripe.php');

class UserController extends Controller
{
	public function store()
	{
		$rules = [
			'email' =&gt; 'required|email|unique:users:email',
			'password' =&gt; 'required|min:8|confirmed',
			'first_name' =&gt; 'required',
			'last_name' =&gt; 'required',
		];

		$validator = Validator::make(Input::all(), $rules);

		if ($validator-&gt;fails())
		{
			return Redirect::back()-&gt;withErrors($validator)-&gt;withInput();
		}

		Stripe::setApiKey(&quot;sk_test_BQokikJOvBiI2HlWgH4olfQ2&quot;);

		Stripe_Plan::create(array(
			&quot;amount&quot; =&gt; 2000,
			&quot;interval&quot; =&gt; &quot;month&quot;,
			&quot;name&quot; =&gt; &quot;Amazing Gold Plan&quot;,
			&quot;currency&quot; =&gt; &quot;usd&quot;,
			&quot;id&quot; =&gt; &quot;gold&quot;)
		);

		$customer = Stripe_Customer::create(array(
			&quot;card&quot; =&gt; Input::get('stripeToken'),
			&quot;plan&quot; =&gt; &quot;gold&quot;,
			&quot;email&quot; =&gt; Input::get('email'))
		);

		$user = new User;

		$user-&gt;email = Input::get('email');
		$user-&gt;password = Input::get('password');
		$user-&gt;first_name = Input::get('first_name');
		$user-&gt;last_name = Input::get('last_name');
		$user-&gt;stripe_id = $customer-&gt;id;
		$user-&gt;save();

		$interests = new UserInsterest;

		$interests-&gt;user_id = $user-&gt;id;
		$interests-&gt;football = Input::get('football_checked', false);
		$interests-&gt;basketball = Input::get('basketball_checked', false);
		$interests-&gt;baseball = Input::get('baseball_checked', false);
		$interests-&gt;mma = Input::get('mma_checked', false);
		$interests-&gt;soccer = Input::get('soccer_checked', false);
		$interests-&gt;golf = Input::get('golf_checked', false);
		$interests-&gt;tennis = Input::get('tennis_checked', false);

		$interests-&gt;save();

		$accounts = UserSocialAccount::where('email', $user-&gt;email)-&gt;get();

		foreach ($accounts as $account)
		{
			$account-&gt;user_id = $user-&gt;id;
			$account-&gt;save();
		}

		$data = [
			'user' =&gt; $user,
			'some_message' =&gt; 'You are awesome!',
		];

		Mail::send('emails.welcome', $data, function($message)use ($user)
		{
		  $message-&gt;from('please-reply@yoursite.com', 'Some Dude');
		  $message-&gt;to($user-&gt;email, $user-&gt;first_name)-&gt;subject('Thanks for signing up!');
		});

		Session::flash('message', 'Welcome to the site!');
		return Redirect::to('/');
	}
}
</code></pre>
<p>There is a ton to look at here. This controller is doing too much work on his own. The code all works as expected but it is hard to work with and troubleshoot. Thus when the boss asks you to add that extra cool feature - you know… the one where if a user picks certain interests then they should get different types of emails - where do we shove that logic? The code keeps piling up in one spot. So let’s re-factor this code. First I’m going to look for <code>return</code> statements. <strong>Next I’m going to make a statement</strong>: <em>returning a redirect, response and setting session messages is the primary responsibility of a controller</em>. The secondary responsibility is to reach out to his friend that best handles the job for this particular action (route). Thus our <code>UserController</code> transforms into this:</p>
<pre><code>class UserController extends Controller
{
	public function store()
	{
		try
		{
			$user = Users::createNewUser(Input::all());
		}
		catch(ValidationException $e)
		{
			return Redirect::back()-&gt;withErrors($e-&gt;getValidator())-&gt;withInput();
		}

		Session::flash('message', &quot;Welcome to the site {$user-&gt;first_name}&quot;);

		return Redirect::to('/');
	}
}
</code></pre>
<p>All we did was ask for help from another class called <code>Users</code>, specifically the <code>createNewUser</code> method. To handle validation we use exception handling but if you don’t like the way this looks then you could get rid of the <code>try ... catch</code> statement and replace it with an <code>if</code> statement. Because validation is something that is done so often in an application, I like to use a little Laravel magic and register an error handler for validation exceptions. I’ll register this error handler somewhere in the bootstrapping of Laravel (i.e. app/global/start.php).</p>
<pre><code>App::error(function(ValidationException $e)
{
	return Redirect::back()-&gt;withErrors($e)-&gt;withInput();
});
</code></pre>
<p>And viola! Now we can remove the <code>try ... catch</code> from our controllers.</p>
<pre><code>class UserController extends Controller
{
	public function store()
	{
		$user = Users::createNewUser(Input::all());

		Session::flash('message', &quot;Welcome to the site {$user-&gt;first_name}&quot;);

		return Redirect::to('/');
	}
}
</code></pre>
<p>Of course I can always catch the exception in the controller if I need fine grained special handling but for the most part, when I get a validation errors, I typically just redirect the user back with error messages and have them fix their form input so this is a pretty sensible default for the entire <code>App</code>.</p>
<p>To wrap things up the idea of seeking help from close friends is one of the basis of <a href="http://en.wikipedia.org/wiki/Law_of_Demeter">Demeter’s Law</a>. I had heard of the Law of Demeter in conversations, but never really gave it much thought when developing. Sometimes really good advise only makes its way into my brain after I fail to follow said advise and a few fails later I can have an epiphany.</p>
<p><em><strong>When you are faced with complex problem, seek help from others that you trust</strong></em></p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/09/2014-09-10_moments-of-programmer-clarity/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Documentation with PHP]]></title>
        <id>/2014/10/2014-10-30_documentation-in-php/</id>
        <link href="/2014/10/2014-10-30_documentation-in-php/"/>
        <updated>2014-10-30T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Today I fiddled around generating docs for a company package. There are a lot of doc generators out there, here are a few and their examples:

Sami [example]
Apigen [example]
PHP Documentor [example]
PHP DOX [example]
PHP Rocco [example]
Pinocchio [example]
Doxygen [example]
and a few others

I played around with some of these. I like the approach of annotated source code but sometimes it is more useful to have api documentation. Annotated source code is cool because you can follow along line by line and really uncover the guts of a library. When I’m looking for public methods I don’t want to have to sift through annotated source code.
]]></summary>
        <content type="html"><![CDATA[<p>Today I fiddled around generating docs for a company package. There are a lot of doc generators out there, here are a few and their examples:</p>
<ul>
<li><a href="https://packagist.org/packages/sami/sami">Sami</a> [<a href="http://laravel.com/api/4.2/">example</a>]</li>
<li><a href="http://apigen.org">Apigen</a> [<a href="http://www.doctrine-project.org/api/orm/2.4">example</a>]</li>
<li><a href="http://www.phpdoc.org">PHP Documentor</a> [<a href="http://demo.phpdoc.org/Clean">example</a>]</li>
<li><a href="http://phpdox.de">PHP DOX</a> [<a href="http://phpdox.de/demo/phpDox/index.xhtml">example</a>]</li>
<li><a href="http://phrocco.info">PHP Rocco</a> [<a href="http://phrocco.info/docs/Phrocco.html">example</a>]</li>
<li><a href="https://geekli.st/ncuesta/repos/pinocchio">Pinocchio</a> [<a href="http://ncuesta.github.io/pinocchio/docs/index.html">example</a>]</li>
<li><a href="http://www.stack.nl/~dimitri/doxygen">Doxygen</a> [<a href="http://doc.cgal.org/4.2/CGAL.CGAL/html/index.html">example</a>]</li>
<li><a href="https://packagist.org/search/?q=phpdoc">and a few others</a></li>
</ul>
<p>I played around with some of these. I like the approach of <a href="http://marionettejs.com/annotated-src/backbone.marionette">annotated source code</a> but sometimes it is more useful to have <a href="http://marionettejs.com/docs/current">api documentation</a>. Annotated source code is cool because you can follow along line by line and really uncover the <em>guts</em> of a library. When I’m looking for public methods I don’t want to have to sift through annotated source code.</p>
<!-- more -->
<h2>Using composer to install doc generators</h2>
<pre><code>&quot;require-dev&quot;: {
    &quot;mockery/mockery&quot;: &quot;dev-master&quot;,
    &quot;phpunit/phpunit&quot;: &quot;*&quot;,
    &quot;sami/sami&quot;: &quot;*&quot;,
    &quot;rossriley/phrocco&quot;: &quot;dev-master&quot;,
    &quot;apigen/apigen&quot;: &quot;*&quot;
    &quot;phpdocumentor/phpdocumentor&quot;: &quot;2.*&quot;,
    &quot;phpdocumentor/template-zend&quot;: &quot;*&quot;
},
</code></pre>
<p>When you attempt to <code>composer update</code> you may have issues with phpdocumentor, if so, read next section.</p>
<h2>PHP Documentor</h2>
<p>After running composer update it told me I had to install ext-xml so after running <code>apt-get install php5-xml</code> I attempted another composer update and about 2 minutes into fetching stuff I was presented with this garbage:</p>
<pre><code>- Installing zetacomponents/base (1.9)
Downloading: connection...
Could not fetch https://api.github.com/repos/zetacomponents/Base/zipball/f20df24e8de3e48b6b69b2503f917e457281e687, enter your GitHub credentials to go over the API rate limit
The credentials will be swapped for an OAuth token stored in /home/K.D./.composer/auth.json, your password will not be stored
To revoke access to this token you can visit https://github.com/settings/applications
Username:
</code></pre>
<p>Because I didn’t want to give composer my username and password to create an Oauth token, I exited out and told composer to prefer source to get around this issue. Php documentor warns too that there are a lot of dependencies to download so it is likely that I’m just downloading too much. I decided to go a different approach and download the 30 megabyte phar file from <a href="http://www.phpdoc.org/phpDocumentor.phar">http://www.phpdoc.org/phpDocumentor.phar</a>.</p>
<p>After downloading the phar I ran it and it gave the this error:</p>
<pre><code>PHP Fatal error:  Class 'phpDocumentor\Application' not found in phar:///home/K.D./.bin/phar/phpDocumentor.phar/src/phpDocumentor/Bootstrap.php on line 63
</code></pre>
<p>So after scouting around some, I found a link on phpDocumentors website that said, “if you have any issues consult: <a href="http://silex.sensiolabs.org/doc/phar.html#pitfalls">http://silex.sensiolabs.org/doc/phar.html#pitfalls</a>”. After looking at this website the first line states:</p>
<pre><code>Using the Silex phar file is deprecated. You should use Composer instead to install Silex and its dependencies or download one of the archives.
</code></pre>
<p>Well… shit, I guess I’m back to the original plan: using composer to install phpDocumentor. So again I attempt <code>composer update</code> and put in my credentials and lo and behold it installs. Now let’s see if this bad boy was worth all the trouble.</p>
<pre><code>vendor/bin/phpdoc -d src/ -t public/phpdocs
</code></pre>
<p>The outcome was pretty nice looking. The page is responsive and contained classes. It even had a reports and charts containing things like errors. When you forget place a doc block over a method it produces an error in phpDocumentor, which is pretty cool.</p>
<h2>Apigen</h2>
<pre><code>$ php vendor/bin/apigen generate --source src/ --destination public/apigen
ApiGen 2.8.0
------------
Scanning /src
[===============================================================&gt;] 100.00%  14MB
Found 207 classes, 0 constants, 0 functions and other 5 used PHP internal classes
Documentation for 207 classes, 0 constants, 0 functions and other 5 used PHP internal classes will be generated
Using template config file /vendor/apigen/apigen/templates/default/config.neon
Generating to directory public/apigen
[&gt;                                                               ]   0.77%  19MB
The class SoftDeletingTrait is in use but has not been found in the defined sources.
</code></pre>
<p>Uh oh… it doesn’t know what SoftDeletingTrait is because that is Laravel specific class that is being used in one of my classes. So how to get this thing to work? I started by trying a config file. The SoftDeletingTrait class is in the vendor/ folder so maybe I could exclude that folder but apigen would be smart enough to scan that folder for missing links.</p>
<p>php vendor/bin/apigen generate --source “src,vendor” --destination public/apigen --skip-doc-path=“vendor”</p>
<pre><code>ApiGen 2.8.0
------------
Scanning
 /home/K.D./workspace/lbm/package-devise/src
 /home/K.D./workspace/lbm/package-devise/vendor
[=======&gt;                                                        ]  13.05% 116MB
Used 91% of the current memory limit, please increase the limit to generate the whole documentation.
</code></pre>
<p>Crap. Well… I’m off to edit <code>/etc/php5/cli/php.ini</code> and I up the memory limit from 128MB to 1GB. That should be enough right?</p>
<pre><code>memory_limit = 1024M
</code></pre>
<p>After running for some a few minutes I still ended up getting the same error.</p>
<pre><code>The class SoftDeletingTrait is in use but has not been found in the defined sources.
</code></pre>
<p>So this has all been in vain. Perhaps there is some way to tell apigen to forget about these external classes? The documentation is not very helpful but I do see an <code>--internal</code> flag. That doesn’t help though. After googling some I don’t find any helpful material save <a href="https://github.com/apigen/apigen/issues/158">one github request</a> that looks related but has been ignored and closed. So I give up on this one - it has far exceeded the 5-10 rule anyway. So Apigen is out.</p>
<h2>Sami</h2>
<p>This is the same documentor that Taylor uses for Laravel api so it was high on my list of documentors to checkout. I started by creating a configuration file (in my project root) called <code>sami.php</code>:</p>
<p>{% code %}
use Sami\Sami;
use Symfony\Component\Finder\Finder;</p>
<p>$iterator = Finder::create()
-&gt;files()
-&gt;name(’*.php’)
-&gt;in(<strong>DIR</strong> . ‘/src’);</p>
<p>return new Sami($iterator, array(
‘title’                =&gt; ‘Devise’,
‘build_dir’            =&gt; <strong>DIR</strong>. ‘/public/docs’,
‘cache_dir’            =&gt; <strong>DIR</strong>. ‘/.sami-cache’,
‘default_opened_level’ =&gt; 2,
));
{% endcode %}</p>
<p>Apparently you can also do themes with Sami. The quickstart docs aren’t clear on themeing but I could create a directory called <code>mytheme</code> and put a manifest.xml in it and then place <code>'template' =&gt; 'mytheme'</code> into the array containing title, build_dir, cache_dir, and default_opened_level. I didn’t need to go into themeing just yet as I’m just testing things out so I just left the theme alone (as default). To run get some documentation I then ran:</p>
<pre><code>vendor/bin/sami.php update sami.php
</code></pre>
<p>This produced some really nice looking documentation. A downside to sami is that because it is all contained with an iframe, it is difficult to share links. If you right click on a frame page and open in new tab you can use that link to send to someone, <em>but</em> you loose your cool sidebar (because I’ll say it again… it is an html frame). I didn’t even know we did frames anymore. I haven’t produced one since about two decades ago.</p>
<h2>PHP Rocco</h2>
<p>I’ve used used docco (node) in the past but in this specific case, annotated source really didn’t provide much value. I wanted to see how easy it was to generate though so I spent the 5 minutes and got it working easily. If we needed annotated source this would be a no-brainer.</p>
<pre><code>phrocco -i src/ -o public/annotated
</code></pre>
<h2>Using composer to generate your docs</h2>
<p>We ended up using but it’s kind of a pain in the ass to remember to type all this stuff. It would be nice if we could just type: <code>make docs</code>. How about the next best thing: <code>composer docs</code>. We can create this script alias using composer:</p>
<pre><code>&quot;scripts&quot;: {
  &quot;docs&quot; : &quot;vendor/bin/sami.php update sami.php&quot;
},
</code></pre>
<p>Now we’ve got our <code>composer docs</code> and all is well. Not to toot my own horn, but this is a pretty cool setup. <strong>Toot toot.</strong></p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2014/10/2014-10-30_documentation-in-php/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git Monitor]]></title>
        <id>/2015/02/2015-02-19_git-monitor/</id>
        <link href="/2015/02/2015-02-19_git-monitor/"/>
        <updated>2015-02-19T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[When you want to monitor a github repo, you can setup travis-ci, hudson or bamboo continous integration (CI) server. A problem arrises though. What if you want to run scripts on a server that is behind a firewall? The CI server may not be able to access this private server behind your protected network.
This is where gitmon is used. We can monitor the git repository for changes and then when things do change we can run a changed script. The changed script is placed within the repository itself so developers can work with it. This changed script can email people, run bash commands, whatever you want it to do.
]]></summary>
        <content type="html"><![CDATA[<p>When you want to monitor a github repo, you can setup <a href="https://travis-ci.org">travis-ci</a>, <a href="http://hudson-ci.org/">hudson</a> or <a href="https://www.atlassian.com/software/bamboo">bamboo</a> continous integration (CI) server. A problem arrises though. What if you want to run scripts on a server that is behind a firewall? The CI server may not be able to access this private server behind your protected network.</p>
<p>This is where gitmon is used. We can monitor the git repository for changes and then when things <strong>do change</strong> we can run a <em>changed</em> script. The changed script is placed within the repository itself so developers can work with it. This changed script can email people, run bash commands, whatever you want it to do.</p>
<!-- more --> 
<p>You can see the <a href="https://github.com/kdocki/gitmon">gitmon script on github</a>. Pull requests are welcome.</p>
<h3>Usage</h3>
<p>You’ll need a file that has things gitmon should do whenever the repo is updated.</p>
<p><code>vi path/to/git/repo/.gitmon/changed</code></p>
<pre><code>#!/bin/bash

composer install
mail bob@gmail.com &quot;it updated&quot;
</code></pre>
<p>Next setup a crontab job</p>
<p><code>crontab -e</code></p>
<pre><code>*/2 * * * * gitmon path/to/git/repo
</code></pre>
<h3>Bash code</h3>
<p>Here is the script in it’s entirety.</p>
<pre><code>#!/bin/bash
#
# @author kelvinlbm.co
#
# first you will need to setup a file that tells
# gitmon what to do anytime this git repository
# is updated
#
#   your/path/to/git/repo/.gitmon/changed
#
# next, to run script
#
#   ./gitmon path/to/git/repo
#
# lastly you'll likely want to add this to crontab
# to run gitmon every 2 minutes to check for updates
#
#   crontab -e
#   */2 * * * * gitmon path/to/git/repo



########################################################
# variables that we need for this script to work
########################################################
SCRIPT_DIR=&quot;$( cd &quot;$( dirname &quot;${BASH_SOURCE[0]}&quot; )&quot; &amp;&amp; pwd )&quot;
MONITOR_DIR=&quot;$1&quot;
MONITOR_BRANCH=&quot;HEAD&quot;
GITMON_DIR=&quot;.gitmon&quot;
HISTORY_FILE=&quot;$GITMON_DIR/local.commit&quot;;
LOCK_FILE=&quot;$GITMON_DIR/running.lock&quot;;
ONCHANGED_FILE=&quot;$GITMON_DIR/changed&quot;;



#######################################################
# show usage if there aren't any arguments from user
#######################################################
if [ -z &quot;$MONITOR_DIR&quot; ]; then
  echo &quot;usage:&quot;
  echo &quot;$0 path/to/git/repository&quot;
  exit;
fi



########################################################
# ensure that this directory has .git repo in it
########################################################
if [ ! -d &quot;$MONITOR_DIR/.git&quot; ]; then
  echo &quot;Could not find .git in: '$MONITOR_DIR'&quot;
  exit
fi



#######################################################
# no point in running if we don't have onchanged file
#######################################################
if [ ! -f &quot;$MONITOR_DIR/$ONCHANGED_FILE&quot; ]; then
  echo &quot;You need to create on changed script: $MONITOR_DIR/$ONCHANGED_FILE&quot;
  exit
fi


########################################################
# only run this script when lock file doesn't exist
########################################################
cd $MONITOR_DIR

if [ -f $LOCK_FILE ]; then exit; fi;
touch $LOCK_FILE



########################################################
# find the last local and remote commit so we can
# compare them and see if they are different
########################################################
HISTORY=($(git ls-remote --quiet))

LOCAL_BRANCH=$(git symbolic-ref -q HEAD)
LOCAL_BRANCH=${LOCAL_BRANCH##refs/heads/}
LOCAL_BRANCH=${LOCAL_BRANCH:-HEAD}
LOCAL_COMMIT=$(git log -n 1 $LOCAL_BRANCH --pretty=format:&quot;%H&quot;)

REMOTE_BRANCH=$(git symbolic-ref -q HEAD)
for ((i=0; i &lt; ${#HISTORY[*]}; i+=2)) do
  if [[ &quot;${HISTORY[i+1]}&quot; == &quot;$REMOTE_BRANCH&quot; ]]; then
    REMOTE_COMMIT=&quot;${HISTORY[i]}&quot;
  fi
done



########################################################
# if no remote commit is set then we need to bail
########################################################
if [ -z &quot;$REMOTE_COMMIT&quot; ]; then
  echo &quot;Could not find remote branch commit for $REMOTE_BRANCH&quot;
  rm $LOCK_FILE
  cd $SCRIPT_DIR
  exit
fi



########################################################
# compares the LOCAL_COMMIT with REMOTE_COMMIT and if
# things have changed then onChange function is called
########################################################
if [ &quot;$LOCAL_COMMIT&quot; != &quot;$REMOTE_COMMIT&quot; ]; then
  . $ONCHANGED_FILE &quot;$LOCAL_BRANCH&quot; &quot;$REMOTE_BRANCH&quot; &quot;$LOCAL_COMMIT&quot; &quot;$REMOTE_COMMIT&quot;
fi



########################################################
# remove the lock file now that we are done with script
########################################################
rm $LOCK_FILE
cd $SCRIPT_DIR
</code></pre>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2015/02/2015-02-19_git-monitor/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Get the Laravel 5 App Namespace]]></title>
        <id>/2015/03/2015-03-31_how-to-get-laravel5-app-namespace/</id>
        <link href="/2015/03/2015-03-31_how-to-get-laravel5-app-namespace/"/>
        <updated>2015-03-31T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Laravel 5 gives us a nifty little command to change our application’s namespace. Out of the box the default namespace is App. To change it, we simply run:
php artisan app:name Horsefly

However, once you register your app namespace, how do you get it later? Laravel doesn’t save it in config(‘app.name’) or anything like that.
]]></summary>
        <content type="html"><![CDATA[<p>Laravel 5 gives us a nifty little command to change our application’s namespace. Out of the box the default namespace is <code>App</code>. To change it, we simply run:</p>
<pre><code>php artisan app:name Horsefly
</code></pre>
<p>However, once you register your app namespace, how do you get it later? Laravel doesn’t save it in <em>config(‘<a href="http://app.name">app.name</a>’)</em> or anything like that.</p>
<!-- more --> 
<p>I had this question come up at work, so I searched for an example. After a few minutes of searching the Laravel source code, specifically <em>Illuminate \ Foundation \ Console \ AppNameCommand.php</em>. There I discovered a trait called <em>AppNamespaceDetectorTrait</em>.</p>
<blockquote>
<p>Speaking of traits, did you know you can find a list of all the laravel traits here? <a href="http://laravel.com/api/5.0/traits.html">http://laravel.com/api/5.0/traits.html</a></p>
</blockquote>
<p>By examining the <em>AppNamespaceDetectorTrait</em> we can find out exactly how it works.</p>
<p>{% codeblock   <a href="https://github.com/laravel/framework/blob/5.0/src/Illuminate/Console/AppNamespaceDetectorTrait.php">https://github.com/laravel/framework/blob/5.0/src/Illuminate/Console/AppNamespaceDetectorTrait.php</a> AppNamespaceDetectorTrait %}
trait AppNamespaceDetectorTrait {</p>
<pre><code>/**
 * Get the application namespace from the Composer file.
 *
 * @return string
 *
 * @throws \RuntimeException
 */
protected function getAppNamespace()
{
	$composer = json_decode(file_get_contents(base_path().'/composer.json'), true);

	foreach ((array) data_get($composer, 'autoload.psr-4') as $namespace =&gt; $path)
	{
		foreach ((array) $path as $pathChoice)
		{
			if (realpath(app_path()) == realpath(base_path().'/'.$pathChoice)) return $namespace;
		}
	}

	throw new RuntimeException(&quot;Unable to detect application namespace.&quot;);
}
</code></pre>
<p>}
{% endcodeblock %}</p>
<p>From the looks of it, this script loops through the psr-4 namespaces in our project’s <em>composer.json</em>. We can use this trait but I’d personally rather copy and paste the code into a new class. I mean, this trait isn’t doing anything special that we can’t do ourselves. Plus, having it in our class allows us to get a little more flexible with this concept Taylor has provided in his code. The concept is, we can search the composer.json for certain namespaces in our application. There is nothing keeping us from adding additional namespaces to composer.json and searching those.</p>
<pre><code>class NamespaceDetector
{
	public function getAppNamespace()
	{
		return $this-&gt;getNamespaceForPath(app_path());
	}

	protected function getNamespaceForPath()
	{
		$composer = json_decode(file_get_contents(base_path().'/composer.json'), true);

		foreach ((array) data_get($composer, 'autoload.psr-4') as $namespace =&gt; $path)
		{
			foreach ((array) $path as $pathChoice)
			{
				if (realpath($searchForPath) == realpath(base_path().'/'.$pathChoice)) return $namespace;
			}
		}

		throw new \RuntimeException(&quot;Unable to detect application namespace.&quot;);
	}
}
</code></pre>
<p>Now to fetch the application namespace we just use the namespace detector.</p>
<pre><code>$detect = new NamespaceDetector;
$detect-&gt;getAppNamespace();	// 'Horsefly'
</code></pre>
<p>This begs the question. Why would you need to ever get the app namespace? I mean… the developer <em>set</em> that. So he/she should already know the namespace, right? If you are working in package development or multiple <em>cms</em> applications, a need might arise for it though. One of our developers at work had a need for this. Glad Taylor has got our back. Everytime I look behind the curtains of Laravel source, I find nothing but clean expressive &amp; understable code.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2015/03/2015-03-31_how-to-get-laravel5-app-namespace/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Delete a file after download in Laravel 5]]></title>
        <id>/2015/05/2015-05-29_delete-a-file-after-download-laravel5/</id>
        <link href="/2015/05/2015-05-29_delete-a-file-after-download-laravel5/"/>
        <updated>2015-05-29T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[A while back I wrote about downloading a file in Laravel and then removing the file. This prevents us from having to clean up the storage directory full of files with a cronjob. I recently had this issue come back up at work and now we are on Laravel 5. Let’s revisit this issue.
]]></summary>
        <content type="html"><![CDATA[<p>A while back I wrote about <a href="/2014/03/20/serve-then-remove-temporary-file-using-laravel/">downloading a file in Laravel and then removing the file</a>. This prevents us from having to clean up the storage directory full of files with a cronjob. I recently had this issue come back up at work and now we are on Laravel 5. Let’s revisit this issue.</p>
<!-- more --> 
<p>The problem with deleting a file is that we cannot do it until after our client has downloaded the entire file. Furthermore what if we want to download a file and then refresh the page? This is not possible with server side. We might use a plugin like <a href="http://johnculviner.com/jquery-file-download-plugin-for-ajax-like-feature-rich-file-downloads/">$.fileDownload()</a> to help with this. But there is another way without the need for javascript.</p>
<pre><code>class MyController
{
	public function index()
	{
		return view('my.index');
	}

	public function download()
	{
		$file = $this-&gt;createSomeReport();

		return Response::download($file);
	}
}
</code></pre>
<p>What ends up happening on the above code is a file is generally downloaded on the page and no refresh occurs. This is because browsers are smart enough to pick up on <em>file content-type</em> HTTP headers. So how do we get our page to refresh without javascript? We have to create the file on the server, then refresh the page. Then download the file.</p>
<pre><code>	public function download()
	{
		$filepath = $this-&gt;saveReportTo(storage_path() . '/reports');

		Session::flash('file.download', $filepath);

		return Redirect::back();
	}
</code></pre>
<p>Then inside <code>resources/views/layouts/application.blade.php</code> we could do this.</p>
<pre><code>&lt;html&gt;
  &lt;head&gt;
     @if (Session::has('file.download'))
       &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url={{ route('file-download') }}&quot;&gt;
     @endif
  &lt;/head&gt;
  &lt;body&gt;
  	@yield('content')
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>And the <code>my.blade.php</code> might look like follows</p>
<pre><code>extends('layouts.application')

@section('content')
	&lt;a href=&quot;my/download&quot;&gt;Download file now&lt;/a&gt;
@stop
</code></pre>
<p>Now let’s take a look at the routes for this application.</p>
<pre><code>Route::get('my', 'MyController@index');

Route::post('my/download', 'MyController@download');

Route::get('file-download', ['as' =&gt; 'file-download', function() {
	return Response::download(Session::get('file.download'));
}]);
</code></pre>
<p>Another problem is when we create a file, we may want to remove it. This is typically the case when generating custom reports for users. We don’t want to keep these reports lingering around to fillup our disk space. To do this in laravel 5 we can use <a href="http://laravel.com/docs/5.0/middleware#terminable-middleware">terminable middleware</a>. It would look something like this…</p>
<pre><code>use Closure;
use Illuminate\Contracts\Routing\TerminableMiddleware;

class RemoveDownloadedFileMiddleware implements TerminableMiddleware {

    public function handle($request, Closure $next)
    {
        return $next($request);
    }

    public function terminate($request, $response)
    {
    	$file = Session::get('file.download', null);

    	if ($file) unlink($file);
    }
}
</code></pre>
<p>We should put our file-download route inside of a group to include this middleware termination.</p>
<pre><code>Route::group(['middleware' =&gt; ['RemoveDownloadedFileMiddleware'], function() {
	Route::get('file-download', ['as' =&gt; 'file-download', function() {
		return Response::download(Session::get('file.download'));
	}]);
});
</code></pre>
<p>That should about cover it. Now after the user downloads the file, it will disapear forever. We could do other things besides <code>unlink</code> the file in the middleware though. We might cache it. In fact, we could skip this entire process and make a cache remover that removes files older than 30 days anytime a new file is downloaded. There’s always more than one way to skin a chicken.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2015/05/2015-05-29_delete-a-file-after-download-laravel5/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Laravel Integration Testing for Large Apps]]></title>
        <id>/2015/11/2015-11-18_laravel-integration-testing-for-large-app/</id>
        <link href="/2015/11/2015-11-18_laravel-integration-testing-for-large-app/"/>
        <updated>2015-11-18T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[My work buddy and I were talking about tests. We wanted something to go through every route in our system and check for any obvious errors. That seemed like a pretty simple way to test an application.
So I wrote a generator to create tests for me automatically at work. I wanted to test every route we have in the system. We have hundreds of routes on this particular project I’m working on today. On our last large project we had over a thousand routes. What can I say? We like our routes.
]]></summary>
        <content type="html"><![CDATA[<p>My work buddy and I were talking about tests. We wanted something to go through every route in our system and check for any obvious errors. That seemed like a pretty simple way to test an application.</p>
<p>So I wrote a <a href="https://github.com/devisephp/cms/blob/master/src/Devise/Support/Console/DeviseTestRoutesCommand.php">generator to create tests for me automatically</a> at work. I wanted to test every route we have in the system. We have hundreds of routes on this particular project I’m working on today. On our last large project we had over a thousand routes. What can I say? We like our routes.</p>
<!-- more --> 
<p>The test to see if a route works is pretty simple and it looks something like this.</p>
<pre><code>public function test_route()
{
	$response = $this-&gt;call('GET', '/some/url');

	$this-&gt;assertEquals(200, $response-&gt;status());
}
</code></pre>
<h3>How to run A LOT of tests in Laravel?</h3>
<p>So after running the test code generator I was left with about 300 tests for this project. Some failed, some succeed, others flat out gave me fatal errors and crashed phpunit. This was because we had changed database columns and it totally broke some sections of our the site. After fixing a couple of errors, I ran into a bigger issue. <strong>Out of Memory</strong></p>
<pre><code>Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate 41 bytes) in ../vendor/laravel/framework/src/Illuminate/Database/Connection.php on line 323
</code></pre>
<p>Basically, out of the box Laravel <em>integration</em> testing is a memory explosion waiting to happen. Testing will work so long as you have a little application. Don’t be alarmed though, I get emails all the time about pills we can take to increase size. Jokes aside, if you want to test each one of your routes, eventually when you have enough routes, you will run into this same memory problem I ran into.</p>
<p>There’s a quick fix to that problem. Just allow more memory, right?</p>
<pre><code>ini_set('memory_limit', -1);
</code></pre>
<p>However, that just traded one problem for another. After running some really slow tests, after about 150 tests I start getting a continious stream of error exceptions.</p>
<pre><code>kelvindorothy:~/space/laravel-tests$ phpunit
PHPUnit 4.8.18 by Sebastian Bergmann and contributors.

..F..FF.F..FFFFFFFFFFFFFF

.FFF.....FS......F..F..FF.FF.FSF.SF.FF  63 / 244 ( 25%)
...FFFF.FFFF.F.F..F.....SF..F.FF.F.FF..FFFFF...SFFFF.F.SF.FF.F. 126 / 244 ( 51%)
F.F.SFFFF.SFSF...FF.FSFFEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE 189 / 244 ( 77%)
EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE

Time: 1.08 minutes, Memory: 450.00Mb

There were 94 errors:

1) Programming_Session_Confirm_Stage_Update::test_route
PDOException: SQLSTATE[08004] [1040] Too many connections


2) Programming_Session_Course_Row::test_route
PDOException: SQLSTATE[08004] [1040] Too many connections

    ... yeah, this goes on for a while ...

    ... then we start getting weird shit like this...

94) Youth_Programs::test_route
ErrorException: include(/Users/K.D./space/jccfs51/vendor/symfony/symfony/src/Symfony/Component/Finder/Exception/AccessDeniedException.php): failed to open stream: Too many open files


    ... then some failures ...

FAILURES!
Tests: 244, Assertions: 139, Errors: 94, Failures: 78, Skipped: 10.
</code></pre>
<p>Well crap. What to do about this problem? My tests are erroring because the framework has created too many database connections. My guess is that Laravel stores it’s entire <code>$app</code> globally and there may be some places where mysql database connections are not closed. This is causing memory leakage and eventually a bunch of <em>PDOException: SQLSTATE[08004] [1040] Too many connections</em> errors.</p>
<p>One way to get around this <em>too many connections</em> problem is to not run so many tests all at once. We can limit our runs to only a subset of tests using phpunit suites. Here is a <a href="https://gist.github.com/rizqidjamaluddin/61cd7f61ca36cf5c2d5a">gist of someone who has done it this way</a>.</p>
<p>However, I decided to tackle the problem head on. The real problem is too many database connections. Thus we will manually close the connections ourself by overwriting the default <code>TestCase::tearDown</code> method as seen next.</p>
<pre><code>class TestCase extends Illuminate\Foundation\Testing\TestCase
{
    /**
     * The base URL to use while testing the application.
     *
     * @var string
     */
    protected $baseUrl = 'http://localhost';

    /**
     * Creates the application.
     *
     * @return \Illuminate\Foundation\Application
     */
    public function createApplication()
    {
        $app = require __DIR__.'/../bootstrap/app.php';

        $app-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();

        return $app;
    }

    /**
     * Close out database connections, so they don't add up and eventually
     * cause a bunch of PDOException: Too many connections errors for our
     * tests, which otherwise would work normally if ran individually.
     *
     */
     public function tearDown()
     {
        if ($this-&gt;app)
        {
            $connectionName = $this-&gt;app-&gt;make('config')-&gt;get('database.default');

            $this-&gt;app-&gt;make('DB')-&gt;disconnect($connectionName);
        }

        parent::tearDown();
     }
}
</code></pre>
<p>Now when we run our tests, we don’t get a bunch of PDOException errors due to the <em>too many connections.</em> That is because we are closing them. Alright! Should we stop here? Well, we could. And if you’re not that familar with Laravel’s insides, then you might do well to stop here. However, I still have a few bones to pick with these tests.</p>
<ol>
<li>They are pretty dang slow.</li>
<li>They use way to much memory.</li>
</ol>
<p>After some research I found that other people had ran into this memory issue before too. There is a nice <a href="https://github.com/laravel/framework/issues/1798">closed github ticket</a> which hasn’t really solved anything to date (even though the ticket dates over 2 years ago). Granted, we got around our memory problem by setting <em>memory_limit</em> to -1 but I want my tests to run faster and use less memory. It seemed to me that the obvious place to first tackle is the <code>TestCase::createApplication()</code> method.</p>
<pre><code>public function createApplication()
{
    ini_set('memory_limit', -1); // yeah, I accept that Laravel likes to use lots of my memory... whatever, just do it.

    $app = require __DIR__.'/../bootstrap/app.php';

    $app-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();

    return $app;
}
</code></pre>
<p>Notice that everytime a new test is ran, Laravel is re-including and bootstrapping the application. However, we discovered earlier that the PHP garbage collection is not removing stuff under the hood of Laravel. There is a ton of stuff behind the curtain of Laravel. Some of which could remain, even after the test is completed. This means, the more tests you create, the more memory is used. I could get through about 20-30 tests before my php started to exploded due to being out of memory.</p>
<h2>So how do we really fix this?</h2>
<p>So in case you still don’t quite understand the issue. Let’s run a bench mark test. I’ll use the <code>ini_set('memory_limit', -1);</code> hack I mentioned at the beginning of this article. It uses over <strong>450Mb</strong> of memory.</p>
<h3>One potential fix, re-use the same laravel application as much as possible</h3>
<pre><code>class TestCase extends Illuminate\Foundation\Testing\TestCase
{
    /**
     * The base URL to use while testing the application.
     *
     * @var string
     */
    protected $baseUrl = 'http://localhost';

    /**
     * [$application description]
     * @var null
     */
    public static $application = null;

    /**
     * Creates the application.
     *
     * @return \Illuminate\Foundation\Application
     */
    public function createApplication()
    {
        if (!static::$application) $this-&gt;resetStaticApplication();

        return static::$application;
    }

    /**
     * Don't call parent::tearDown()
     *
     * @return null
     */
    public function tearDown()
    {
        // don't call parent::tearDown() or your application will be screwed up on next test
    }

    /**
     * Resets the application. Reset whenever you do something that might
     * affect the global $application
     *
     * @return null
     */
    public function resetStaticApplication()
    {
        static::$application = require __DIR__.'/../bootstrap/app.php';

        static::$application-&gt;make(Illuminate\Contracts\Console\Kernel::class)-&gt;bootstrap();
    }
}
</code></pre>
<p>Now with my changes in place, let’s see how things run. Will we actually be able to complete without the framework blowing up and throwing error exceptions on over half our tests because it used up too many database connections?</p>
<pre><code>kelvindorothy:~/space/laravel-tests$ phpunit
PHPUnit 4.8.18 by Sebastian Bergmann and contributors.

..F..FF.F..FFFFFFFFFFFFFF

.FFF.....FS....F.F..F..FFFFF.FSFFSF.FF  63 / 244 ( 25%)
F..FFFFFFFFF.F.F..F.....SF..F.FF.F.FF..FFFFF.F.SFFFFFF.SF.FFFF. 126 / 244 ( 51%)
F.F.SFFFFFSFSF...FF.FSFFFFFF.SFFFFFFS.FFFF.FSFF..F..FSFFFFFFF.F 189 / 244 ( 77%)
F.FFFFF.F..F.F.FS.FF.FFFFF...F.F.FFF.FFFFFF..F...FF....

Time: 27.96 seconds, Memory: 267.25Mb

There were 145 failures:

1) Account_Edit_Picture::test_route
Failed asserting that 302 matches expected 200.



        ... this goes on for a while...


FAILURES!
Tests: 244, Assertions: 228, Failures: 145, Skipped: 15.
</code></pre>
<p>YAY! We got a lot of failures and some skipped tests, but no weird ass errors. This looks promising. We will try this for a while and see how it turns out. We’ve ran over 600+ tests using a similar method to this on our Devise CMS tests. Hopefully, this will work well.</p>
<p>Also, take a look at the memory and time now. It is down to <strong>27.96 seconds</strong> and <strong>267.25Mb.</strong> That’s a bit better.</p>
<h3>Some Potential Problems with our approach to Integration Testing</h3>
<p>There is some merit to the way Taylor setup the <code>TestCase</code>. So let’s try to understand why Taylor is resetting the application every time. If we understand that, then we’ll understand the dangers of the code I just showed you above to get around the memory problems.</p>
<p>The application is reset because Taylor wants us to test in isolation. When we create a new application, we are creating a new IoC container. There are variables stored in this IoC container. If those variables are tampered with because of our test, then it could affect every other test. If you don’t reset those everytime, we run the risk of our application container not being isolated and thus causing certain tests to mess with each other. For example, take these two tests,</p>
<pre><code>class TestMe extends TestCase
{
	public function test_me1()
	{
		URL::shouldReceive('route')-&gt;once()-&gt;andReturn('awesome');

		print URL::route('something-here'); // awesome
	}

	/**
	 * @expectedException InvalidArgumentException
	 * @return [type]
	 */
	public function test_me2()
	{
		print URL::route('something-here');
	}
}
</code></pre>
<p>Above we don’t actually have a ‘something-here’ route defined. We are mocking it with Mockery on the URL facade. I personally don’t use Mockery on Laravel’s facades often because I don’t use facades that often. However, this will show you the problem.</p>
<p>Above we are changing the URL facade to expect the <code>route</code> method. In our second <code>test_me2()</code> method we are just asserting that an exception is thrown because we don’t have a route defined for <em>something-here</em>.</p>
<p>This test should run successfully on the <strong>old out of the box</strong> TestCase.</p>
<pre><code>kelvindorothy:~/space/laravel-test phpunit
PHPUnit 4.8.18 by Sebastian Bergmann and contributors.

..awesome.

Time: 627 ms, Memory: 29.50Mb

OK (2 tests, 1 assertion)
</code></pre>
<p>However, when we change to our modified <strong>TestCase</strong> we run into a different situation.</p>
<p>Now our results show that mockery has been applied across both testing methods `test_me1’ and ‘testme_2’. See below.</p>
<pre><code>kelvindorothy:~/space/laravel-test$ phpunit
PHPUnit 4.8.18 by Sebastian Bergmann and contributors.

..awesomeFawesome

Time: 425 ms, Memory: 26.75Mb

There was 1 failure:

1) TestMe::test_me2
Failed asserting that exception of type &quot;InvalidArgumentException&quot; is thrown.

/Users/K.D./.composer/vendor/phpunit/phpunit/src/TextUI/Command.php:186
/Users/K.D./.composer/vendor/phpunit/phpunit/src/TextUI/Command.php:138

FAILURES!
Tests: 2, Assertions: 1, Failures: 1.
</code></pre>
<p>See how now we no longer get an exception in <code>test_me2</code> because the mock we applied in <code>test_me1</code> bled over. This is why testing in isolation is a good thing. How do we deal with this? Here are some simple steps.</p>
<h3>A few takeaway tips</h3>
<ol>
<li>
<p>Don’t bootstrap Laravel on unit tests. Only on integration tests. We use Mockery a lot on unit tests. Unit tests however only require a single class to be loaded. Not an entire framework. If you are using Mockery in unit tests, then you should even be extending <code>TestCase</code> and <code>createApplication()</code> Feel free to make different classes such as, <code>TestCase</code> and <code>UnitTestCase</code>.</p>
</li>
<li>
<p>Don’t mock things on integration tests.</p>
</li>
<li>
<p>Don’t try to <em>unit test</em> your models. If you really want to see your models working, write some integration tests on classes which heavily use the models. If you use a <code>Repository</code> then often you can just make calls to your repository and ensure that the models are indeed working.</p>
</li>
<li>
<p>Use a real database and database transactions to rollback. This will save a lot of time compared to seeding your database over and over.</p>
</li>
<li>
<p>Use different phpunit testing suites for different types of tests.</p>
</li>
</ol>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2015/11/2015-11-18_laravel-integration-testing-for-large-app/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rollbar is Awesome]]></title>
        <id>/2015/11/2015-11-19_rollbar-is-awesome/</id>
        <link href="/2015/11/2015-11-19_rollbar-is-awesome/"/>
        <updated>2015-11-19T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[Ever wanted to see errors happening on your application? I use rollbar for this. And unless your app has over 5000 errors a month, it is free.
Installing Rollbar for Laravel is super easy. Below is the code you get when you first sign up for Rollbar.
]]></summary>
        <content type="html"><![CDATA[<p>Ever wanted to see errors happening on your application? I use rollbar for this. And unless your app has over 5000 errors a month, it is free.</p>
<p>Installing Rollbar for Laravel is super easy. Below is the code you get when you first sign up for Rollbar.</p>
<!-- more -->
<pre><code>&lt;?php
// installs global error and exception handlers
Rollbar::init(array('access_token' =&gt; 'YOUR_ACCESS_TOKEN_HERE'));

// Message at level 'info'
Rollbar::report_message('testing 123', 'info');

// Catch an exception and send it to Rollbar
try {
    throw new Exception('test exception');
} catch (Exception $e) {
    Rollbar::report_exception($e);
}

// Will also be reported by the exception handler
throw new Exception('test 2');
?&gt;
</code></pre>
<p>You’ll also want to install rollbar library with composer.</p>
<pre><code>composer require rollbar/rollbar
</code></pre>
<p>Next, where to place the error handling code? In Laravel 5, you’ll want to add it to <code>app\Exceptions\Handler.php</code> like so…</p>
<pre><code>
    /**
     * Report or log an exception.
     *
     * This is a great spot to send exceptions to Sentry, Bugsnag, etc.
     *
     * @param  \Exception  $e
     * @return void
     */
    public function report(Exception $e)
    {
        // use this rollbar for production environments
        if (config('app.env') === 'production')
        {
            Rollbar::init(array('access_token' =&gt; 'YOUR_PROD_ACCESS_TOKEN'));

            Rollbar::report_exception($e);
        }

        // maybe use your own DEV rollbar here?
        if (config('app.env') === 'local')
        {
            Rollbar::init(array('access_token' =&gt; 'YOUR_DEV_ACCESS_TOKEN'));

            Rollbar::report_exception($e);
        }

        parent::report($e);
    }
}
</code></pre>
<p>This tool will keep track of all the errors your visitors are seeing. It doesn’t replace writing tests for the application necessarily but it does give an extra layer of comfort knowing when your application is erroring. Some times you can find and fix errors before a client has time to email you that screenshot and upload it to JIRA or Trello. Then you just say, <em>yeah, I fixed that like 5 minutes ago dawg…</em>* and walk off with a gangsta smile on your face.</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2015/11/2015-11-19_rollbar-is-awesome/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Homestead bash helper]]></title>
        <id>/2016/03/2016-03-09_homestead-bash-commands/</id>
        <link href="/2016/03/2016-03-09_homestead-bash-commands/"/>
        <updated>2016-03-09T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[One thing that annoys me about homestead is that I have to switch to the Homestead directory in order to use vagrant.
cd $HOMESTEAD_DIR;
vagrant up

Instead I made a little helper that takes out a step. Now I can just run
homestead up

]]></summary>
        <content type="html"><![CDATA[<p>One thing that annoys me about homestead is that I have to switch to the Homestead directory in order to use vagrant.</p>
<pre><code>cd $HOMESTEAD_DIR;
vagrant up
</code></pre>
<p>Instead I made a little helper that takes out a step. Now I can just run</p>
<pre><code>homestead up
</code></pre>
<!-- more -->
<p>Below is the script. I placed mine in <code>~/.bin/homestead</code></p>
<pre><code>#!/bin/bash

ARGS=&quot;$@&quot;
COMMAND=&quot;$1&quot;
HOMESTEAD_DIR=&quot;$HOME/.homestead/Homestead&quot;

cd $HOMESTEAD_DIR

case $COMMAND in

  edit)
    vi $HOME/.homestead/Homestead.yaml
  ;;

  down)
    vagrant halt
  ;;

  *)
    vagrant $ARGS
  ;;

esac
</code></pre>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2016/03/2016-03-09_homestead-bash-commands/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Test Every Laravel Route?]]></title>
        <id>/2016/03/2016-03-31_missing-laravel-tested-routes/</id>
        <link href="/2016/03/2016-03-31_missing-laravel-tested-routes/"/>
        <updated>2016-03-31T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[So in this article I’m going to explain how to test every route in a laravel application. I usually name all the routes in my application, so essentially, every route in my application has some sort of sanity test.
]]></summary>
        <content type="html"><![CDATA[<p>So in this article I’m going to explain how to test <em>every</em> route in a laravel application. I usually name all the routes in my application, so essentially, every route in my application has some sort of sanity test.</p>
<!-- more --> 
<p>Here is a 1 minute video of me writing all the tests for my application with this script.</p>
<iframe width="100%" height="515" src="https://www.youtube.com/embed/VJO3ZbUf1UI" frameborder="0" allowfullscreen></iframe>
<p>The TLDR; gist of this article is that I can run a command</p>
<pre><code>$ missing-route-tests
</code></pre>
<p>And that command will generate some testing code for me based on routes that are missing. Something like this:</p>
<pre><code>/**
 * @route users.edit
 */
public function test_users_edit()
{
    $this-&gt;markTestIncomplete('This test is incomplete');
    $response = $this-&gt;call('GET', '/users/{users}/edit');
    $this-&gt;assertEquals(200, $response-&gt;status());
}
</code></pre>
<p>This essentially means two things.</p>
<ol>
<li>I don’t have to keep up with all routes I have and have not tested.</li>
<li>It also creates a boilerplate for me to get started testing.</li>
</ol>
<p>You can find the <code>missing-routes-test</code> script <a href="https://github.com/kdocki/missing-tested-routes">HERE</a>.</p>
<h3>Laravel Testing Basics: Getting Started With A Single Test</h3>
<p>Since most applications have users, let’s create a RESTful resource to manage our users in our application. So let’s add a resourceful route to our <code>routes.php</code> file.</p>
<pre><code>Route::resource('users', 'UsersController');
</code></pre>
<p>Next we need a resource controller, so let’s run the command to create it for us.</p>
<pre><code>$ php artisan make:controller UsersController --resource
</code></pre>
<p>Next we want to <a href="https://laravel.com/docs/5.2/testing">test a route in Laravel</a>, I can create it using <code>artisan</code></p>
<pre><code>$ php artisan make:test UsersTest
</code></pre>
<p>That gets us some code generated out that looks something like this</p>
<pre><code>class UsersTest extends TestCase
{
    /**
     * A basic test example.
     *
     * @return void
     */
    public function testExample()
    {
        $this-&gt;assertTrue(true);
    }
}
</code></pre>
<p>At this point, I want to test a route. Therefore, I add a method and use Laravel’s awesome testing methods to call the /users url.</p>
<pre><code>    /**
     * Check out the /users index page
     */
    public function test_users_index()
    {
        $response = $this-&gt;call('GET', '/users');

        $this-&gt;assertEquals(200, $response-&gt;status());
    }
</code></pre>
<p>Now when we run phpunit we get that green that everyone likes.</p>
<pre><code>kelvinvidel:~/space/blog$ phpunit
PHPUnit 4.8.24 by Sebastian Bergmann and contributors.

..

Time: 135 ms, Memory: 13.00Mb

OK (2 tests, 3 assertions)
</code></pre>
<p>Granted, our test is <em>really</em> simple. It only checks for a response status of 200. If we navigate to this page it is blank because our <code>UsersController::index()</code> is empty.</p>
<h3>Testing ALL The Things (Routes)</h3>
<p>So are we done? No. We’ve only tested 1 route so far. Laravel ships with a nice artisan command to view all our routes.</p>
<pre><code>$ php artisan route:list
</code></pre>
<p>For our basic users management application this spits out the following</p>
<img src="/media/missing-laravel-tested-routes/route-list.png">
<p>We could manually go through this list and try to test at our own pace. But this method is prone to human errors and it’d be better to programmatically scan for the routes we have not yet tested.</p>
<p>Thus I run the following command to see which tests are missing from our users app.</p>
<pre><code>$ missing-route-tests
</code></pre>
<p>This outputs the following</p>
<pre><code>/**
 * @route users.index
 */
public function test_users_index()
{
    $this-&gt;markTestIncomplete('This test is incomplete');
    $response = $this-&gt;call('GET', '/users');
    $this-&gt;assertEquals(200, $response-&gt;status());
}


/**
 * @route users.create
 */
public function test_users_create()
{
    $this-&gt;markTestIncomplete('This test is incomplete');
    $response = $this-&gt;call('GET', '/users/create');
    $this-&gt;assertEquals(200, $response-&gt;status());
}


/**
 * @route users.store
 */
public function test_users_store()
{
    $this-&gt;markTestIncomplete('This test is incomplete');
    $data = [];
    $response = $this-&gt;call('POST', '/users', $data);
    $this-&gt;assertEquals(200, $response-&gt;status());
}


/**
 * @route users.show
 */
public function test_users_show()
{
    $this-&gt;markTestIncomplete('This test is incomplete');
    $response = $this-&gt;call('GET', '/users/{users}');
    $this-&gt;assertEquals(200, $response-&gt;status());
}


/**
 * @route users.edit
 */
public function test_users_edit()
{
    $this-&gt;markTestIncomplete('This test is incomplete');
    $response = $this-&gt;call('GET', '/users/{users}/edit');
    $this-&gt;assertEquals(200, $response-&gt;status());
}


/**
 * @route users.update
 */
public function test_users_update()
{
    $this-&gt;markTestIncomplete('This test is incomplete');
    $data = [];
    $response = $this-&gt;call('PUT', '/users/{users}', $data);
    $this-&gt;assertEquals(200, $response-&gt;status());
}


/**
 * @route users.destroy
 */
public function test_users_destroy()
{
    $this-&gt;markTestIncomplete('This test is incomplete');
    $data = [];
    $response = $this-&gt;call('DELETE', '/users/{users}', $data);
    $this-&gt;assertEquals(200, $response-&gt;status());
}
</code></pre>
<p>Now when I run <code>phpunit</code> again, I at least have a rough idea of how many routes we have yet to test.</p>
<h3>How it works?</h3>
<p>Right now I’m using annotations to mark a named route as tested. I decided for this approach because it seems easy. Another approach that <em>might</em> work is to run phpunit and keep track of which routes were called during the entire process. After that was finished, we could compare our list of routes to the entire list using <code>Route::getRoutes()</code>. I opted for the annotation route just because I wanted something quick and easy.</p>
<p>Again you can find the script <a href="https://github.com/kdocki/missing-tested-routes">HERE</a>.</p>
<p>If you find yourself using this or have some sort of improvements or even a better way for testing all the routes in your application, please leave me a comment. Thanks!</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2016/03/2016-03-31_missing-laravel-tested-routes/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[When Javascript Excited Me]]></title>
        <id>/2016/04/2016-04-05_when-javascript-excited-me/</id>
        <link href="/2016/04/2016-04-05_when-javascript-excited-me/"/>
        <updated>2016-04-05T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is a country song about a love burnt out over time like a candle. This story starts with a young boy. This boy  fell in love with a beautiful programming language. The boy grew into a man, becoming more and more cynical over time. Eventually he lost his way and his first love.
]]></summary>
        <content type="html"><![CDATA[<p>This is a country song about a love burnt out over time like a candle. This story starts with a young boy. This boy  fell in love with a beautiful programming language. The boy grew into a man, becoming more and more cynical over time. Eventually he lost his way and his first love.</p>
<!-- more --> 
<p>Our story begins two decades ago, when the dial up was king and T1 crowds all complained about Internet Explorer. Netscape was cool? Simplier times, when a javascript developer only worried about making one browser happy: IE.</p>
<p>Oh, Internet Explorer, your quirkiness was terrible and atractively simple. Developing for IE felt like riding your bicylce through a giant mud puddle. It was awesome when you made it through. It was messy as hell when you got stuck.</p>
<p>During this time, this boy still rode a bicycle. He also started learning javascript and html. His first site was hosted on angelfire. His first code looked something like this. He was really excited.</p>
<h3>FIRST HE WAS EXCITED ABOUT JAVASCRIPT</h3>
<pre><code>    &lt;button onclick=&quot;doSomething()&quot;&gt;Do Something&lt;/button&gt;

    &lt;script&gt;
        function doSomething()
        {
            document.writeln('I did something!');
        }
    &lt;/script&gt;
</code></pre>
<div class="pb sp75 text-center iframe1">
    <iframe src="//giphy.com/embed/3ornjXIIShZ2MgyyHu" width="100%" height="300px" frameBorder="0" class="giphy-embed hidden" allowFullScreen></iframe>
    <button class="btn btn-info btn-lg" data-toodles data-selector=".iframe1 > iframe" data-active="" data-inactive="hidden">CLICK TO SEE HOW THE BOY FELT?<br>(this shows/hides a picture)</button>
</div>
<h3>THEN HE WAS SUPER EXCITED ABOUT JQUERY</h3>
<pre><code>    &lt;button class=&quot;foo&quot;&gt;Do Something&lt;/button&gt;

    &lt;script&gt;
        $('.foo').on('click', function()
        {
            $(this).append('&lt;p&gt;I did something&lt;/p&gt;');
        });
    &lt;/script&gt;
</code></pre>
<div class="pb sp75 text-center iframe2">
    <iframe src="//giphy.com/embed/fCdN32nPcgZ1K" width="100%" height="300px" frameBorder="0" class="giphy-embed hidden" allowFullScreen></iframe>
    <button class="btn btn-lg" data-toodles data-selector=".iframe2 > iframe" data-active="" data-inactive="hidden">NOW HOW DOES HE FEEL?</button>
</div>
<h3>THEN HE WAS INTERESTED IN PROTOTYPE</h3>
<pre><code>    &lt;button class=&quot;foo&quot;&gt;Do Something&lt;/button&gt;

    &lt;script&gt;
        $('.foo').on('click', function()
        {
            $(document).insert(&quot;&lt;p&gt;I did something&lt;/p&gt;&quot;);
        });
    &lt;/script&gt;
</code></pre>
<div class="pb sp75 text-center iframe3">
    <iframe src="//giphy.com/embed/l0zAiJHyg0fMA" width="100%" height="300px" frameBorder="0" class="giphy-embed hidden" allowFullScreen></iframe>
    <button class="btn  btn-lg" data-toodles data-selector=".iframe3 > iframe" data-active="" data-inactive="hidden">NOW HOW DOES HE FEEL?</button>
</div>
<h3>THEN HE GLANCED AT MOOTOOLS</h3>
<pre><code>    &lt;button class=&quot;foo&quot;&gt;Do Something&lt;/button&gt;

    &lt;script&gt;
        $$('.foo').addEvent('click', function()
        {
            new Element('span', {'html': 'Do something'}).inject(document);
        });
    &lt;/script&gt;
</code></pre>
<div class="pb sp75 text-center iframe4">
    <iframe src="//giphy.com/embed/LWyOI6hV6dTBm" width="100%" height="300px" frameBorder="0" class="giphy-embed hidden" allowFullScreen></iframe>
    <button class="btn  btn-lg" data-toodles data-selector=".iframe4 > iframe" data-active="" data-inactive="hidden">NOW HOW DOES HE FEEL?</button>
</div>
<h3>THEN HE WAS KNOCKED OUT BY KNOCKOUT</h3>
<pre><code>    &lt;button data-bind='click: doSomething'&gt;Do Something&lt;/button&gt;
    &lt;p data-bind=&quot;text: message&quot;&gt;&lt;/p&gt;

    &lt;script&gt;
        var DoSomethingViewModel = function() {
            this.message = ko.observable('');

            this.doSomething = function() {
                this.message('I did something!');
            };
        }

        ko.applyBindings(new DoSomethingViewModel());
    &lt;/script&gt;
</code></pre>
<div class="pb sp75 text-center iframe5">
    <iframe src="//giphy.com/embed/XQvhpuryrPGnK" width="100%" height="300px" frameBorder="0" class="giphy-embed hidden" allowFullScreen></iframe>
    <button class="btn  btn-lg" data-toodles data-selector=".iframe5 > iframe" data-active="" data-inactive="hidden">NOW HOW DOES HE FEEL?</button>
</div>
<h3>THEN HE GOT DIZZY ABOUT ANGULAR</h3>
<pre><code>    &lt;div ng-app&gt;
        &lt;button ng-click=&quot;message='I Did Something'&quot;&gt;Do Something&lt;/button&gt;
        {{ message }}
    &lt;/div&gt;
</code></pre>
<div class="pb sp75 text-center iframe6">
    <iframe src="//giphy.com/embed/xT9DPlS09LdhDM5Fja" width="100%" height="300px" frameBorder="0" class="giphy-embed hidden" allowFullScreen></iframe>
    <button class="btn  btn-lg" data-toodles data-selector=".iframe6 > iframe" data-active="" data-inactive="hidden">NOW HOW DOES HE FEEL?</button>
</div>
<h3>THEN HE WAS EXCITED ABOUT BACKBONE</h3>
<pre><code>    &lt;div class=&quot;do-something&quot;&gt;
        &lt;button&gt;Do Something&lt;/button&gt;
        &lt;p class=&quot;js-message&quot;&gt;&lt;/p&gt;
    &lt;/div&gt;

    &lt;script&gt;
        Backbone.View.extend({
            el: '.do-something',
            events: {
                'click button': 'render'
            }
            render: function() {
                this.$('.js-message').append('I did something!');
            }
        });
    &lt;/script&gt;
</code></pre>
<div class="pb sp75 text-center iframe7">
    <iframe src="//giphy.com/embed/NN0hIFfU8htug" width="100%" height="300px" frameBorder="0" class="giphy-embed hidden" allowFullScreen></iframe>
    <button class="btn  btn-lg" data-toodles data-selector=".iframe7 > iframe" data-active="" data-inactive="hidden">NOW HOW DOES HE FEEL?</button>
</div>
<h3>THEN HE WAS EXCITED ABOUT MARIONETTE</h3>
<pre><code>    &lt;div id=&quot;my-element&quot;&gt;
        &lt;button class=&quot;do-something-button&quot;&gt;Do Something&lt;/button&gt;
        &lt;p class=&quot;js-message&quot;&gt;&lt;/p&gt;
    &lt;/div&gt;

    &lt;script&gt;
        var MyView = Marionette.View.extend({
            el: '#my-element',

            template: false,

            ui: {
                button: '.do-something-button',
                message: '.js-message'
            },

            events: {
                'click @ui.button': 'clickedButton'
            },

            clickedButton: function() {
                this.ui.paragraph.text('I did something!');
            }
        });

        var view = new MyView();
        view.render();
    &lt;/script&gt;
</code></pre>
<div class="pb sp75 text-center iframe8">
    <iframe src="//giphy.com/embed/8cdZit2ZcjTri" width="100%" height="300px" frameBorder="0" class="giphy-embed hidden" allowFullScreen></iframe>
    <button class="btn  btn-lg" data-toodles data-selector=".iframe8 > iframe" data-active="" data-inactive="hidden">NOW HOW DOES HE FEEL?</button>
</div>
<h3>THEN HE WAS OVERWHELMED BY EMBER</h3>
<pre><code>    &lt;script&gt;
        App = Ember.Application.create();

        App.Router.map(function() {
            this.resource('index', { path: '/' }, function() {});
        });

        App.IndexController = Ember.ObjectController.extend({
            actions: {
                doSomething: function() {
                    this.set('message', 'I did something!');
                }
            }
        });
    &lt;/script&gt;

    &lt;script type=&quot;text/x-handlebars&quot; data-template-name='index'&gt;
        &lt;button {{ action 'doSomething' }}&gt;Do Something&lt;/button&gt;
        &lt;p&gt;{{ message }}&lt;/p&gt;
    &lt;/script&gt;
</code></pre>
<div class="pb sp75 text-center iframe9">
    <iframe src="//giphy.com/embed/Nqzq2ULB3Xbqg" width="100%" height="300px" frameBorder="0" class="giphy-embed hidden" allowFullScreen></iframe>
    <button class="btn  btn-lg" data-toodles data-selector=".iframe9 > iframe" data-active="" data-inactive="hidden">ARE YOU STILL CLICKING?</button>
</div>
<h3>THEN HE WAS FASCINATED BY POLYMER</h3>
<pre><code>    &lt;dom-module id=&quot;do-something&quot;&gt;
        &lt;template&gt;
            &lt;button id=&quot;doSomething&quot;&gt;Do Something&lt;/button&gt;
            &lt;p&gt;{{ message }}&lt;/p&gt;
        &lt;/template&gt;
        &lt;script&gt;
            Polymer({
                is: 'do-something',
                listeners: {
                    'doSomething.tap': 'doSomething'
                },
                doSomething: function(e) {
                    this.message = 'I did something';      
                }
            });
        &lt;/script&gt;
    &lt;/dom-module&gt;

    &lt;do-something&gt;&lt;/do-something&gt;
</code></pre>
<div class="pb sp75 text-center iframe10">
    <iframe src="//giphy.com/embed/sBl8Fowq0ErFC" width="100%" height="300px" frameBorder="0" class="giphy-embed hidden" allowFullScreen></iframe>
    <button class="btn  btn-lg" data-toodles data-selector=".iframe10 > iframe" data-active="" data-inactive="hidden">IT'S TOO MATERIALISTIC MAN...</button>
</div>
<h3>THEN HE WAS LIKE OKAY … FACEBOOK HAS REACT</h3>
<pre><code>var DoSomething = React.createClass({
    getInitialState: function () {
        return {
            message: ''
        }
    },

    render: function () {
        var message = this.state.message;
    
        return (
            &lt;div&gt;
                &lt;button onClick={this.showMessage}&gt;Do Something&lt;/button&gt;
                &lt;p&gt;{message}&lt;/p&gt;
            &lt;/div&gt;
        );
    }
});

React.render(&lt;DoSomething /&gt;, document.body);
</code></pre>
<div class="pb sp75 text-center iframe11">
    <iframe src="//giphy.com/embed/svpdoOP31CkTu" width="100%" height="300px" frameBorder="0" class="giphy-embed hidden" allowFullScreen></iframe>
    <button class="btn  btn-lg" data-toodles data-selector=".iframe11 > iframe" data-active="" data-inactive="hidden">DON'T FORGET FLUX, RELAY AND GRAPHQL</button>
</div>
<h3>THEN HE WAS KIND OF INTERESTED IN VUE</h3>
<pre><code>    &lt;div id=&quot;doSomething&quot;&gt;
        &lt;button v-on:click=&quot;message = 'I did something'&quot;&gt;Do Something&lt;/button&gt;
        &lt;p&gt;{{ message }}&lt;/p&gt;
    &lt;/div&gt;

    &lt;script&gt;
        new Vue({
            el: '#doSomething',
            data: {
                message: '',
            }
        });
    &lt;/script&gt;
</code></pre>
<div class="pb sp75 text-center iframe12">
    <iframe src="//giphy.com/embed/IyOr6zzrR2KOc" width="100%" height="300px" frameBorder="0" class="giphy-embed hidden" allowFullScreen></iframe>
    <button class="btn  btn-lg" data-toodles data-selector=".iframe12 > iframe" data-active="" data-inactive="hidden">THIS IS JUST ANGULAR SIMPLIFIED</button>
</div>
<h3>THEN HE CRIED BECAUSE ANGULAR 2 CHANGED SO MUCH</h3>
<p><em>index.html</em></p>
<pre><code>&lt;do-something&gt;&lt;/do-something&gt;
</code></pre>
<p><em>main.ts</em></p>
<pre><code>import {bootstrap}  from 'angular2/platform/browser';
import {DoSomething} from './do_something';

bootstrap(DoSomething);
</code></pre>
<p><em>do_something.ts</em></p>
<pre><code>import {Component} from 'angular2/core';

@Component({
  selector: 'do-something',
  templateUrl: 'do-something.html'
})

export class DoSomething {
  message: string = '';

  onClick(){
    this.message = 'I did something!';
  }
}
</code></pre>
<p><em>do_something.html</em></p>
<pre><code>&lt;button (click)=&quot;onClick()&quot;&gt;
&lt;p [hidden]=&quot;!message&quot;&gt;{{message}}&lt;/p&gt;
</code></pre>
<div class="pb sp75 text-center iframe13">
    <iframe src="//giphy.com/embed/pIaP2hE4uFz7G" width="100%" height="300px" frameBorder="0" class="giphy-embed hidden" allowFullScreen></iframe>
    <button class="btn  btn-lg" data-toodles data-selector=".iframe13 > iframe" data-active="" data-inactive="hidden">THANKS GOOGLE...</button>
</div>
<h3>AND THESE DAYS HE JUST TRIES KEEPING HIS SANITY…</h3>
<p><em>meh, I’m tired of Javascript… maybe I’ll just use CSS3</em></p>
<p>babahahaMUHAHAHAHAHAHAHAHA!!!</p>
<pre><code>&lt;input type=&quot;checkbox&quot; class=&quot;show-info-btn&quot;&gt; Check Me.
&lt;p class=&quot;show-info&quot;&gt;I did something&lt;/p&gt;

&lt;style&gt;
.show-info-btn:checked ~ .show-info {
  display: block;
}

.show-info {
  display: none;
}
&lt;/style&gt;
</code></pre>
<div class="pb sp75 text-center iframe14">
    <iframe src="//giphy.com/embed/9ySjuLTJEpPAA" width="100%" height="300px" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>
    <button class="btn  btn-lg" data-toodles data-selector=".iframe14 > iframe" data-active="" data-inactive="hidden">WELCOME TO JS MANHOOD!</button>
</div>
<h2>OKAY ENOUGH OF THAT, YOU’RE BORING ME…</h2>
<p>Anyway, <em>SURPRISE</em>, the boy I’m talking about is me. Bet you didn’t see that coming huh? I know, I know, I’m good. I chould write Michael Bay movies. <em>Javascript best practices</em> keep changing. Some have come full circle in the last 20 years. For example, what is the real difference between,</p>
<pre><code>&lt;button onclick=&quot;doSomething()&quot;&gt;Do Something&lt;/button&gt;
</code></pre>
<p>and</p>
<pre><code>&lt;button ng-click=&quot;doSomething()&quot;&gt;Do Something&lt;/button&gt;
</code></pre>
<p>The real difference is time. <em>Your time.</em> The first example of native javascript takes a web developer <em>seconds</em>/<em>minutes</em> to understand. The angular example takes a massive undertaking and <em>days</em>/<em>weeks</em> to learn - not to mention the exorcism later when the angular 3.0 framework completely changes and your inner demons come to life. ^_^</p>
<p>I didn’t even mention all the <em>other</em> stuff that come with these frameworks and javascript development. Take javascript testing tools for example. Karma, which used to be testacular _(ha ha, testicles),_Jasmine, moocha, chii, QUnit, unit.js, headless phantom. For managing assets we can use component, browserfiy, bower, gulp (is Grunt <a href="https://www.youtube.com/watch?v=RthZgszykLs">still alive?</a>), include billions of jQuery/node/<whatever> plugins (which are awesome). I intentionally left out all the server-side javascript frameworks in this article because it is already too damn long.</p>
<p>{% blockquote %}
When it comes to javascript, there are simply too many ways to skin the cat.
{% endblockquote %}</p>
<p>Sure, fundamentally Javascript has problems as a language. It allows us to write extremely complex and obscure code that does seemingly simple things. It needs polyfils and browser checks and server/client checks. One day java<strong>script</strong> will run all our toasters.</p>
<p>However, language problems set aside, there is also this social problem with the language. <em>Developer elitism</em> comes with the rapidly changing terriority. For example, if you’re not using the latest tools in javascript, then to other developers/employers you’re just a <em>shitty javascript developer.</em> You could have been coding javascript for years, but to be awesome you’ve gotta know <strong>React</strong> or <strong>angular</strong> or <strong>insert some framework</strong>. My next blog article should be titled: <strong>You know… using jQuery won’t kill you, right?</strong></p>
<p>Do you have a love/hate relationship with javascript? Feel free to comment about it below. Don’t keep your frustrations inside, go on… rage a little. ^<em>^</em></p>
<div class="mt sp100"></div>
<h4>UPDATE 4/11/2016</h4>
<p>Shortly after writing this I found this article about <a href="http://www.planningforaliens.com/blog/2016/04/11/why-js-development-is-crazy/">Why Javascript Development Is Crazy</a>. It’s good, check it out.</p>
<div class="mt sp100"></div>]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2016/04/2016-04-05_when-javascript-excited-me/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Basic Form Request Validations With Laravel]]></title>
        <id>/2016/04/2016-04-11_basic-form-request-validations-in-laravel/</id>
        <link href="/2016/04/2016-04-11_basic-form-request-validations-in-laravel/"/>
        <updated>2016-04-11T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Laravel allows us to validate requests before they even make it to our controllers. It does this using named form requests
Thus you might write a controller action like so:
public function storeBlog(BlogRequest $request)
{
    // request has already been validated
}

]]></summary>
        <content type="html"><![CDATA[<p>Laravel allows us to validate requests before they even make it to our controllers. It does this using <a href="https://laravel.com/docs/5.2/validation#form-request-validation">named form requests</a></p>
<p>Thus you might write a controller action like so:</p>
<pre><code>public function storeBlog(BlogRequest $request)
{
    // request has already been validated
}
</code></pre>
<!-- more -->
<p>So what does BlogRequest look like?</p>
<pre><code>class BlogRequest extends BasicRequest
{
    public function storeBlogRules()
    {
        return [
            'title' =&gt; 'required',
            'description' =&gt; 'required',
            'owner_email' =&gt; 'required|unique:blogs,owner_email'
        ];
    }
}
</code></pre>
<p>You can see what BasicRequest looks like below. If you’re doing a lot of crud applications you might benefit from having your own validations built into the request.</p>
<h3>Problems with this approach</h3>
<p>I’ve found 2 problems with this approach.</p>
<h4>#1 Validation rules are stored in a Request object.</h4>
<p>What happens if you want to re-use validation rules? A lot of people would store their validation rules on the <code>Blog</code> model to solve this problem. It just depends on how much you want to re-use your rules. Honestly, rules sometimes differ slightly enough to add another 100 lines of code in your <code>Blog</code> model, it may make sense to put them somewhere else. THe problem here is that you have to create a <strong>new BlogRequest</strong> just to get the validation rules. If you are running inside of a console Command, initiating a new <strong>BlogRequest</strong> object isn’t really that sensible.</p>
<h4>#2 Sometimes rules need parameters</h4>
<p>For example, sometimes we need to check for existance or uniqueness of columns on a table. Let’s go back to our Blog example example, and now we want to update a blog…</p>
<pre><code>    public function updateBlogRules( ... )
    {
        // HOW TO GET $blog-&gt;id IN HERE?

        return [
            'title' =&gt; 'required',
            'content' =&gt; 'required'
            'owner_email' =&gt; &quot;unique:blogs,owner_email,id,{$blog-&gt;id}&quot;
        ];
    }
</code></pre>
<p>If we inspect <code>$this</code> inside of the <strong>BlogRequest</strong> object we notice that it has the route and request information all available to us. Thus we could make use of that and parse out route parameters to get the blog id. Something like…</p>
<pre><code>$params = $this-&gt;route()-&gt;parameters()
</code></pre>
<p>But honestly, at this point, I feel the BasicRequest and BlogRequest has become too <em>magical.</em> It is almost easier just to keep validation inside the controller and skip all this extra request stuff.</p>
<pre><code>// inside BlogsController.php
public function storeBlog(Request $request)
{
    $this-&gt;validate($request, [
        'title' =&gt; 'required',
        ...
    ]);

    // is this really that much worse?
}
</code></pre>
<p>Sure, there is a place for Request validation, but I think having named request validation for every request in your application is going to cause more headaches and time than it will save.</p>
<h3>Here is the Basic Request that BlogRequest extends (if you want to see it)</h3>
<p>I saved this for last because it’s just a giant piece of code that you will either ignore or copy and paste.</p>
<pre><code>&lt;?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

abstract class BasicRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        $method = 'authorize' . $this-&gt;findMethodName();

        // we use policies for authorization so 
        // we can just ignore this for the most part
        if (!method_exists($this, $method))
        {
            return true;
        }

        return $this-&gt;$method($this-&gt;route()-&gt;parameters());
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        $method = lcfirst($this-&gt;findMethodName()) . 'Rules';

        // we aren't strict on rules for get requests
        if (strtolower($this-&gt;method()) == 'get' &amp;&amp; !method_exists($this, $method))
        {
            return [];
        }

        return $this-&gt;$method($this-&gt;route()-&gt;parameters());
    }

    /**
     * Find the method name for the current route
     * 
     * @return string
     */
    protected function findMethodName()
    {
        list($class, $method) = explode('@', $this-&gt;route()-&gt;getActionName());
 
        return $method;
    }

    /**
     * Default authorize
     * 
     * @return bool
     */
    public function authorizeIndex()
    {
        return true;
    }

    /**
     * Default authorize
     * 
     * @return bool
     */
    public function authorizeCreate()
    {
        return true;
    }

    /**
     * Default authorize
     * 
     * @return bool
     */
    public function authorizeShow()
    {
        return true;
    }

    /**
     * Default authorize
     * 
     * @return bool
     */
    public function authorizeEdit()
    {
        return true;
    }

    /**
     * Default authorize
     * 
     * @return bool
     */
    public function authorizeStore()
    {
        return true;
    }

    /**
     * Default authorize
     * 
     * @return bool
     */
    public function authorizeUpdate()
    {
        return true;
    }

    /**
     * Default authorize
     * 
     * @return bool
     */
    public function authorizeDestroy()
    {
        return true;
    }

    /**
     * Default rules
     * 
     * @return array
     */
    public function indexRules($params)
    {
        return [];
    }

    /**
     * Default rules
     * 
     * @return array
     */
    public function createRules($params)
    {
        return [];
    }

    /**
     * Default rules
     * 
     * @return array
     */
    public function showRules($params)
    {
        return [];
    }

    /**
     * Default rules
     * 
     * @return array
     */
    public function editRules($params)
    {
        return [];
    }

    /**
     * Default rules
     * 
     * @return array
     */
    public function storeRules($params)
    {
        return [];
    }

    /**
     * Default rules
     * 
     * @return array
     */
    public function updateRules($params)
    {
        return [];
    }

    /**
     * Default rules
     * 
     * @return array
     */
    public function destroyRules($params)
    {
        return [];
    }

}
</code></pre>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2016/04/2016-04-11_basic-form-request-validations-in-laravel/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Quest For The Holy Database]]></title>
        <id>/2017/05/2017-05-14_rethinkdb_is_really_cool/</id>
        <link href="/2017/05/2017-05-14_rethinkdb_is_really_cool/"/>
        <updated>2017-05-13T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I started playing around with a variety of databases lately (future posts to come) because I wanted to scrape a bunch of json data, dump those into a database and start sorting and filtering results. The json data is finanical information and has hundreds of data points (some in nested layers) and I wasn’t quite sure what information I even want to search for. There are gigabytes of raw json text being shoved into this database, and as I do exploratory data anaylsis, I wanted a nice place to store and query/filter/order/map the data without the overhead of creating lots of schemas.
So some of you might ask. Why not use the json data type on Mysql/PGSQL? Sure. Sure, that works. It’s gets tedious to query those things nested in a json column. Not to mention I want to do indexing to speed up my query searches. I’m scraping this data from varying sources, and I’m not even certain which data is relevant or useful yet. So nosql seemed like a good fit here. I think from a performance standpoint, I’d probably be fine with SQL tables as I’m dealing with 100’s of GB of data. But that isn’t the point. I’m trying to quickly get data imported and start exploring it without any overhead of defining schemas where I’m unsure of data layout.
In this project, I’m keeping track of changes over time. So, a time serious database design is useful. I checked out Influx, but decided against it. Currently, I’m adding a column for the snapshot time.

Every story has an ending, and RethinkDB’s tale ends sadly. RethinkDB has ceased development. The simplicity of this tool is what drew me to it. As previously dicussed, horizontal scaling and sharding is a breeze. The admin panel is really slick. You can run commands straight from the admin website. This would be a really nice tool, a middleground between SQL and no-SQL. Something I could add to the Batman utility belt. Alas, without future development, the project is likely to burn out like a red-dwarf, surely but slowly.
Here are my ratings for RethinkDB. These are just arbitrary, not based on any sort of benchmarks or anything, so don’t take them too seriously.
- Getting Started: 9/10
- Adoption: 3/10
- Documentation: 7/10
- Scaling: 9/10
- Security: 6/10
- Similarity to SQL: 7/10
- Production Ready: Probably not due to development shutdown

In the future I’m going to review some of the following tools.
Python for big data
- h5py
- mpi4py
- dask - https://towardsdatascience.com/how-to-handle-large-datasets-in-python-with-pandas-and-dask-34f43a897d55
- blaze
- PyStore https://medium.com/@aroussi/fast-data-store-for-pandas-time-series-data-using-pystore-89d9caeef4e2
- Pandas as big data https://www.dataquest.io/blog/pandas-big-data/
https://github.com/wiktorski/opentsdb_pandas
https://towardsdatascience.com/the-best-format-to-save-pandas-data-414dca023e0d
	Plain-text CSV — a good old friend of a data scientist
	Pickle — a Python’s way to serialize things
	MessagePack — it’s like JSON but fast and small
	HDF5 —a file format designed to store and organize large amounts of data
	Feather — a fast, lightweight, and easy-to-use binary file format for storing data frames
	Parquet — an Apache Hadoop’s columnar storage format


Timescale Looks interesting
https://docs.timescale.com/latest/tutorials/tutorial-hello-timescale

Other sqlless databases
- Couchbase
- ElasticSearch
- HBase
- Cassandra
- MongoDB
- DynamoDB
- neo4j
- Google Cloud Datastore
- Aerospike
]]></summary>
        <content type="html"><![CDATA[<p>I started playing around with a variety of databases lately (future posts to come) because I wanted to scrape a bunch of json data, dump those into a database and start sorting and filtering results. The json data is finanical information and has hundreds of data points (some in nested layers) and I wasn’t quite sure what information I even want to search for. There are gigabytes of raw json text being shoved into this database, and as I do exploratory data anaylsis, I wanted a nice place to store and query/filter/order/map the data without the overhead of creating lots of schemas.</p>
<p>So some of you might ask. Why not use the <code>json</code> data type on Mysql/PGSQL? Sure. Sure, that works. It’s gets tedious to query those things nested in a json column. Not to mention I want to do indexing to speed up my query searches. I’m scraping this data from varying sources, and I’m not even certain which data is relevant or useful yet. So nosql seemed like a good fit here. I think from a performance standpoint, I’d probably be fine with SQL tables as I’m dealing with 100’s of GB of data. But that isn’t the point. I’m trying to quickly get data imported and start exploring it without any overhead of defining schemas where I’m unsure of data layout.</p>
<p>In this project, I’m keeping track of changes over time. So, a time serious database design is useful. I checked out Influx, but decided against it. Currently, I’m adding a column for the snapshot time.</p>
<!-- read more -->
<p>Every story has an ending, and RethinkDB’s tale ends sadly. RethinkDB has ceased development. The simplicity of this tool is what drew me to it. As previously dicussed, horizontal scaling and sharding is a breeze. The admin panel is really slick. You can run commands straight from the admin website. This would be a really nice tool, a middleground between SQL and no-SQL. Something I could add to the Batman utility belt. Alas, without future development, the project is likely to burn out like a red-dwarf, surely but slowly.</p>
<p>Here are my ratings for RethinkDB. These are just arbitrary, not based on any sort of benchmarks or anything, so don’t take them too seriously.</p>
<pre><code>- Getting Started: 9/10
- Adoption: 3/10
- Documentation: 7/10
- Scaling: 9/10
- Security: 6/10
- Similarity to SQL: 7/10
- Production Ready: Probably not due to development shutdown
</code></pre>
<p>In the future I’m going to review some of the following tools.</p>
<p>Python for big data
- h5py
- mpi4py
- dask - <a href="https://towardsdatascience.com/how-to-handle-large-datasets-in-python-with-pandas-and-dask-34f43a897d55">https://towardsdatascience.com/how-to-handle-large-datasets-in-python-with-pandas-and-dask-34f43a897d55</a>
- blaze
- PyStore <a href="https://medium.com/@aroussi/fast-data-store-for-pandas-time-series-data-using-pystore-89d9caeef4e2">https://medium.com/@aroussi/fast-data-store-for-pandas-time-series-data-using-pystore-89d9caeef4e2</a>
- Pandas as big data <a href="https://www.dataquest.io/blog/pandas-big-data/">https://www.dataquest.io/blog/pandas-big-data/</a></p>
<pre><code>https://github.com/wiktorski/opentsdb_pandas
https://towardsdatascience.com/the-best-format-to-save-pandas-data-414dca023e0d
	Plain-text CSV — a good old friend of a data scientist
	Pickle — a Python’s way to serialize things
	MessagePack — it’s like JSON but fast and small
	HDF5 —a file format designed to store and organize large amounts of data
	Feather — a fast, lightweight, and easy-to-use binary file format for storing data frames
	Parquet — an Apache Hadoop’s columnar storage format
</code></pre>
<ul>
<li>Timescale Looks interesting
<a href="https://docs.timescale.com/latest/tutorials/tutorial-hello-timescale">https://docs.timescale.com/latest/tutorials/tutorial-hello-timescale</a></li>
</ul>
<p>Other sqlless databases
- Couchbase
- ElasticSearch
- HBase
- Cassandra
- MongoDB
- DynamoDB
- neo4j
- Google Cloud Datastore
- Aerospike</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2017/05/2017-05-14_rethinkdb_is_really_cool/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How To Easily Read Csvs In PHP]]></title>
        <id>/2019/03/2019-03-21_easy_csv_in_php/</id>
        <link href="/2019/03/2019-03-21_easy_csv_in_php/"/>
        <updated>2019-03-21T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Sometimes we just need to read in a csv file in php. I’ve tried using thephpleague’s csv package but it is over engineered in my opinion to do something so basic. Really, I want something similar to how file_get_contents gives me the entire content of the file but for the csv (in array format).
Here is a snippet I made that reads in a csv and returns an array of results.
]]></summary>
        <content type="html"><![CDATA[<p>Sometimes we just need to read in a csv file in php. I’ve tried using thephpleague’s csv package but it is over engineered in my opinion to do something so basic. Really, I want something similar to how <code>file_get_contents</code> gives me the entire content of the file but for the csv (in array format).</p>
<p>Here is a snippet I made that reads in a csv and returns an array of results.</p>
<!-- more -->
<pre><code>    function csv_to_array($path, $hasHeader = true) {
        $results = [];

        $handle = fopen($path, 'r');

        if ($hasHeader) {
            $header = fgetcsv($handle, 1000, &quot;,&quot;);
        }

        while (($data = fgetcsv($handle, 1000, &quot;,&quot;)) !== false) {
            if ($hasHeader) {
                $results[] = (object) array_combine($header, $data);
            } else {
                $results[] = $data;
            }
        }

       fclose($handle);

       return $results;
    }
</code></pre>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2019/03/2019-03-21_easy_csv_in_php/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Beware Has Many Relationships]]></title>
        <id>/2020/05/2020-05-07_i_dont_like_has_many_relationships/</id>
        <link href="/2020/05/2020-05-07_i_dont_like_has_many_relationships/"/>
        <updated>2020-05-06T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[There is an inherient pitfall lurking in each hasMany/belongsToMany relationship. This goes beyond the famous n+1 problem. Allow me to elaborate.
]]></summary>
        <content type="html"><![CDATA[<p>There is an inherient pitfall lurking in each hasMany/belongsToMany relationship. This goes beyond the famous n+1 problem. Allow me to elaborate.</p>
<!-- more -->
<p>Image you built a blogging platform using laravel and people can comment on each post. We might have a Post model like</p>
<pre><code>class Post extends Eloquent
{
    public function comments()
    {
        return $this-&gt;hasMany('Comment');
    }
}
</code></pre>
<p>Later you might call</p>
<pre><code>@foreach ($post-&gt;comments as $comment)
    &lt;div&gt;{{ $comment-&gt;text }} by {{ $comment-&gt;user_name }}&lt;/div&gt;
@endforeach
</code></pre>
<p>But what happens after a post goes viral? Maybe it gets a million comments on it? This page takes forever to load and the response payload is much larger. You could remedy this by doing something like</p>
<pre><code>@foreach ($post-&gt;comments()-&gt;paginate(15) as $comment)
    &lt;div&gt;{{ $comment-&gt;text }} by {{ $comment-&gt;user_name }}&lt;/div&gt;
@endforeach
</code></pre>
<p>But this hides the other 999,985 comments. What typically happens here is that you break this into nested resources and some front end magic code. Maybe some Vue.js, React, Svelte or whatever favor j-soup you’re into. You’ll likely end up making an ajax call to dynamically fetch more comments as the user scrolls down on the page.</p>
<pre><code>// user scrolls down
axios.get(`/posts/${postId}/comments`, {++page})
</code></pre>
<p>So this kind of scaling problem is not uncommon. I’ve worked on many Laravel applications, some large, some small. It’s been my experience that hasMany relationships end up scaling horribly, needing to be filtered or broken down into paginated lists anyway.</p>
<p>So the question I ask is, why store relationships in your model? Why not just form it in a controller?</p>
<pre><code>// no need to define a hasMany relationship
class PostCommentsController extends Controller {
    public function index(Request $request, $postId) {
        return Comment::where('post_id', $postId)-&gt;paginate();
    }
}
</code></pre>
<p>This isn’t strictly a Laravel/Eloquent issue. As I work with data mappers and entities I’ve seen this same issue come knocking like an old fr-enemy. Beware ye hasMany relationships and consider alternatives like nested resource controllers. These are clean, effecient and simple to implement.</p>
<p>Should we abandon all hasMany relationships? No. Only when they don’t scale. Take for example, where we model real-world invoices and give each invoice many line items. This should work well because we are only going to find a few dozen line items on a single invoice at worst case.</p>
<p>What are your thoughts?</p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2020/05/2020-05-07_i_dont_like_has_many_relationships/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[You Got That Facebook Math Problem Right!]]></title>
        <id>/2020/05/2020-05-14_facebook_math_sucks/</id>
        <link href="/2020/05/2020-05-14_facebook_math_sucks/"/>
        <updated>2020-05-13T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Often I see some image like this designed to spark up public arguments on facebook.

There is no bad answer for this math problem. Everyone is a winner. Allow me to explain.
]]></summary>
        <content type="html"><![CDATA[<p><em>Often I see some image like this designed to spark up public arguments on facebook.</em></p>
<img class="mx-auto max-w-md" src="/media/facebook_math_sucks/trick-math.png">
<p>There is no bad answer for this math problem. Everyone is a winner. Allow me to explain.</p>
<!-- more -->
<p>Most people will glance at this image, calculate that a pair of sneakers is worth 10. A man is worth 5. A pair of snow cones is worth 4.</p>
<p>Then we come to the last equation. They will add <code>10 + 5 + 4</code> and get <code>19</code>. A few clever people will pickup on subtle differences in the image and come up with a difference answer.</p>
<h3>Watch the facebook trollz as they bark: <strong>YOUR WRONG!</strong></h3>
<p>Returning to study the picture we find the last equation has 3 sneakers, 3 snow cones and 1 man. It’s easy to miss if you’re not paying attention.</p>
<p>So what is the real answer? Mathematically, it is undefined.</p>
<p>Imagine I took away the pictures and re-wrote it as a system of equations.</p>
<pre><code>a + a + a = 30
b + b + a + 20
c + c + b = 13
</code></pre>
<p>Then I ask you,</p>
<pre><code>x + y * z = ?
</code></pre>
<p>You would likely say, I can’t solve that. That is what is really happening in this picture. For some individuals we extrapolate the number of sneakers, snow cones and re-write the equation as:</p>
<pre><code>2a + 2a + 2a = 30
 b +  b + 2a = 20
2c + 2c +  b = 13
</code></pre>
<p>Gives us,</p>
<pre><code>a = 5
b = 5
c = 2
</code></pre>
<p>Then the final equation is:</p>
<pre><code>a + (b+2a+2c) * c = ?
5 + (5+10+4) * 2 = 43
</code></pre>
<p>This is precisely why we don’t use images alone to convey mathematical conecpts. In mathematics, we need a set of domain and range to apply operations upon. As you learn abstract algebra and higher forms of math, we find that our rules of algebra are based strictly on the Real numbers set. Once you get outside of this set, it can become even more complicated. It can become ambigous.</p>
<p>Let me illistrate. Let’s be really nit picky. Notice that in the final equation the man is missing part of a hand and also wearing different shoes. Thus if you were measuring weight, the man would technically weigh a different amount without his black shoes than with red sneakers. Thus he is no longer worth the same number as he used to be. He is technically a different variable. The answer to this problem becomes some number between 21 and 31. That’s assuming the man has mass and those aren’t anti-gravity shoes he was wearing. You can start throwing in all sorts of ambigous things to mess up the numbers.</p>
<p>You could start throwing in different mathematical operations. We only see 2 mathematical operations, the addition and multiplication operations.</p>
<p>What if a pair of sneakers is actually,</p>
<pre><code>a^a + a^a + a^a = 30
</code></pre>
<p>Now a red sneaker is now worth approximately <code>2.50618414</code>.</p>
<p>So for all these reasons above, I’ve come to the conclusion that any answer is acceptable. What do you think?</p>
<p><strong>** (facebOOk trollz grammer no good)</strong></p>
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2020/05/2020-05-14_facebook_math_sucks/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Emmet in Visual Studio Code makes me sad]]></title>
        <id>/2020/07/2020-07-09 emmet in visual studio code makes me sad/</id>
        <link href="/2020/07/2020-07-09 emmet in visual studio code makes me sad/"/>
        <updated>2020-07-08T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Emmet in VS Code is a great tool to speed up writing html but it always gets confused when I do stuff like w-3/4

]]></summary>
        <content type="html"><![CDATA[<p>Emmet in VS Code is a great tool to speed up writing html but it always gets confused when I do stuff like <code>w-3/4</code></p>
<img class="mx-auto max-w-md" src="/media/vscode-emmet/vscode-emmet.gif">
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2020/07/2020-07-09 emmet in visual studio code makes me sad/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Who Says Pawns Cannot Mate Kings?]]></title>
        <id>/2020/07/2021-01-21 who says pawns cannot mate/</id>
        <link href="/2020/07/2021-01-21 who says pawns cannot mate/"/>
        <updated>2020-07-08T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[This was a fun quick game I played tonight. I thought this was a neat mate. If that c2 pawn had just 1 more turn then I would have had been forced to draw by repetition.

]]></summary>
        <content type="html"><![CDATA[<p>This was a fun quick game I played tonight. I thought this was a neat mate. If that c2 pawn had just 1 more turn then I would have had been forced to draw by repetition.</p>
<img class="mx-auto max-w-md" src="/media/chess/chess fun 2021-01-21_20-29.png">
]]></content>
        <author>
            <name>K.D.</name>
            <email>contact-me  ~AT~  k246d.33mail.com</email>
            <uri>/2020/07/2021-01-21 who says pawns cannot mate/</uri>
        </author>
    </entry>
</feed>